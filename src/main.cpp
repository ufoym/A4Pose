#include "opencv2/opencv.hpp"
#include "opencv2/core/hal/hal.hpp"

static cv::Mat _extractBits(
	cv::InputArray _image,
	cv::InputArray _corners,
	int markerSize,
	int markerBorderBits,
	int cellSize,
	double cellMarginRate,
	double minStdDevOtsu) {

	CV_Assert(_image.getMat().channels() == 1);
	CV_Assert(_corners.total() == 4);
	CV_Assert(markerBorderBits > 0 && cellSize > 0 && cellMarginRate >= 0 && cellMarginRate <= 1);
	CV_Assert(minStdDevOtsu >= 0);

	int markerSizeWithBorders = markerSize + 2 * markerBorderBits;
	int cellMarginPixels = int(cellMarginRate * cellSize);

	cv::Mat resultImg;
	int resultImgSize = markerSizeWithBorders * cellSize;
	cv::Mat resultImgCorners(4, 1, CV_32FC2);
	resultImgCorners.ptr< cv::Point2f >(0)[0] = cv::Point2f(0, 0);
	resultImgCorners.ptr< cv::Point2f >(0)[1] = cv::Point2f((float)resultImgSize - 1, 0);
	resultImgCorners.ptr< cv::Point2f >(0)[2] =
		cv::Point2f((float)resultImgSize - 1, (float)resultImgSize - 1);
	resultImgCorners.ptr< cv::Point2f >(0)[3] = cv::Point2f(0, (float)resultImgSize - 1);

	cv::Mat transformation = getPerspectiveTransform(_corners, resultImgCorners);
	cv::warpPerspective(_image, resultImg, transformation, cv::Size(resultImgSize, resultImgSize),
		cv::INTER_NEAREST);

	cv::Mat bits(markerSizeWithBorders, markerSizeWithBorders, CV_8UC1, cv::Scalar::all(0));

	cv::Mat mean, stddev;

	cv::Mat innerRegion = resultImg.colRange(cellSize / 2, resultImg.cols - cellSize / 2)
		.rowRange(cellSize / 2, resultImg.rows - cellSize / 2);
	cv::meanStdDev(innerRegion, mean, stddev);
	if (stddev.ptr< double >(0)[0] < minStdDevOtsu) {

		if (mean.ptr< double >(0)[0] > 127)
			bits.setTo(1);
		else
			bits.setTo(0);
		return bits;
	}

	cv::threshold(resultImg, resultImg, 125, 255, cv::THRESH_BINARY | cv::THRESH_OTSU);

	for (int y = 0; y < markerSizeWithBorders; y++) {
		for (int x = 0; x < markerSizeWithBorders; x++) {
			int Xstart = x * (cellSize)+cellMarginPixels;
			int Ystart = y * (cellSize)+cellMarginPixels;
			cv::Mat square = resultImg(cv::Rect(Xstart, Ystart, cellSize - 2 * cellMarginPixels,
				cellSize - 2 * cellMarginPixels));

			size_t nZ = (size_t)cv::countNonZero(square);
			if (nZ > square.total() / 2) bits.at< unsigned char >(y, x) = 1;
		}
	}

	return bits;
}

class Dictionary {

public:
	cv::Mat bytesList;
	int markerSize;
	int maxCorrectionBits;

	Dictionary(const cv::Mat &_bytesList, int _markerSize, int _maxcorr) {
		markerSize = _markerSize;
		maxCorrectionBits = _maxcorr;
		bytesList = _bytesList;
	}

	static cv::Ptr<Dictionary> create(){
		static unsigned char DICT_6X6_1000_BYTES[][4][5] = { { { 30, 61, 216, 42, 6 }, { 227, 186, 70, 49, 9 }, { 101, 65, 187, 199, 8 }, { 152, 198, 37, 220, 7 }, }, { { 14, 251, 163, 137, 1 }, { 215, 230, 24, 5, 14 }, { 137, 28, 93, 247, 0 }, { 122, 1, 134, 126, 11 }, }, { { 21, 144, 126, 172, 13 }, { 236, 105, 87, 80, 6 }, { 179, 87, 224, 154, 8 }, { 96, 174, 169, 99, 7 }, }, { { 201, 27, 48, 105, 14 }, { 66, 50, 75, 222, 12 }, { 121, 96, 205, 137, 3 }, { 55, 189, 36, 196, 2 }, }, { { 214, 7, 214, 225, 5 }, { 164, 203, 74, 191, 2 }, { 168, 118, 190, 6, 11 }, { 79, 213, 45, 50, 5 }, }, { { 216, 232, 224, 230, 8 }, { 43, 140, 19, 138, 15 }, { 22, 112, 113, 113, 11 }, { 245, 28, 131, 29, 4 }, }, { { 66, 104, 180, 31, 5 }, { 13, 165, 192, 149, 13 }, { 175, 130, 209, 100, 2 }, { 186, 144, 58, 91, 0 }, }, { { 136, 165, 15, 41, 10 }, { 19, 115, 23, 38, 0 }, { 89, 79, 10, 81, 1 }, { 6, 78, 140, 236, 8 }, }, { { 48, 125, 82, 79, 13 }, { 109, 110, 97, 60, 9 }, { 191, 36, 171, 224, 12 }, { 147, 200, 103, 107, 6 }, }, { { 60, 47, 52, 179, 12 }, { 131, 11, 235, 52, 15 }, { 60, 210, 207, 67, 12 }, { 242, 205, 125, 12, 1 }, }, { { 69, 223, 199, 78, 3 }, { 252, 247, 24, 232, 9 }, { 199, 46, 63, 186, 2 }, { 145, 113, 142, 243, 15 }, }, { { 72, 216, 91, 37, 7 }, { 126, 84, 86, 148, 8 }, { 234, 77, 161, 177, 2 }, { 18, 150, 162, 167, 14 }, }, { { 113, 5, 88, 252, 6 }, { 40, 58, 230, 248, 2 }, { 99, 241, 170, 8, 14 }, { 65, 246, 117, 193, 4 }, }, { { 134, 220, 250, 208, 7 }, { 228, 212, 212, 59, 14 }, { 224, 181, 243, 182, 1 }, { 125, 194, 178, 178, 7 }, }, { { 141, 114, 169, 63, 6 }, { 219, 180, 206, 70, 5 }, { 111, 201, 84, 235, 1 }, { 166, 39, 50, 221, 11 }, }, { { 162, 184, 157, 205, 14 }, { 89, 177, 117, 31, 10 }, { 123, 59, 145, 212, 5 }, { 95, 138, 232, 217, 10 }, }, { { 9, 253, 30, 156, 4 }, { 75, 103, 212, 112, 10 }, { 35, 151, 139, 249, 0 }, { 80, 226, 190, 109, 2 }, }, { { 21, 77, 189, 24, 15 }, { 148, 191, 197, 112, 12 }, { 241, 139, 219, 42, 8 }, { 48, 234, 63, 210, 9 }, }, { { 48, 10, 49, 14, 2 }, { 24, 56, 40, 16, 13 }, { 71, 8, 197, 0, 12 }, { 176, 129, 65, 193, 8 }, }, { { 72, 7, 239, 175, 13 }, { 62, 227, 79, 164, 7 }, { 191, 95, 126, 1, 2 }, { 226, 95, 44, 119, 12 }, }, { { 86, 223, 17, 219, 6 }, { 208, 62, 216, 189, 11 }, { 109, 184, 143, 182, 10 }, { 219, 209, 183, 192, 11 }, }, { { 102, 136, 50, 116, 12 }, { 136, 64, 243, 153, 12 }, { 50, 228, 193, 22, 6 }, { 57, 156, 240, 33, 1 }, }, { { 118, 232, 203, 120, 1 }, { 181, 236, 182, 137, 8 }, { 129, 237, 49, 118, 14 }, { 25, 22, 211, 122, 13 }, }, { { 154, 83, 217, 207, 3 }, { 126, 190, 12, 31, 3 }, { 207, 57, 188, 165, 9 }, { 207, 131, 7, 215, 14 }, }, { { 169, 203, 132, 2, 4 }, { 2, 135, 120, 66, 9 }, { 36, 2, 29, 57, 5 }, { 148, 33, 238, 20, 0 }, }, { { 198, 117, 73, 73, 0 }, { 241, 38, 4, 175, 0 }, { 9, 41, 42, 230, 3 }, { 15, 82, 6, 72, 15 }, }, { { 193, 210, 136, 148, 1 }, { 76, 132, 156, 194, 2 }, { 130, 145, 20, 184, 3 }, { 68, 51, 146, 19, 2 }, }, { { 231, 72, 8, 82, 11 }, { 132, 20, 165, 203, 9 }, { 212, 161, 1, 46, 7 }, { 157, 58, 82, 130, 1 }, }, { { 234, 47, 202, 132, 8 }, { 43, 194, 45, 163, 10 }, { 18, 21, 63, 69, 7 }, { 92, 91, 68, 61, 4 }, }, { { 233, 99, 183, 123, 1 }, { 23, 231, 170, 222, 5 }, { 141, 238, 220, 105, 7 }, { 167, 181, 94, 126, 8 }, }, { { 250, 54, 101, 42, 15 }, { 119, 57, 107, 163, 5 }, { 245, 74, 102, 197, 15 }, { 172, 93, 105, 206, 14 }, }, { { 6, 91, 255, 123, 13 }, { 244, 231, 207, 29, 13 }, { 189, 239, 253, 166, 0 }, { 187, 143, 62, 114, 15 }, }, { { 5, 65, 215, 45, 6 }, { 184, 247, 66, 84, 0 }, { 107, 78, 184, 42, 0 }, { 2, 164, 46, 241, 13 }, }, { { 12, 247, 36, 106, 2 }, { 195, 55, 26, 40, 5 }, { 69, 98, 78, 243, 0 }, { 161, 69, 142, 204, 3 }, }, { { 19, 56, 163, 158, 11 }, { 93, 248, 129, 65, 15 }, { 215, 156, 81, 204, 8 }, { 248, 40, 17, 251, 10 }, }, { { 21, 168, 147, 231, 4 }, { 153, 200, 82, 92, 11 }, { 46, 124, 145, 90, 8 }, { 211, 164, 161, 57, 9 }, }, { { 58, 65, 126, 233, 14 }, { 34, 127, 103, 29, 6 }, { 121, 119, 232, 37, 12 }, { 107, 142, 111, 228, 4 }, }, { { 79, 17, 226, 108, 0 }, { 234, 226, 2, 201, 4 }, { 3, 100, 120, 143, 2 }, { 41, 52, 4, 117, 7 }, }, { { 83, 13, 182, 210, 0 }, { 0, 203, 128, 249, 15 }, { 4, 182, 219, 12, 10 }, { 249, 240, 29, 48, 0 }, }, { { 88, 155, 250, 227, 4 }, { 98, 202, 94, 156, 15 }, { 44, 117, 253, 145, 10 }, { 243, 151, 165, 52, 6 }, }, { { 100, 9, 232, 160, 11 }, { 164, 146, 39, 128, 14 }, { 208, 81, 121, 2, 6 }, { 112, 30, 68, 146, 5 }, }, { { 96, 83, 122, 137, 1 }, { 100, 102, 44, 148, 6 }, { 137, 21, 236, 160, 6 }, { 98, 147, 70, 98, 6 }, }, { { 97, 89, 6, 155, 10 }, { 64, 119, 161, 196, 11 }, { 93, 150, 9, 168, 6 }, { 210, 56, 94, 224, 2 }, }, { { 107, 255, 120, 215, 11 }, { 111, 22, 189, 253, 15 }, { 222, 177, 239, 253, 6 }, { 251, 251, 214, 143, 6 }, }, { { 112, 173, 150, 164, 15 }, { 13, 219, 115, 176, 10 }, { 242, 86, 155, 80, 14 }, { 80, 220, 237, 187, 0 }, }, { { 117, 132, 111, 113, 10 }, { 176, 89, 183, 236, 4 }, { 88, 239, 98, 26, 14 }, { 35, 126, 217, 160, 13 }, }, { { 122, 149, 25, 47, 12 }, { 90, 42, 119, 181, 1 }, { 63, 73, 138, 149, 14 }, { 138, 222, 229, 69, 10 }, }, { { 134, 9, 118, 10, 10 }, { 160, 115, 1, 19, 13 }, { 85, 6, 233, 6, 1 }, { 188, 136, 12, 224, 5 }, }, { { 138, 45, 68, 195, 15 }, { 39, 19, 65, 47, 11 }, { 252, 50, 43, 69, 1 }, { 223, 72, 44, 142, 4 }, }, { { 147, 235, 120, 177, 4 }, { 33, 14, 222, 87, 14 }, { 40, 209, 237, 124, 9 }, { 126, 167, 183, 8, 4 }, }, { { 152, 141, 168, 77, 4 }, { 10, 170, 84, 46, 12 }, { 43, 33, 91, 17, 9 }, { 55, 66, 165, 85, 0 }, }, { { 158, 222, 43, 60, 8 }, { 218, 108, 159, 35, 12 }, { 19, 205, 71, 183, 9 }, { 60, 79, 147, 101, 11 }, }, { { 165, 41, 224, 123, 8 }, { 161, 162, 163, 78, 13 }, { 29, 224, 121, 74, 5 }, { 183, 44, 84, 88, 5 }, }, { { 181, 147, 184, 85, 15 }, { 204, 154, 253, 94, 4 }, { 250, 161, 220, 154, 13 }, { 39, 171, 245, 147, 3 }, }, { { 183, 248, 228, 38, 15 }, { 237, 157, 115, 67, 13 }, { 246, 66, 113, 254, 13 }, { 188, 44, 235, 155, 7 }, }, { { 188, 32, 82, 37, 14 }, { 171, 88, 99, 22, 0 }, { 122, 68, 160, 67, 13 }, { 6, 140, 97, 173, 5 }, }, { { 192, 68, 135, 118, 5 }, { 28, 197, 194, 170, 1 }, { 166, 238, 18, 32, 3 }, { 133, 84, 58, 51, 8 }, }, { { 196, 195, 36, 37, 9 }, { 140, 7, 27, 134, 4 }, { 154, 66, 76, 50, 3 }, { 38, 29, 142, 3, 1 }, }, { { 197, 169, 27, 216, 13 }, { 149, 98, 213, 218, 10 }, { 177, 189, 137, 90, 3 }, { 85, 186, 180, 106, 9 }, }, { { 206, 115, 230, 178, 12 }, { 227, 199, 203, 131, 7 }, { 52, 214, 124, 231, 3 }, { 236, 29, 62, 60, 7 }, }, { { 205, 12, 166, 39, 2 }, { 138, 209, 2, 230, 13 }, { 78, 70, 83, 11, 3 }, { 182, 116, 8, 181, 1 }, }, { { 201, 67, 93, 68, 13 }, { 62, 7, 77, 218, 0 }, { 178, 43, 172, 41, 3 }, { 5, 187, 46, 7, 12 }, }, { { 207, 190, 128, 243, 4 }, { 195, 128, 218, 239, 11 }, { 44, 240, 23, 223, 3 }, { 223, 117, 176, 28, 3 }, }, { { 229, 125, 21, 135, 7 }, { 221, 23, 96, 246, 11 }, { 238, 26, 139, 234, 7 }, { 214, 240, 110, 139, 11 }, }, { { 239, 198, 133, 142, 9 }, { 158, 165, 57, 227, 3 }, { 151, 26, 22, 63, 7 }, { 204, 121, 202, 87, 9 }, }, { { 247, 126, 243, 119, 2 }, { 249, 220, 170, 255, 13 }, { 78, 236, 247, 238, 15 }, { 191, 245, 83, 185, 15 }, }, { { 44, 228, 63, 37, 4 }, { 155, 69, 118, 52, 4 }, { 42, 79, 194, 115, 4 }, { 34, 198, 234, 45, 9 }, }, { { 43, 220, 255, 75, 3 }, { 118, 245, 52, 125, 13 }, { 205, 47, 243, 189, 4 }, { 187, 226, 202, 246, 14 }, }, { { 55, 199, 221, 189, 10 }, { 184, 191, 191, 117, 2 }, { 91, 219, 190, 62, 12 }, { 74, 239, 223, 209, 13 }, }, { { 161, 162, 84, 224, 15 }, { 37, 17, 123, 90, 2 }, { 240, 114, 164, 88, 5 }, { 69, 173, 232, 138, 4 }, }, { { 169, 130, 193, 187, 5 }, { 54, 160, 250, 70, 3 }, { 173, 216, 52, 25, 5 }, { 198, 37, 240, 86, 12 }, }, { { 216, 27, 73, 176, 8 }, { 114, 10, 143, 130, 10 }, { 16, 217, 45, 129, 11 }, { 84, 31, 21, 4, 14 }, }, { { 3, 88, 41, 248, 6 }, { 80, 52, 198, 73, 14 }, { 97, 249, 65, 172, 0 }, { 121, 38, 50, 192, 10 }, }, { { 7, 196, 9, 95, 12 }, { 152, 36, 213, 109, 1 }, { 63, 169, 2, 62, 0 }, { 139, 106, 178, 65, 9 }, }, { { 15, 226, 102, 23, 11 }, { 175, 85, 153, 69, 5 }, { 222, 134, 100, 127, 0 }, { 170, 41, 154, 175, 5 }, }, { { 20, 72, 54, 68, 1 }, { 140, 77, 0, 24, 12 }, { 130, 38, 193, 34, 8 }, { 49, 128, 11, 35, 1 }, }, { { 16, 173, 95, 251, 7 }, { 53, 123, 214, 60, 11 }, { 237, 255, 171, 80, 8 }, { 211, 198, 189, 234, 12 }, }, { { 18, 130, 149, 83, 15 }, { 20, 153, 217, 29, 1 }, { 252, 170, 148, 20, 8 }, { 139, 137, 185, 146, 8 }, }, { { 22, 225, 49, 132, 12 }, { 153, 14, 81, 17, 6 }, { 50, 24, 200, 118, 8 }, { 104, 136, 167, 9, 9 }, }, { { 24, 122, 73, 107, 0 }, { 115, 44, 14, 12, 9 }, { 13, 105, 37, 225, 8 }, { 147, 7, 3, 76, 14 }, }, { { 26, 232, 134, 17, 2 }, { 3, 221, 144, 5, 8 }, { 72, 134, 17, 117, 8 }, { 26, 0, 155, 188, 0 }, }, { { 25, 19, 174, 10, 1 }, { 70, 235, 12, 64, 5 }, { 133, 7, 92, 137, 8 }, { 160, 35, 13, 118, 2 }, }, { { 27, 103, 181, 161, 7 }, { 23, 159, 74, 117, 6 }, { 232, 90, 222, 109, 8 }, { 106, 229, 47, 158, 8 }, }, { { 37, 220, 149, 240, 11 }, { 212, 149, 179, 120, 10 }, { 208, 250, 147, 186, 4 }, { 81, 236, 218, 146, 11 }, }, { { 40, 137, 97, 247, 6 }, { 58, 18, 242, 12, 15 }, { 110, 248, 105, 17, 4 }, { 243, 4, 244, 133, 12 }, }, { { 51, 84, 20, 106, 10 }, { 64, 61, 35, 121, 1 }, { 85, 98, 130, 172, 12 }, { 137, 236, 75, 192, 2 }, }, { { 49, 193, 108, 31, 7 }, { 44, 63, 244, 68, 5 }, { 239, 131, 104, 56, 12 }, { 162, 34, 255, 195, 4 }, }, { { 51, 203, 24, 198, 6 }, { 8, 30, 124, 89, 11 }, { 102, 49, 141, 60, 12 }, { 217, 163, 231, 129, 0 }, }, { { 62, 207, 228, 144, 15 }, { 166, 159, 249, 33, 14 }, { 240, 146, 127, 55, 12 }, { 120, 73, 255, 150, 5 }, }, { { 70, 69, 24, 163, 15 }, { 132, 22, 71, 181, 3 }, { 252, 81, 138, 38, 2 }, { 202, 222, 38, 130, 1 }, }, { { 68, 186, 112, 182, 7 }, { 237, 16, 218, 144, 15 }, { 230, 208, 229, 210, 2 }, { 240, 149, 176, 139, 7 }, }, { { 65, 156, 98, 62, 8 }, { 104, 96, 147, 224, 13 }, { 23, 196, 99, 152, 2 }, { 176, 124, 144, 97, 6 }, }, { { 72, 209, 145, 74, 1 }, { 86, 166, 16, 152, 1 }, { 133, 40, 152, 177, 2 }, { 129, 144, 134, 86, 10 }, }, { { 84, 244, 153, 246, 13 }, { 221, 140, 215, 184, 3 }, { 182, 249, 146, 242, 10 }, { 193, 222, 179, 27, 11 }, }, { { 87, 90, 156, 129, 3 }, { 196, 157, 12, 213, 10 }, { 200, 19, 149, 174, 10 }, { 90, 179, 11, 146, 3 }, }, { { 85, 131, 85, 178, 12 }, { 176, 11, 219, 208, 3 }, { 52, 218, 172, 26, 10 }, { 192, 189, 189, 0, 13 }, }, { { 87, 183, 118, 16, 15 }, { 229, 91, 217, 241, 4 }, { 240, 134, 238, 222, 10 }, { 40, 249, 189, 170, 7 }, }, { { 92, 52, 54, 254, 4 }, { 203, 105, 194, 184, 7 }, { 39, 246, 194, 195, 10 }, { 225, 212, 57, 109, 3 }, }, { { 92, 72, 252, 119, 14 }, { 170, 157, 199, 156, 13 }, { 126, 227, 241, 35, 10 }, { 179, 158, 59, 149, 5 }, }, { { 94, 110, 239, 64, 2 }, { 179, 221, 12, 169, 12 }, { 64, 47, 119, 103, 10 }, { 57, 83, 11, 188, 13 }, }, { { 95, 35, 59, 111, 15 }, { 159, 122, 79, 221, 5 }, { 255, 109, 204, 79, 10 }, { 171, 191, 37, 239, 9 }, }, { { 91, 116, 42, 99, 2 }, { 67, 92, 6, 237, 5 }, { 76, 101, 66, 237, 10 }, { 171, 118, 3, 172, 2 }, }, { { 101, 15, 163, 58, 14 }, { 144, 242, 235, 224, 13 }, { 117, 204, 95, 10, 6 }, { 176, 125, 116, 240, 9 }, }, { { 101, 211, 23, 92, 12 }, { 216, 103, 249, 216, 0 }, { 51, 174, 140, 186, 6 }, { 1, 185, 254, 97, 11 }, }, { { 106, 156, 36, 90, 14 }, { 66, 49, 241, 169, 13 }, { 117, 162, 67, 149, 6 }, { 185, 88, 248, 196, 2 }, }, { { 105, 197, 243, 4, 2 }, { 58, 214, 48, 240, 4 }, { 66, 12, 250, 57, 6 }, { 32, 240, 198, 181, 12 }, }, { { 105, 210, 72, 78, 10 }, { 106, 52, 61, 200, 1 }, { 87, 33, 36, 185, 6 }, { 129, 59, 194, 197, 6 }, }, { { 116, 121, 226, 222, 6 }, { 233, 254, 224, 136, 15 }, { 103, 180, 121, 226, 14 }, { 241, 16, 119, 249, 7 }, }, { { 114, 207, 35, 234, 11 }, { 20, 126, 59, 169, 15 }, { 213, 124, 79, 52, 14 }, { 249, 93, 199, 226, 8 }, }, { { 119, 177, 220, 65, 4 }, { 225, 139, 116, 221, 0 }, { 40, 35, 184, 222, 14 }, { 11, 178, 237, 24, 7 }, }, { { 126, 12, 7, 33, 7 }, { 150, 89, 98, 165, 8 }, { 232, 78, 3, 7, 14 }, { 26, 84, 105, 166, 9 }, }, { { 122, 105, 112, 100, 7 }, { 47, 30, 98, 153, 12 }, { 226, 96, 233, 101, 14 }, { 57, 148, 103, 143, 4 }, }, { { 120, 178, 216, 112, 7 }, { 103, 152, 254, 152, 0 }, { 224, 225, 180, 209, 14 }, { 1, 151, 241, 158, 6 }, }, { { 121, 197, 133, 121, 4 }, { 18, 175, 242, 236, 0 }, { 41, 234, 26, 57, 14 }, { 3, 116, 255, 84, 8 }, }, { { 134, 111, 89, 252, 6 }, { 185, 54, 206, 59, 10 }, { 99, 249, 175, 102, 1 }, { 93, 199, 54, 201, 13 }, }, { { 130, 246, 114, 127, 5 }, { 109, 100, 218, 63, 5 }, { 175, 228, 230, 244, 1 }, { 175, 197, 178, 107, 6 }, }, { { 133, 78, 47, 65, 4 }, { 144, 69, 76, 110, 12 }, { 40, 47, 71, 42, 1 }, { 55, 99, 42, 32, 9 }, }, { { 154, 17, 133, 147, 4 }, { 82, 139, 192, 7, 3 }, { 44, 154, 24, 133, 9 }, { 206, 0, 61, 20, 10 }, }, { { 156, 113, 96, 201, 7 }, { 231, 62, 64, 14, 6 }, { 233, 48, 104, 227, 9 }, { 103, 0, 39, 206, 7 }, }, { { 157, 209, 148, 253, 8 }, { 202, 175, 147, 94, 2 }, { 27, 242, 152, 187, 9 }, { 71, 172, 159, 85, 3 }, }, { { 162, 30, 18, 227, 8 }, { 64, 64, 43, 63, 11 }, { 28, 116, 135, 132, 5 }, { 223, 205, 64, 32, 2 }, }, { { 174, 112, 28, 130, 12 }, { 195, 5, 101, 19, 3 }, { 52, 19, 128, 231, 5 }, { 204, 138, 106, 12, 3 }, }, { { 173, 1, 33, 156, 1 }, { 158, 34, 160, 66, 6 }, { 131, 152, 72, 11, 5 }, { 100, 32, 84, 71, 9 }, }, { { 176, 53, 31, 158, 14 }, { 89, 123, 229, 50, 3 }, { 119, 159, 138, 192, 13 }, { 196, 202, 125, 233, 10 }, }, { { 182, 74, 216, 13, 4 }, { 168, 172, 108, 23, 8 }, { 43, 1, 181, 38, 13 }, { 30, 131, 99, 81, 5 }, }, { { 181, 55, 49, 75, 4 }, { 209, 42, 104, 126, 5 }, { 45, 40, 206, 202, 13 }, { 167, 225, 101, 72, 11 }, }, { { 190, 170, 199, 227, 11 }, { 183, 217, 59, 15, 11 }, { 220, 126, 53, 87, 13 }, { 223, 13, 201, 190, 13 }, }, { { 187, 104, 61, 188, 15 }, { 31, 61, 231, 83, 14 }, { 243, 219, 193, 109, 13 }, { 124, 174, 123, 207, 8 }, }, { { 198, 114, 247, 44, 1 }, { 253, 229, 10, 147, 4 }, { 131, 78, 244, 230, 3 }, { 44, 149, 10, 123, 15 }, }, { { 193, 231, 77, 186, 11 }, { 53, 55, 159, 226, 3 }, { 213, 219, 46, 120, 3 }, { 196, 127, 158, 202, 12 }, }, { { 203, 85, 238, 89, 13 }, { 102, 231, 197, 239, 4 }, { 185, 167, 122, 173, 3 }, { 47, 122, 62, 118, 6 }, }, { { 203, 160, 83, 114, 4 }, { 51, 64, 210, 219, 1 }, { 36, 236, 160, 93, 3 }, { 141, 180, 176, 44, 12 }, }, { { 208, 9, 15, 207, 1 }, { 28, 107, 4, 142, 11 }, { 143, 63, 9, 0, 11 }, { 215, 18, 13, 99, 8 }, }, { { 208, 108, 58, 213, 4 }, { 9, 76, 196, 190, 14 }, { 42, 181, 195, 96, 11 }, { 119, 210, 51, 41, 0 }, }, { { 211, 241, 32, 87, 4 }, { 73, 14, 208, 207, 5 }, { 46, 160, 72, 252, 11 }, { 175, 48, 183, 9, 2 }, }, { { 230, 227, 59, 26, 7 }, { 149, 118, 252, 147, 5 }, { 229, 141, 204, 118, 7 }, { 172, 147, 246, 234, 9 }, }, { { 227, 83, 62, 164, 10 }, { 72, 87, 47, 211, 6 }, { 82, 87, 204, 172, 7 }, { 108, 191, 78, 161, 2 }, }, { { 232, 6, 142, 177, 4 }, { 2, 193, 238, 166, 2 }, { 40, 215, 22, 1, 7 }, { 70, 87, 120, 52, 0 }, }, { { 236, 7, 192, 89, 7 }, { 166, 178, 232, 174, 0 }, { 233, 160, 62, 3, 7 }, { 7, 81, 116, 214, 5 }, }, { { 234, 243, 128, 61, 10 }, { 75, 182, 187, 135, 0 }, { 91, 192, 28, 245, 7 }, { 14, 29, 214, 221, 2 }, }, { { 246, 59, 39, 216, 8 }, { 209, 107, 169, 139, 14 }, { 17, 190, 77, 198, 15 }, { 125, 25, 93, 104, 11 }, }, { { 243, 7, 152, 55, 9 }, { 12, 138, 175, 247, 1 }, { 158, 193, 158, 12, 15 }, { 142, 255, 85, 19, 0 }, }, { { 254, 75, 186, 155, 9 }, { 134, 238, 173, 151, 15 }, { 157, 149, 221, 39, 15 }, { 254, 155, 87, 118, 1 }, }, { { 171, 165, 125, 134, 11 }, { 63, 19, 53, 115, 7 }, { 214, 27, 234, 93, 5 }, { 236, 234, 204, 143, 12 }, }, { { 192, 209, 98, 90, 11 }, { 100, 118, 145, 138, 5 }, { 213, 164, 104, 176, 3 }, { 165, 24, 150, 226, 6 }, }, { { 19, 206, 123, 174, 7 }, { 60, 124, 94, 113, 15 }, { 231, 93, 231, 60, 8 }, { 248, 231, 163, 227, 12 }, }, { { 78, 129, 253, 97, 7 }, { 182, 147, 86, 157, 4 }, { 232, 107, 248, 23, 2 }, { 43, 150, 172, 150, 13 }, }, { { 86, 224, 118, 50, 0 }, { 161, 77, 146, 145, 5 }, { 4, 198, 224, 118, 10 }, { 168, 148, 155, 40, 5 }, }, { { 106, 112, 138, 84, 0 }, { 75, 196, 164, 137, 0 }, { 2, 165, 16, 229, 6 }, { 9, 18, 82, 61, 2 }, }, { { 114, 168, 152, 161, 8 }, { 1, 136, 55, 149, 10 }, { 24, 81, 145, 84, 14 }, { 90, 158, 193, 24, 0 }, }, { { 129, 93, 66, 248, 0 }, { 96, 102, 130, 106, 10 }, { 1, 244, 43, 168, 1 }, { 85, 100, 22, 96, 6 }, }, { { 207, 76, 195, 213, 15 }, { 190, 212, 193, 239, 10 }, { 250, 188, 51, 47, 3 }, { 95, 120, 50, 183, 13 }, }, { { 214, 187, 101, 134, 4 }, { 249, 11, 88, 131, 15 }, { 38, 26, 109, 214, 11 }, { 252, 17, 173, 9, 15 }, }, { { 236, 211, 19, 163, 1 }, { 214, 70, 58, 150, 3 }, { 140, 92, 140, 179, 7 }, { 198, 149, 198, 38, 11 }, }, { { 245, 33, 245, 32, 7 }, { 181, 155, 98, 210, 4 }, { 224, 74, 248, 74, 15 }, { 36, 180, 109, 154, 13 }, }, { { 249, 31, 165, 223, 7 }, { 94, 187, 232, 238, 15 }, { 239, 186, 95, 137, 15 }, { 247, 113, 125, 215, 10 }, }, { { 0, 36, 244, 122, 7 }, { 37, 177, 194, 56, 5 }, { 229, 226, 242, 64, 0 }, { 161, 196, 56, 218, 4 }, }, { { 0, 8, 77, 136, 2 }, { 48, 49, 4, 0, 10 }, { 65, 27, 33, 0, 0 }, { 80, 2, 8, 192, 12 }, }, { { 4, 60, 194, 242, 9 }, { 229, 192, 131, 40, 11 }, { 148, 244, 51, 194, 0 }, { 209, 76, 16, 58, 7 }, }, { { 4, 123, 80, 33, 1 }, { 229, 6, 10, 20, 8 }, { 136, 64, 173, 226, 0 }, { 18, 133, 6, 10, 7 }, }, { { 6, 122, 228, 193, 13 }, { 229, 133, 73, 13, 14 }, { 184, 50, 117, 230, 0 }, { 123, 9, 42, 26, 7 }, }, { { 0, 170, 150, 138, 3 }, { 5, 241, 24, 16, 11 }, { 197, 22, 149, 80, 0 }, { 208, 129, 136, 250, 0 }, }, { { 4, 209, 56, 233, 4 }, { 192, 38, 86, 28, 6 }, { 41, 113, 200, 178, 0 }, { 99, 134, 166, 64, 3 }, }, { { 5, 16, 168, 13, 10 }, { 200, 176, 5, 68, 4 }, { 91, 1, 80, 138, 0 }, { 34, 42, 0, 209, 3 }, }, { { 1, 64, 176, 0, 7 }, { 4, 148, 64, 80, 4 }, { 224, 0, 208, 40, 0 }, { 32, 160, 34, 146, 0 }, }, { { 1, 157, 156, 238, 1 }, { 76, 163, 22, 120, 11 }, { 135, 115, 155, 152, 0 }, { 209, 230, 140, 83, 2 }, }, { { 8, 16, 87, 227, 11 }, { 118, 81, 3, 28, 3 }, { 220, 126, 160, 129, 0 }, { 195, 140, 8, 166, 14 }, }, { { 8, 107, 151, 182, 6 }, { 27, 215, 202, 16, 11 }, { 102, 222, 157, 97, 0 }, { 208, 133, 62, 189, 8 }, }, { { 14, 232, 184, 96, 10 }, { 131, 148, 23, 25, 12 }, { 80, 97, 209, 119, 0 }, { 57, 142, 130, 156, 1 }, }, { { 11, 108, 118, 185, 11 }, { 39, 117, 131, 117, 14 }, { 217, 214, 227, 109, 0 }, { 122, 236, 26, 238, 4 }, }, { { 15, 220, 185, 140, 11 }, { 222, 180, 21, 113, 14 }, { 211, 25, 211, 191, 0 }, { 120, 234, 130, 215, 11 }, }, { { 15, 202, 207, 58, 0 }, { 178, 229, 158, 65, 9 }, { 5, 207, 53, 63, 0 }, { 152, 39, 154, 116, 13 }, }, { { 20, 36, 159, 217, 8 }, { 145, 233, 133, 60, 2 }, { 25, 191, 146, 66, 8 }, { 67, 202, 25, 120, 9 }, }, { { 20, 7, 32, 31, 13 }, { 140, 42, 201, 36, 5 }, { 191, 128, 78, 2, 8 }, { 162, 73, 53, 67, 1 }, }, { { 21, 9, 16, 213, 7 }, { 140, 26, 192, 92, 10 }, { 234, 176, 137, 10, 8 }, { 83, 160, 53, 131, 1 }, }, { { 19, 92, 215, 48, 7 }, { 116, 221, 194, 113, 8 }, { 224, 206, 179, 172, 8 }, { 24, 228, 59, 178, 14 }, }, { { 17, 71, 154, 187, 6 }, { 0, 254, 206, 116, 3 }, { 109, 213, 158, 40, 8 }, { 194, 231, 55, 240, 0 }, }, { { 28, 185, 169, 35, 8 }, { 211, 138, 23, 4, 13 }, { 28, 73, 89, 211, 8 }, { 178, 14, 133, 28, 11 }, }, { { 28, 221, 7, 118, 6 }, { 218, 95, 210, 40, 9 }, { 102, 238, 11, 179, 8 }, { 145, 68, 191, 165, 11 }, }, { { 31, 46, 124, 36, 11 }, { 175, 25, 15, 113, 12 }, { 210, 67, 231, 79, 8 }, { 56, 239, 9, 143, 5 }, }, { { 25, 102, 66, 71, 7 }, { 47, 92, 72, 108, 1 }, { 238, 36, 38, 105, 8 }, { 131, 97, 35, 175, 4 }, }, { { 25, 87, 212, 200, 4 }, { 98, 175, 72, 120, 2 }, { 33, 50, 190, 169, 8 }, { 65, 225, 47, 84, 6 }, }, { { 31, 168, 244, 240, 4 }, { 163, 137, 210, 89, 14 }, { 32, 242, 241, 95, 8 }, { 121, 164, 185, 28, 5 }, }, { { 27, 130, 70, 237, 8 }, { 42, 105, 27, 77, 2 }, { 27, 118, 36, 29, 8 }, { 75, 45, 137, 101, 4 }, }, { { 27, 174, 225, 15, 14 }, { 59, 184, 89, 101, 13 }, { 127, 8, 119, 93, 8 }, { 186, 105, 161, 221, 12 }, }, { { 34, 164, 182, 60, 10 }, { 9, 241, 179, 49, 4 }, { 83, 198, 210, 84, 4 }, { 40, 204, 216, 249, 0 }, }, { { 34, 191, 144, 18, 15 }, { 69, 146, 249, 49, 9 }, { 244, 128, 159, 212, 4 }, { 152, 201, 244, 154, 2 }, }, { { 35, 44, 21, 180, 0 }, { 25, 1, 162, 113, 10 }, { 2, 218, 131, 76, 4 }, { 88, 228, 88, 9, 8 }, }, { { 37, 90, 169, 102, 12 }, { 216, 132, 111, 72, 13 }, { 54, 105, 85, 170, 4 }, { 177, 47, 98, 17, 11 }, }, { { 39, 165, 175, 169, 7 }, { 149, 243, 118, 101, 6 }, { 233, 95, 90, 94, 4 }, { 106, 102, 236, 250, 9 }, }, { { 37, 244, 14, 66, 5 }, { 197, 69, 116, 104, 1 }, { 164, 39, 2, 250, 4 }, { 129, 98, 234, 42, 3 }, }, { { 40, 102, 85, 205, 14 }, { 59, 53, 105, 60, 2 }, { 123, 58, 166, 97, 4 }, { 67, 201, 106, 205, 12 }, }, { { 44, 66, 126, 14, 0 }, { 170, 101, 44, 16, 5 }, { 7, 7, 228, 35, 4 }, { 160, 131, 74, 101, 5 }, }, { { 42, 185, 124, 189, 0 }, { 107, 35, 182, 21, 14 }, { 11, 211, 233, 213, 4 }, { 122, 134, 220, 77, 6 }, }, { { 41, 70, 225, 210, 3 }, { 54, 148, 168, 104, 7 }, { 196, 184, 118, 41, 4 }, { 225, 97, 82, 150, 12 }, }, { { 45, 166, 40, 65, 0 }, { 131, 0, 60, 108, 4 }, { 8, 33, 70, 91, 4 }, { 35, 99, 192, 12, 1 }, }, { { 43, 251, 32, 154, 6 }, { 67, 54, 248, 65, 15 }, { 101, 144, 77, 253, 4 }, { 248, 33, 246, 204, 2 }, }, { { 54, 140, 214, 107, 12 }, { 160, 233, 115, 61, 9 }, { 61, 102, 179, 22, 12 }, { 155, 204, 233, 112, 5 }, }, { { 52, 135, 119, 124, 7 }, { 188, 123, 250, 56, 4 }, { 227, 238, 238, 18, 12 }, { 33, 197, 253, 227, 13 }, }, { { 52, 221, 235, 132, 0 }, { 248, 206, 52, 32, 14 }, { 2, 29, 123, 178, 12 }, { 112, 66, 199, 49, 15 }, }, { { 55, 145, 247, 111, 1 }, { 252, 235, 50, 93, 5 }, { 143, 110, 248, 158, 12 }, { 171, 164, 205, 115, 15 }, }, { { 58, 34, 142, 23, 5 }, { 15, 201, 236, 5, 1 }, { 174, 135, 20, 69, 12 }, { 138, 3, 121, 63, 0 }, }, { { 62, 19, 189, 64, 8 }, { 210, 139, 45, 25, 4 }, { 16, 43, 220, 135, 12 }, { 41, 139, 77, 20, 11 }, }, { { 60, 152, 67, 202, 2 }, { 242, 120, 48, 8, 11 }, { 69, 60, 33, 147, 12 }, { 209, 0, 193, 228, 15 }, }, { { 57, 88, 157, 23, 9 }, { 94, 141, 165, 84, 9 }, { 158, 139, 145, 169, 12 }, { 146, 170, 91, 23, 10 }, }, { { 57, 116, 218, 238, 11 }, { 111, 252, 39, 120, 3 }, { 215, 117, 178, 233, 12 }, { 193, 238, 67, 255, 6 }, }, { { 63, 109, 188, 115, 1 }, { 135, 143, 166, 125, 13 }, { 140, 227, 219, 111, 12 }, { 187, 230, 95, 30, 1 }, }, { { 61, 107, 192, 80, 12 }, { 163, 142, 233, 72, 8 }, { 48, 160, 61, 107, 12 }, { 17, 41, 119, 28, 5 }, }, { { 57, 171, 39, 73, 7 }, { 23, 123, 120, 76, 12 }, { 233, 46, 77, 89, 12 }, { 51, 33, 237, 238, 8 }, }, { { 70, 2, 78, 37, 14 }, { 168, 81, 79, 133, 0 }, { 122, 71, 36, 6, 2 }, { 10, 31, 40, 161, 5 }, }, { { 70, 130, 186, 11, 12 }, { 128, 224, 93, 149, 5 }, { 61, 5, 212, 22, 2 }, { 170, 155, 160, 112, 1 }, }, { { 66, 233, 205, 90, 14 }, { 49, 183, 213, 137, 9 }, { 117, 171, 57, 116, 2 }, { 153, 26, 190, 216, 12 }, }, { { 68, 201, 183, 179, 15 }, { 148, 215, 211, 148, 15 }, { 252, 222, 217, 50, 2 }, { 242, 156, 190, 178, 9 }, }, { { 64, 199, 212, 30, 9 }, { 44, 167, 153, 176, 1 }, { 151, 130, 190, 48, 2 }, { 128, 217, 158, 83, 4 }, }, { { 70, 210, 180, 204, 14 }, { 200, 181, 89, 153, 6 }, { 115, 50, 212, 182, 2 }, { 105, 153, 170, 209, 3 }, }, { { 67, 25, 83, 86, 11 }, { 124, 82, 129, 217, 9 }, { 214, 172, 169, 140, 2 }, { 153, 184, 20, 163, 14 }, }, { { 65, 34, 230, 221, 9 }, { 45, 225, 137, 204, 6 }, { 155, 182, 116, 72, 2 }, { 99, 57, 24, 123, 4 }, }, { { 71, 83, 165, 154, 11 }, { 212, 183, 137, 193, 7 }, { 213, 154, 92, 174, 2 }, { 232, 57, 30, 210, 11 }, }, { { 78, 30, 241, 224, 8 }, { 242, 128, 11, 185, 14 }, { 16, 120, 247, 135, 2 }, { 121, 221, 0, 20, 15 }, }, { { 78, 74, 192, 150, 0 }, { 170, 132, 136, 129, 11 }, { 6, 144, 53, 39, 2 }, { 216, 17, 18, 21, 5 }, }, { { 78, 95, 170, 6, 15 }, { 206, 214, 77, 161, 13 }, { 246, 5, 95, 167, 2 }, { 184, 91, 38, 183, 3 }, }, { { 74, 141, 50, 148, 3 }, { 14, 82, 144, 177, 14 }, { 194, 148, 203, 21, 2 }, { 120, 208, 148, 167, 0 }, }, { { 73, 21, 148, 179, 9 }, { 70, 131, 131, 244, 3 }, { 156, 210, 154, 137, 2 }, { 194, 252, 28, 22, 2 }, }, { { 77, 77, 219, 98, 1 }, { 182, 198, 6, 248, 9 }, { 132, 109, 187, 43, 2 }, { 145, 246, 6, 54, 13 }, }, { { 75, 167, 97, 232, 1 }, { 55, 34, 26, 233, 6 }, { 129, 120, 110, 93, 2 }, { 105, 117, 132, 78, 12 }, }, { { 73, 212, 131, 216, 14 }, { 82, 244, 209, 232, 2 }, { 113, 188, 18, 185, 2 }, { 65, 120, 178, 244, 10 }, }, { { 86, 41, 14, 246, 12 }, { 137, 75, 199, 137, 11 }, { 54, 247, 9, 70, 10 }, { 217, 30, 61, 41, 1 }, }, { { 83, 126, 213, 255, 12 }, { 121, 173, 203, 253, 11 }, { 63, 250, 183, 236, 10 }, { 219, 253, 59, 89, 14 }, }, { { 85, 245, 167, 175, 10 }, { 217, 255, 19, 228, 7 }, { 95, 94, 90, 250, 10 }, { 226, 124, 143, 249, 11 }, }, { { 85, 213, 234, 100, 15 }, { 236, 222, 87, 232, 4 }, { 242, 101, 122, 186, 10 }, { 33, 126, 167, 179, 7 }, }, { { 88, 27, 171, 29, 10 }, { 90, 250, 141, 132, 12 }, { 91, 141, 93, 129, 10 }, { 50, 27, 21, 245, 10 }, }, { { 94, 190, 146, 109, 13 }, { 207, 232, 91, 189, 8 }, { 187, 100, 151, 215, 10 }, { 27, 221, 161, 127, 3 }, }, { { 95, 16, 249, 155, 5 }, { 246, 168, 196, 213, 7 }, { 173, 153, 240, 143, 10 }, { 234, 178, 49, 86, 15 }, }, { { 93, 30, 223, 165, 12 }, { 250, 201, 79, 244, 10 }, { 58, 95, 183, 139, 10 }, { 82, 255, 41, 53, 15 }, }, { { 95, 113, 141, 240, 2 }, { 211, 159, 134, 201, 2 }, { 64, 251, 24, 239, 10 }, { 73, 54, 31, 156, 11 }, }, { { 93, 225, 30, 70, 8 }, { 139, 79, 21, 216, 1 }, { 22, 39, 136, 123, 10 }, { 129, 186, 143, 45, 1 }, }, { { 96, 51, 187, 36, 7 }, { 93, 210, 110, 144, 4 }, { 226, 77, 220, 192, 6 }, { 32, 151, 100, 187, 10 }, }, { { 100, 88, 26, 254, 1 }, { 204, 100, 166, 152, 11 }, { 135, 245, 129, 162, 6 }, { 209, 150, 82, 99, 3 }, }, { { 99, 200, 221, 167, 6 }, { 56, 149, 118, 213, 11 }, { 110, 91, 177, 60, 6 }, { 218, 182, 234, 145, 12 }, }, { { 97, 218, 61, 143, 13 }, { 92, 37, 125, 212, 15 }, { 191, 27, 197, 184, 6 }, { 242, 187, 234, 67, 10 }, }, { { 110, 58, 34, 175, 10 }, { 203, 112, 43, 133, 15 }, { 95, 84, 69, 199, 6 }, { 250, 29, 64, 237, 3 }, }, { { 110, 97, 5, 183, 1 }, { 159, 7, 162, 133, 3 }, { 142, 218, 8, 103, 6 }, { 202, 20, 94, 15, 9 }, }, { { 106, 137, 169, 232, 12 }, { 18, 162, 119, 137, 14 }, { 49, 121, 89, 21, 6 }, { 121, 30, 228, 84, 8 }, }, { { 106, 151, 34, 79, 5 }, { 78, 98, 120, 173, 5 }, { 175, 36, 78, 149, 6 }, { 171, 81, 228, 103, 2 }, }, { { 107, 18, 195, 128, 1 }, { 118, 192, 40, 193, 2 }, { 128, 28, 52, 141, 6 }, { 72, 49, 64, 54, 14 }, }, { { 107, 104, 75, 34, 10 }, { 51, 84, 39, 193, 9 }, { 84, 77, 33, 109, 6 }, { 152, 62, 66, 172, 12 }, }, { { 111, 148, 193, 87, 9 }, { 254, 128, 177, 237, 1 }, { 158, 168, 50, 159, 6 }, { 139, 120, 208, 23, 15 }, }, { { 109, 166, 254, 160, 13 }, { 167, 193, 127, 240, 6 }, { 176, 87, 246, 91, 6 }, { 96, 255, 232, 62, 5 }, }, { { 111, 234, 202, 69, 7 }, { 175, 212, 124, 205, 8 }, { 234, 37, 53, 127, 6 }, { 27, 51, 226, 191, 5 }, }, { { 112, 61, 56, 166, 0 }, { 73, 10, 38, 176, 15 }, { 6, 81, 203, 192, 14 }, { 240, 214, 69, 9, 2 }, }, { { 118, 108, 53, 231, 8 }, { 153, 13, 35, 189, 15 }, { 30, 122, 195, 102, 14 }, { 251, 220, 75, 9, 9 }, }, { { 112, 74, 13, 255, 6 }, { 24, 61, 238, 140, 11 }, { 111, 251, 5, 32, 14 }, { 211, 23, 123, 193, 8 }, }, { { 117, 120, 169, 200, 0 }, { 209, 172, 36, 200, 14 }, { 1, 57, 81, 234, 14 }, { 113, 50, 67, 88, 11 }, }, { { 113, 74, 112, 19, 8 }, { 32, 12, 169, 212, 13 }, { 28, 128, 229, 40, 14 }, { 178, 185, 83, 0, 4 }, }, { { 117, 127, 140, 187, 9 }, { 197, 175, 175, 228, 11 }, { 157, 211, 31, 234, 14 }, { 210, 127, 95, 90, 3 }, }, { { 124, 35, 104, 51, 1 }, { 167, 10, 174, 132, 5 }, { 140, 193, 108, 67, 14 }, { 162, 23, 85, 14, 5 }, }, { { 124, 181, 167, 211, 1 }, { 215, 203, 176, 172, 7 }, { 140, 190, 90, 211, 14 }, { 227, 80, 221, 62, 11 }, }, { { 124, 248, 44, 237, 14 }, { 203, 61, 119, 140, 14 }, { 123, 115, 65, 243, 14 }, { 115, 30, 235, 205, 3 }, }, { { 127, 36, 226, 52, 15 }, { 175, 216, 227, 225, 4 }, { 242, 196, 114, 79, 14 }, { 40, 124, 113, 191, 5 }, }, { { 127, 71, 41, 141, 8 }, { 154, 46, 45, 229, 6 }, { 27, 25, 78, 47, 14 }, { 106, 123, 71, 69, 9 }, }, { { 134, 216, 3, 209, 9 }, { 212, 68, 145, 15, 10 }, { 152, 188, 1, 182, 1 }, { 95, 8, 146, 34, 11 }, }, { { 131, 139, 27, 161, 3 }, { 20, 82, 30, 87, 10 }, { 200, 93, 141, 28, 1 }, { 94, 167, 132, 162, 8 }, }, { { 135, 162, 121, 197, 9 }, { 189, 0, 29, 95, 6 }, { 154, 57, 228, 94, 1 }, { 111, 171, 128, 11, 13 }, }, { { 138, 67, 100, 140, 14 }, { 42, 55, 73, 3, 6 }, { 115, 18, 108, 37, 1 }, { 108, 9, 46, 197, 4 }, }, { { 136, 147, 59, 76, 8 }, { 90, 98, 29, 26, 4 }, { 19, 45, 204, 145, 1 }, { 37, 139, 132, 101, 10 }, }, { { 143, 33, 223, 78, 3 }, { 191, 243, 4, 91, 1 }, { 199, 47, 184, 79, 1 }, { 141, 162, 12, 255, 13 }, }, { { 141, 132, 53, 114, 9 }, { 150, 1, 147, 122, 5 }, { 148, 234, 194, 27, 1 }, { 165, 236, 152, 6, 9 }, }, { { 141, 136, 215, 31, 13 }, { 190, 225, 209, 86, 9 }, { 191, 142, 177, 27, 1 }, { 150, 168, 184, 119, 13 }, }, { { 137, 159, 120, 252, 13 }, { 110, 34, 223, 122, 14 }, { 179, 241, 239, 153, 1 }, { 117, 239, 180, 71, 6 }, }, { { 146, 107, 22, 121, 12 }, { 1, 111, 203, 31, 8 }, { 57, 230, 141, 100, 9 }, { 31, 141, 63, 104, 0 }, }, { { 148, 142, 34, 241, 2 }, { 128, 88, 154, 46, 14 }, { 72, 244, 71, 18, 9 }, { 119, 69, 145, 160, 1 }, }, { { 144, 229, 230, 49, 7 }, { 37, 223, 210, 38, 4 }, { 232, 198, 122, 112, 9 }, { 38, 68, 191, 186, 4 }, }, { { 150, 216, 133, 42, 1 }, { 212, 173, 18, 3, 9 }, { 133, 74, 17, 182, 9 }, { 156, 4, 139, 82, 11 }, }, { { 149, 57, 59, 164, 6 }, { 217, 90, 70, 82, 14 }, { 98, 93, 201, 202, 9 }, { 116, 166, 37, 169, 11 }, }, { { 149, 60, 251, 77, 13 }, { 253, 232, 69, 126, 12 }, { 187, 45, 243, 202, 9 }, { 55, 234, 33, 123, 15 }, }, { { 145, 62, 170, 18, 6 }, { 65, 216, 204, 98, 13 }, { 100, 133, 87, 200, 9 }, { 180, 99, 49, 184, 2 }, }, { { 151, 111, 90, 175, 9 }, { 173, 110, 15, 119, 11 }, { 159, 85, 175, 110, 9 }, { 222, 239, 7, 107, 5 }, }, { { 145, 178, 41, 253, 10 }, { 89, 56, 159, 78, 6 }, { 91, 249, 68, 216, 9 }, { 103, 47, 145, 201, 10 }, }, { { 145, 211, 250, 118, 1 }, { 108, 206, 158, 90, 5 }, { 134, 229, 252, 184, 9 }, { 165, 167, 151, 51, 6 }, }, { { 154, 112, 134, 200, 8 }, { 67, 237, 1, 11, 2 }, { 17, 54, 16, 229, 9 }, { 77, 8, 11, 124, 2 }, }, { { 152, 142, 205, 3, 1 }, { 54, 137, 28, 38, 9 }, { 140, 11, 55, 17, 9 }, { 150, 67, 137, 22, 12 }, }, { { 152, 199, 16, 151, 10 }, { 10, 30, 153, 54, 3 }, { 94, 144, 142, 49, 9 }, { 198, 201, 151, 133, 0 }, }, { { 157, 203, 235, 70, 6 }, { 186, 222, 92, 74, 13 }, { 102, 45, 125, 59, 9 }, { 181, 35, 167, 181, 13 }, }, { { 164, 40, 245, 182, 14 }, { 185, 145, 227, 18, 15 }, { 118, 218, 241, 66, 5 }, { 244, 140, 120, 153, 13 }, }, { { 163, 55, 241, 121, 3 }, { 117, 178, 170, 127, 4 }, { 201, 232, 254, 204, 5 }, { 47, 229, 84, 218, 14 }, }, { { 163, 68, 64, 245, 10 }, { 40, 20, 163, 111, 2 }, { 90, 240, 34, 44, 5 }, { 79, 108, 82, 129, 4 }, }, { { 161, 127, 173, 133, 8 }, { 89, 135, 45, 102, 14 }, { 26, 27, 95, 232, 5 }, { 118, 107, 78, 25, 10 }, }, { { 167, 210, 150, 35, 13 }, { 196, 197, 123, 87, 1 }, { 188, 70, 148, 190, 5 }, { 142, 173, 234, 50, 3 }, }, { { 168, 69, 112, 43, 11 }, { 38, 54, 35, 54, 5 }, { 221, 64, 234, 33, 5 }, { 166, 204, 70, 198, 4 }, }, { { 174, 72, 127, 160, 9 }, { 182, 69, 39, 19, 14 }, { 144, 95, 225, 39, 5 }, { 124, 142, 74, 38, 13 }, }, { { 172, 79, 182, 214, 8 }, { 138, 199, 169, 58, 15 }, { 22, 182, 223, 35, 5 }, { 245, 201, 94, 53, 1 }, }, { { 168, 168, 211, 133, 3 }, { 63, 208, 48, 22, 10 }, { 202, 28, 177, 81, 5 }, { 86, 128, 192, 191, 12 }, }, { { 169, 139, 10, 203, 8 }, { 2, 98, 61, 78, 11 }, { 29, 53, 13, 25, 5 }, { 215, 43, 196, 100, 0 }, }, { { 173, 254, 140, 222, 2 }, { 203, 181, 188, 106, 11 }, { 71, 179, 23, 251, 5 }, { 213, 99, 218, 221, 3 }, }, { { 180, 239, 46, 46, 14 }, { 137, 127, 127, 34, 13 }, { 119, 71, 79, 114, 13 }, { 180, 79, 239, 233, 1 }, }, { { 183, 153, 137, 199, 0 }, { 216, 138, 52, 79, 11 }, { 14, 57, 25, 158, 13 }, { 223, 34, 197, 17, 11 }, }, { { 190, 12, 162, 14, 12 }, { 138, 232, 97, 35, 13 }, { 55, 4, 83, 7, 13 }, { 188, 72, 97, 117, 1 }, }, { { 188, 112, 34, 122, 9 }, { 199, 108, 163, 10, 5 }, { 149, 228, 64, 227, 13 }, { 165, 12, 83, 110, 3 }, }, { { 190, 188, 47, 145, 10 }, { 211, 89, 181, 39, 14 }, { 88, 159, 67, 215, 13 }, { 126, 74, 217, 172, 11 }, }, { { 184, 233, 10, 152, 3 }, { 7, 126, 180, 2, 10 }, { 193, 149, 9, 113, 13 }, { 84, 2, 215, 238, 0 }, }, { { 189, 10, 48, 236, 8 }, { 138, 40, 43, 90, 14 }, { 19, 112, 197, 11, 13 }, { 117, 173, 65, 69, 1 }, }, { { 194, 2, 224, 243, 1 }, { 36, 128, 138, 143, 7 }, { 140, 240, 116, 4, 3 }, { 239, 21, 16, 18, 4 }, }, { { 194, 107, 50, 227, 7 }, { 5, 86, 74, 159, 15 }, { 236, 116, 205, 100, 3 }, { 255, 149, 38, 170, 0 }, }, { { 198, 202, 66, 106, 8 }, { 160, 100, 27, 139, 9 }, { 21, 100, 37, 54, 3 }, { 157, 29, 130, 96, 5 }, }, { { 199, 30, 238, 104, 14 }, { 224, 241, 79, 235, 12 }, { 113, 103, 119, 142, 3 }, { 61, 127, 40, 240, 7 }, }, { { 199, 125, 46, 145, 3 }, { 197, 87, 132, 231, 14 }, { 200, 151, 75, 238, 3 }, { 126, 114, 30, 170, 3 }, }, { { 206, 60, 32, 116, 2 }, { 203, 16, 130, 171, 12 }, { 66, 224, 67, 199, 3 }, { 61, 84, 16, 141, 3 }, }, { { 204, 74, 185, 197, 7 }, { 158, 148, 76, 158, 14 }, { 234, 57, 213, 35, 3 }, { 119, 147, 34, 151, 9 }, }, { { 206, 247, 99, 220, 13 }, { 255, 102, 217, 171, 6 }, { 179, 188, 110, 247, 3 }, { 109, 89, 182, 111, 15 }, }, { { 205, 67, 34, 202, 2 }, { 130, 118, 8, 202, 7 }, { 69, 52, 76, 43, 3 }, { 229, 49, 6, 228, 1 }, }, { { 207, 183, 204, 29, 0 }, { 235, 163, 156, 231, 0 }, { 11, 131, 62, 223, 3 }, { 14, 115, 156, 93, 7 }, }, { { 201, 206, 200, 53, 10 }, { 42, 148, 159, 230, 8 }, { 90, 193, 55, 57, 3 }, { 22, 127, 146, 149, 4 }, }, { { 207, 243, 75, 113, 3 }, { 247, 86, 158, 207, 0 }, { 200, 237, 44, 255, 3 }, { 15, 55, 150, 174, 15 }, }, { { 214, 46, 123, 112, 13 }, { 181, 72, 207, 187, 12 }, { 176, 237, 231, 70, 11 }, { 61, 223, 49, 42, 13 }, }, { { 212, 23, 75, 59, 4 }, { 240, 106, 206, 166, 1 }, { 45, 205, 46, 130, 11 }, { 134, 87, 53, 96, 15 }, }, { { 215, 141, 250, 151, 14 }, { 168, 218, 213, 247, 15 }, { 126, 149, 251, 30, 11 }, { 254, 250, 181, 177, 5 }, }, { { 209, 216, 245, 85, 1 }, { 124, 141, 144, 222, 12 }, { 138, 170, 241, 184, 11 }, { 55, 176, 155, 19, 14 }, }, { { 213, 207, 225, 211, 9 }, { 180, 142, 153, 238, 15 }, { 156, 184, 127, 58, 11 }, { 247, 121, 151, 18, 13 }, }, { { 218, 22, 168, 204, 9 }, { 78, 168, 13, 171, 6 }, { 147, 49, 86, 133, 11 }, { 109, 91, 1, 87, 2 }, }, { { 216, 76, 68, 133, 9 }, { 46, 13, 1, 166, 10 }, { 154, 18, 35, 33, 11 }, { 86, 88, 11, 7, 4 }, }, { { 220, 217, 114, 142, 13 }, { 238, 110, 81, 146, 15 }, { 183, 20, 233, 179, 11 }, { 244, 152, 167, 103, 7 }, }, { { 223, 103, 17, 126, 8 }, { 155, 46, 139, 251, 1 }, { 23, 232, 142, 111, 11 }, { 141, 253, 23, 77, 9 }, }, { { 219, 153, 125, 230, 7 }, { 126, 27, 86, 219, 15 }, { 230, 123, 233, 157, 11 }, { 253, 182, 173, 135, 14 }, }, { { 221, 171, 142, 49, 14 }, { 131, 219, 223, 198, 8 }, { 120, 199, 29, 91, 11 }, { 22, 63, 189, 188, 1 }, }, { { 224, 25, 8, 76, 13 }, { 76, 34, 101, 138, 8 }, { 179, 33, 9, 128, 7 }, { 21, 26, 100, 67, 2 }, }, { { 230, 54, 218, 82, 1 }, { 229, 192, 172, 187, 1 }, { 132, 165, 182, 198, 7 }, { 141, 211, 80, 58, 7 }, }, { { 226, 172, 199, 155, 0 }, { 49, 225, 176, 167, 11 }, { 13, 158, 51, 84, 7 }, { 222, 80, 216, 120, 12 }, }, { { 228, 141, 33, 98, 0 }, { 144, 2, 50, 170, 13 }, { 4, 104, 75, 18, 7 }, { 181, 84, 196, 0, 9 }, }, { { 226, 254, 208, 197, 1 }, { 109, 132, 56, 191, 10 }, { 138, 48, 183, 244, 7 }, { 95, 209, 194, 27, 6 }, }, { { 225, 58, 125, 2, 10 }, { 113, 17, 45, 210, 13 }, { 84, 11, 229, 200, 7 }, { 180, 187, 72, 136, 14 }, }, { { 231, 208, 91, 142, 5 }, { 252, 100, 116, 211, 3 }, { 167, 29, 160, 190, 7 }, { 204, 178, 226, 99, 15 }, }, { { 236, 48, 156, 107, 5 }, { 199, 161, 102, 158, 1 }, { 173, 99, 144, 195, 7 }, { 135, 150, 104, 94, 3 }, }, { { 236, 170, 73, 210, 0 }, { 179, 0, 188, 138, 11 }, { 4, 185, 37, 83, 7 }, { 213, 19, 208, 12, 13 }, }, { { 238, 179, 122, 196, 6 }, { 235, 82, 124, 155, 6 }, { 98, 53, 236, 215, 7 }, { 109, 147, 228, 173, 7 }, }, { { 232, 224, 103, 46, 2 }, { 59, 117, 50, 130, 5 }, { 71, 78, 96, 113, 7 }, { 164, 20, 202, 237, 12 }, }, { { 234, 229, 213, 36, 12 }, { 59, 135, 115, 179, 0 }, { 50, 74, 186, 117, 7 }, { 12, 220, 238, 29, 12 }, }, { { 237, 107, 28, 44, 2 }, { 139, 55, 46, 210, 8 }, { 67, 67, 141, 107, 7 }, { 20, 183, 78, 205, 1 }, }, { { 235, 200, 175, 29, 6 }, { 26, 245, 244, 199, 12 }, { 107, 143, 81, 61, 7 }, { 62, 50, 250, 245, 8 }, }, { { 242, 5, 98, 212, 5 }, { 44, 74, 224, 171, 6 }, { 162, 180, 106, 4, 15 }, { 109, 80, 117, 35, 4 }, }, { { 246, 25, 188, 251, 2 }, { 192, 187, 166, 159, 15 }, { 77, 243, 217, 134, 15 }, { 255, 150, 93, 208, 3 }, }, { { 246, 163, 92, 109, 11 }, { 173, 59, 63, 159, 0 }, { 219, 99, 172, 86, 15 }, { 15, 159, 205, 203, 5 }, }, { { 244, 241, 189, 15, 0 }, { 217, 175, 52, 150, 5 }, { 15, 11, 216, 242, 15 }, { 166, 146, 207, 89, 11 }, }, { { 241, 106, 155, 67, 5 }, { 21, 204, 108, 222, 9 }, { 172, 45, 149, 104, 15 }, { 151, 179, 99, 58, 8 }, }, { { 241, 178, 145, 41, 14 }, { 81, 184, 123, 214, 0 }, { 121, 72, 148, 216, 15 }, { 6, 189, 225, 216, 10 }, }, { { 250, 84, 91, 243, 5 }, { 118, 76, 230, 191, 3 }, { 172, 253, 162, 165, 15 }, { 207, 214, 115, 38, 14 }, }, { { 254, 110, 134, 124, 6 }, { 139, 253, 234, 171, 8 }, { 99, 230, 23, 103, 15 }, { 29, 85, 123, 253, 1 }, }, { { 249, 13, 185, 67, 2 }, { 18, 154, 36, 254, 13 }, { 76, 41, 219, 9, 15 }, { 183, 242, 69, 148, 8 }, }, { { 249, 105, 102, 43, 13 }, { 39, 111, 99, 198, 13 }, { 189, 70, 105, 105, 15 }, { 182, 60, 111, 110, 4 }, }, { { 251, 65, 203, 72, 4 }, { 50, 238, 100, 203, 0 }, { 33, 45, 56, 45, 15 }, { 13, 50, 103, 116, 12 }, }, { { 253, 87, 191, 152, 5 }, { 214, 239, 236, 242, 6 }, { 161, 159, 222, 171, 15 }, { 100, 243, 127, 118, 11 }, }, { { 251, 152, 144, 126, 6 }, { 74, 184, 242, 219, 9 }, { 103, 224, 145, 157, 15 }, { 157, 180, 241, 213, 2 }, }, { { 255, 234, 33, 198, 3 }, { 159, 28, 56, 203, 15 }, { 198, 56, 69, 127, 15 }, { 253, 49, 195, 143, 9 }, }, { { 163, 165, 111, 69, 0 }, { 57, 67, 52, 111, 4 }, { 10, 47, 106, 92, 5 }, { 47, 98, 204, 41, 12 }, }, { { 161, 152, 104, 48, 2 }, { 96, 16, 182, 66, 12 }, { 64, 193, 97, 152, 5 }, { 52, 38, 208, 128, 6 }, }, { { 15, 55, 131, 43, 0 }, { 211, 226, 10, 101, 1 }, { 13, 76, 30, 207, 0 }, { 138, 101, 4, 124, 11 }, }, { { 38, 236, 72, 39, 2 }, { 169, 20, 54, 37, 9 }, { 78, 65, 35, 118, 4 }, { 154, 70, 194, 137, 5 }, }, { { 65, 152, 184, 168, 15 }, { 68, 176, 87, 208, 14 }, { 241, 81, 209, 152, 2 }, { 112, 190, 160, 210, 2 }, }, { { 78, 181, 67, 138, 4 }, { 243, 98, 80, 161, 3 }, { 37, 28, 42, 215, 2 }, { 200, 80, 164, 108, 15 }, }, { { 99, 197, 227, 123, 10 }, { 48, 246, 179, 237, 5 }, { 93, 236, 122, 60, 6 }, { 171, 124, 214, 240, 12 }, }, { { 110, 89, 221, 230, 12 }, { 250, 135, 103, 153, 11 }, { 54, 123, 185, 167, 6 }, { 217, 158, 110, 21, 15 }, }, { { 128, 212, 89, 240, 8 }, { 112, 4, 151, 58, 2 }, { 16, 249, 162, 176, 1 }, { 69, 206, 146, 0, 14 }, }, { { 152, 8, 136, 159, 13 }, { 14, 168, 197, 6, 11 }, { 191, 145, 17, 1, 9 }, { 214, 10, 49, 87, 0 }, }, { { 163, 6, 103, 166, 15 }, { 60, 81, 107, 99, 7 }, { 246, 94, 102, 12, 5 }, { 236, 109, 104, 163, 12 }, }, { { 2, 25, 166, 20, 7 }, { 76, 211, 192, 1, 12 }, { 226, 134, 89, 132, 0 }, { 56, 0, 60, 179, 2 }, }, { { 2, 21, 202, 78, 2 }, { 104, 242, 4, 41, 1 }, { 71, 37, 58, 132, 0 }, { 137, 66, 4, 241, 6 }, }, { { 0, 104, 204, 57, 9 }, { 37, 165, 135, 4, 8 }, { 153, 195, 49, 96, 0 }, { 18, 14, 26, 90, 4 }, }, { { 0, 161, 19, 254, 8 }, { 25, 98, 147, 24, 3 }, { 23, 252, 136, 80, 0 }, { 193, 140, 148, 105, 8 }, }, { { 2, 185, 86, 117, 5 }, { 109, 67, 210, 29, 8 }, { 170, 230, 169, 212, 0 }, { 27, 132, 188, 43, 6 }, }, { { 2, 198, 187, 83, 2 }, { 16, 212, 156, 61, 5 }, { 76, 173, 214, 52, 0 }, { 171, 195, 146, 176, 8 }, }, { { 2, 243, 31, 29, 9 }, { 93, 103, 157, 21, 0 }, { 155, 143, 140, 244, 0 }, { 10, 139, 158, 107, 10 }, }, { { 7, 42, 193, 126, 3 }, { 189, 176, 138, 73, 9 }, { 199, 232, 53, 78, 0 }, { 153, 37, 16, 219, 13 }, }, { { 7, 55, 141, 151, 2 }, { 217, 147, 140, 101, 3 }, { 78, 155, 30, 206, 0 }, { 202, 99, 28, 153, 11 }, }, { { 1, 111, 31, 231, 5 }, { 29, 71, 78, 124, 11 }, { 174, 127, 143, 104, 0 }, { 211, 231, 46, 43, 8 }, }, { { 1, 119, 48, 21, 5 }, { 77, 6, 200, 116, 4 }, { 170, 128, 206, 232, 0 }, { 34, 225, 54, 11, 2 }, }, { { 7, 149, 114, 65, 10 }, { 224, 82, 17, 125, 4 }, { 88, 36, 234, 158, 0 }, { 43, 232, 132, 160, 7 }, }, { { 7, 200, 163, 134, 14 }, { 152, 212, 81, 65, 15 }, { 118, 28, 81, 62, 0 }, { 248, 40, 162, 177, 9 }, }, { { 5, 254, 251, 247, 9 }, { 253, 196, 159, 124, 15 }, { 158, 253, 247, 250, 0 }, { 243, 239, 146, 59, 15 }, }, { { 12, 21, 243, 16, 1 }, { 246, 194, 128, 48, 4 }, { 128, 140, 250, 131, 0 }, { 32, 192, 20, 54, 15 }, }, { { 10, 68, 98, 226, 14 }, { 34, 84, 67, 41, 7 }, { 116, 116, 98, 37, 0 }, { 233, 76, 34, 164, 4 }, }, { { 8, 94, 55, 238, 9 }, { 94, 101, 11, 56, 15 }, { 151, 126, 199, 161, 0 }, { 241, 205, 10, 103, 10 }, }, { { 8, 82, 222, 18, 13 }, { 102, 197, 205, 16, 1 }, { 180, 135, 180, 161, 0 }, { 128, 139, 58, 54, 6 }, }, { { 12, 102, 136, 3, 9 }, { 135, 132, 13, 36, 1 }, { 156, 1, 22, 99, 0 }, { 130, 75, 2, 30, 1 }, }, { { 8, 140, 186, 71, 15 }, { 14, 208, 85, 60, 13 }, { 254, 37, 211, 17, 0 }, { 179, 202, 160, 183, 0 }, }, { { 12, 172, 39, 30, 5 }, { 159, 97, 208, 32, 13 }, { 167, 142, 67, 83, 0 }, { 176, 64, 184, 111, 9 }, }, { { 8, 179, 56, 11, 15 }, { 71, 50, 93, 20, 5 }, { 253, 1, 204, 209, 0 }, { 162, 139, 164, 206, 2 }, }, { { 12, 162, 165, 217, 4 }, { 147, 161, 216, 12, 6 }, { 41, 186, 84, 83, 0 }, { 99, 1, 184, 92, 9 }, }, { { 8, 227, 82, 192, 1 }, { 39, 70, 24, 24, 2 }, { 128, 52, 172, 113, 0 }, { 65, 129, 134, 46, 4 }, }, { { 14, 255, 68, 245, 14 }, { 235, 23, 219, 45, 10 }, { 122, 242, 47, 247, 0 }, { 91, 77, 190, 141, 7 }, }, { { 14, 255, 93, 234, 11 }, { 247, 55, 31, 57, 11 }, { 213, 123, 175, 247, 0 }, { 217, 207, 142, 206, 15 }, }, { { 11, 52, 109, 201, 14 }, { 115, 49, 69, 109, 6 }, { 121, 59, 98, 205, 0 }, { 107, 106, 40, 204, 14 }, }, { { 13, 9, 254, 187, 3 }, { 166, 243, 134, 84, 15 }, { 205, 215, 249, 11, 0 }, { 242, 166, 28, 246, 5 }, }, { { 15, 16, 170, 146, 6 }, { 194, 208, 196, 65, 7 }, { 100, 149, 80, 143, 0 }, { 232, 34, 48, 180, 3 }, }, { { 13, 31, 101, 167, 14 }, { 250, 19, 75, 100, 15 }, { 126, 90, 111, 139, 0 }, { 242, 109, 44, 133, 15 }, }, { { 15, 177, 95, 160, 0 }, { 243, 67, 22, 81, 2 }, { 0, 95, 168, 223, 0 }, { 72, 166, 140, 44, 15 }, }, { { 13, 162, 5, 35, 3 }, { 151, 17, 26, 68, 1 }, { 204, 74, 4, 91, 0 }, { 130, 37, 136, 142, 9 }, }, { { 13, 175, 35, 219, 11 }, { 151, 114, 153, 108, 15 }, { 221, 188, 79, 91, 0 }, { 243, 105, 148, 238, 9 }, }, { { 11, 240, 165, 238, 4 }, { 91, 165, 82, 73, 7 }, { 39, 122, 80, 253, 0 }, { 233, 36, 170, 93, 10 }, }, { { 13, 200, 153, 251, 14 }, { 146, 180, 215, 92, 11 }, { 125, 249, 145, 59, 0 }, { 211, 174, 178, 212, 9 }, }, { { 15, 253, 48, 39, 7 }, { 207, 22, 82, 117, 13 }, { 238, 64, 203, 255, 0 }, { 186, 228, 166, 143, 3 }, }, { { 11, 199, 93, 86, 2 }, { 58, 23, 156, 121, 1 }, { 70, 171, 174, 61, 0 }, { 137, 227, 158, 133, 12 }, }, { { 18, 47, 163, 1, 13 }, { 21, 202, 73, 37, 12 }, { 184, 12, 95, 68, 8 }, { 58, 73, 37, 58, 8 }, }, { { 18, 117, 72, 114, 5 }, { 101, 14, 198, 41, 1 }, { 164, 225, 42, 228, 8 }, { 137, 70, 55, 10, 6 }, }, { { 16, 79, 174, 98, 7 }, { 4, 223, 78, 40, 13 }, { 228, 103, 95, 32, 8 }, { 177, 71, 47, 178, 0 }, }, { { 16, 140, 138, 232, 11 }, { 4, 248, 23, 40, 10 }, { 209, 117, 19, 16, 8 }, { 81, 78, 129, 242, 0 }, }, { { 16, 243, 244, 46, 14 }, { 105, 191, 91, 16, 5 }, { 119, 66, 252, 240, 8 }, { 160, 141, 175, 217, 6 }, }, { { 19, 55, 238, 112, 2 }, { 97, 219, 142, 105, 4 }, { 64, 231, 126, 204, 8 }, { 41, 103, 29, 184, 6 }, }, { { 23, 11, 35, 235, 0 }, { 144, 106, 10, 77, 15 }, { 13, 124, 77, 14, 8 }, { 251, 37, 5, 96, 9 }, }, { { 21, 2, 111, 27, 11 }, { 180, 121, 141, 68, 5 }, { 221, 143, 100, 10, 8 }, { 162, 43, 25, 226, 13 }, }, { { 17, 161, 171, 203, 2 }, { 17, 250, 20, 76, 7 }, { 77, 61, 88, 88, 8 }, { 227, 34, 133, 248, 8 }, }, { { 19, 166, 74, 200, 13 }, { 37, 104, 93, 105, 2 }, { 177, 53, 38, 92, 8 }, { 73, 107, 161, 106, 4 }, }, { { 23, 142, 53, 205, 3 }, { 156, 57, 24, 125, 14 }, { 203, 58, 199, 30, 8 }, { 123, 225, 137, 195, 9 }, }, { { 21, 139, 229, 157, 12 }, { 184, 171, 217, 68, 14 }, { 59, 154, 125, 26, 8 }, { 114, 41, 189, 81, 13 }, }, { { 23, 166, 249, 125, 4 }, { 185, 168, 222, 125, 4 }, { 43, 233, 246, 94, 8 }, { 43, 231, 177, 89, 13 }, }, { { 21, 220, 164, 180, 4 }, { 200, 141, 210, 96, 14 }, { 34, 210, 83, 186, 8 }, { 112, 100, 187, 17, 3 }, }, { { 17, 223, 5, 67, 12 }, { 80, 15, 89, 108, 9 }, { 60, 42, 15, 184, 8 }, { 147, 105, 175, 0, 10 }, }, { { 21, 210, 1, 147, 5 }, { 212, 12, 216, 68, 3 }, { 172, 152, 4, 186, 8 }, { 194, 33, 179, 2, 11 }, }, { { 24, 31, 173, 250, 10 }, { 82, 187, 143, 40, 15 }, { 85, 251, 95, 129, 8 }, { 241, 79, 29, 212, 10 }, }, { { 28, 64, 14, 171, 13 }, { 134, 109, 71, 4, 3 }, { 189, 87, 0, 35, 8 }, { 194, 14, 43, 102, 1 }, }, { { 30, 76, 93, 61, 2 }, { 186, 61, 134, 53, 8 }, { 75, 203, 163, 39, 8 }, { 26, 198, 27, 197, 13 }, }, { { 24, 111, 246, 127, 9 }, { 47, 239, 139, 60, 13 }, { 159, 230, 255, 97, 8 }, { 179, 205, 31, 127, 4 }, }, { { 24, 87, 52, 184, 15 }, { 70, 63, 203, 48, 6 }, { 241, 210, 206, 161, 8 }, { 96, 205, 63, 198, 2 }, }, { { 30, 86, 137, 227, 4 }, { 210, 140, 78, 45, 3 }, { 44, 121, 22, 167, 8 }, { 203, 71, 35, 20, 11 }, }, { { 26, 149, 209, 132, 5 }, { 126, 138, 80, 49, 2 }, { 162, 24, 186, 149, 8 }, { 72, 192, 165, 23, 14 }, }, { { 24, 167, 255, 2, 10 }, { 51, 219, 29, 48, 5 }, { 84, 15, 254, 81, 8 }, { 160, 203, 141, 188, 12 }, }, { { 24, 158, 177, 201, 14 }, { 82, 184, 89, 60, 14 }, { 121, 56, 215, 145, 8 }, { 115, 201, 161, 212, 10 }, }, { { 28, 178, 10, 96, 10 }, { 195, 88, 31, 8, 0 }, { 80, 101, 4, 211, 8 }, { 1, 15, 129, 172, 3 }, }, { { 28, 146, 53, 136, 1 }, { 214, 41, 24, 16, 6 }, { 129, 26, 196, 147, 8 }, { 96, 129, 137, 70, 11 }, }, { { 28, 147, 183, 214, 13 }, { 222, 203, 217, 24, 7 }, { 182, 190, 220, 147, 8 }, { 225, 137, 189, 55, 11 }, }, { { 26, 202, 188, 88, 1 }, { 6, 173, 156, 25, 12 }, { 129, 163, 213, 53, 8 }, { 57, 131, 155, 86, 0 }, }, { { 28, 226, 172, 181, 8 }, { 139, 141, 159, 4, 6 }, { 26, 211, 84, 115, 8 }, { 98, 15, 155, 29, 1 }, }, { { 27, 121, 237, 6, 4 }, { 123, 143, 68, 65, 13 }, { 38, 11, 121, 237, 8 }, { 184, 34, 47, 29, 14 }, }, { { 31, 106, 57, 19, 2 }, { 147, 28, 140, 85, 13 }, { 76, 137, 197, 111, 8 }, { 186, 163, 19, 140, 9 }, }, { { 29, 152, 56, 117, 0 }, { 202, 8, 150, 92, 12 }, { 10, 225, 193, 155, 8 }, { 51, 166, 145, 5, 3 }, }, { { 32, 13, 193, 3, 15 }, { 52, 146, 97, 36, 9 }, { 252, 8, 59, 0, 4 }, { 146, 72, 100, 146, 12 }, }, { { 38, 53, 212, 232, 0 }, { 225, 163, 34, 57, 2 }, { 1, 114, 186, 198, 4 }, { 73, 196, 76, 88, 7 }, }, { { 38, 117, 44, 47, 8 }, { 201, 39, 39, 37, 5 }, { 31, 67, 74, 230, 4 }, { 170, 78, 78, 73, 3 }, }, { { 32, 83, 133, 143, 6 }, { 88, 183, 104, 4, 3 }, { 111, 26, 28, 160, 4 }, { 194, 1, 110, 209, 10 }, }, { { 34, 136, 31, 122, 3 }, { 20, 113, 182, 25, 9 }, { 197, 239, 129, 20, 4 }, { 153, 134, 216, 226, 8 }, }, { { 39, 44, 250, 229, 5 }, { 173, 192, 102, 125, 14 }, { 170, 117, 243, 78, 4 }, { 123, 230, 96, 59, 5 }, }, { { 33, 107, 76, 67, 11 }, { 37, 23, 45, 76, 9 }, { 220, 35, 45, 104, 4 }, { 147, 43, 78, 138, 4 }, }, { { 37, 188, 103, 11, 10 }, { 241, 113, 49, 100, 13 }, { 93, 14, 99, 218, 4 }, { 178, 104, 200, 232, 15 }, }, { { 33, 163, 233, 176, 14 }, { 49, 146, 255, 64, 6 }, { 112, 217, 124, 88, 4 }, { 96, 47, 244, 152, 12 }, }, { { 33, 150, 242, 145, 15 }, { 100, 208, 249, 116, 6 }, { 248, 148, 246, 152, 4 }, { 98, 233, 240, 178, 6 }, }, { { 39, 162, 43, 140, 10 }, { 153, 112, 61, 65, 6 }, { 83, 29, 68, 94, 4 }, { 104, 43, 192, 233, 9 }, }, { { 39, 159, 72, 50, 8 }, { 224, 2, 191, 97, 9 }, { 20, 193, 47, 158, 4 }, { 152, 111, 212, 0, 7 }, }, { { 35, 226, 188, 201, 7 }, { 5, 181, 124, 93, 6 }, { 233, 51, 212, 124, 4 }, { 107, 163, 234, 218, 0 }, }, { { 33, 194, 87, 244, 1 }, { 60, 69, 186, 88, 2 }, { 130, 254, 164, 56, 4 }, { 65, 165, 218, 35, 12 }, }, { { 39, 207, 186, 248, 11 }, { 132, 246, 191, 121, 14 }, { 209, 245, 223, 62, 4 }, { 121, 239, 214, 242, 1 }, }, { { 42, 47, 189, 228, 11 }, { 31, 147, 47, 57, 14 }, { 210, 123, 223, 69, 4 }, { 121, 207, 76, 159, 8 }, }, { { 42, 84, 58, 140, 12 }, { 74, 100, 101, 49, 6 }, { 51, 21, 194, 165, 4 }, { 104, 202, 98, 101, 2 }, }, { { 42, 209, 187, 151, 15 }, { 94, 214, 245, 21, 7 }, { 254, 157, 216, 181, 4 }, { 234, 138, 246, 183, 10 }, }, { { 40, 255, 58, 99, 1 }, { 71, 70, 62, 60, 13 }, { 140, 101, 207, 241, 4 }, { 179, 199, 198, 46, 2 }, }, { { 43, 84, 197, 185, 8 }, { 114, 165, 163, 101, 2 }, { 25, 218, 50, 173, 4 }, { 74, 108, 90, 84, 14 }, }, { { 45, 97, 175, 26, 10 }, { 147, 247, 165, 64, 5 }, { 85, 143, 88, 107, 4 }, { 160, 42, 94, 252, 9 }, }, { { 43, 188, 219, 62, 6 }, { 123, 240, 246, 113, 9 }, { 103, 205, 179, 221, 4 }, { 152, 230, 240, 253, 14 }, }, { { 45, 159, 154, 13, 2 }, { 202, 242, 60, 116, 8 }, { 75, 5, 159, 155, 4 }, { 18, 227, 196, 245, 3 }, }, { { 47, 187, 114, 106, 3 }, { 231, 114, 58, 89, 13 }, { 197, 100, 237, 223, 4 }, { 185, 165, 196, 238, 7 }, }, { { 43, 217, 204, 255, 7 }, { 110, 183, 246, 77, 11 }, { 239, 243, 57, 189, 4 }, { 219, 38, 254, 215, 6 }, }, { { 41, 198, 223, 142, 12 }, { 58, 229, 125, 112, 3 }, { 55, 31, 182, 57, 4 }, { 192, 235, 234, 117, 12 }, }, { { 52, 12, 63, 195, 5 }, { 148, 73, 100, 60, 15 }, { 172, 63, 195, 2, 12 }, { 243, 194, 105, 34, 9 }, }, { { 48, 3, 27, 40, 14 }, { 16, 122, 111, 16, 0 }, { 113, 77, 140, 0, 12 }, { 0, 143, 101, 224, 8 }, }, { { 48, 113, 29, 236, 3 }, { 93, 63, 38, 24, 2 }, { 195, 123, 136, 224, 12 }, { 65, 134, 79, 203, 10 }, }, { { 52, 76, 222, 162, 10 }, { 160, 221, 39, 48, 11 }, { 84, 87, 179, 34, 12 }, { 208, 206, 75, 176, 5 }, }, { { 50, 122, 138, 139, 12 }, { 65, 236, 109, 5, 11 }, { 61, 21, 21, 228, 12 }, { 218, 11, 99, 120, 2 }, }, { { 54, 87, 99, 215, 2 }, { 248, 94, 168, 45, 7 }, { 78, 188, 110, 166, 12 }, { 235, 65, 87, 161, 15 }, }, { { 52, 141, 50, 170, 6 }, { 128, 122, 114, 48, 15 }, { 101, 84, 203, 18, 12 }, { 240, 196, 229, 224, 1 }, }, { { 54, 129, 250, 177, 1 }, { 164, 202, 182, 21, 6 }, { 136, 213, 248, 22, 12 }, { 106, 134, 213, 50, 5 }, }, { { 54, 153, 111, 21, 13 }, { 252, 75, 245, 5, 12 }, { 186, 143, 105, 150, 12 }, { 58, 10, 253, 35, 15 }, }, { { 50, 204, 108, 49, 14 }, { 32, 29, 247, 37, 12 }, { 120, 195, 99, 52, 12 }, { 58, 78, 251, 128, 4 }, }, { { 54, 224, 7, 77, 4 }, { 153, 109, 112, 13, 0 }, { 43, 46, 0, 118, 12 }, { 11, 0, 235, 105, 9 }, }, { { 51, 64, 141, 156, 5 }, { 28, 173, 228, 65, 2 }, { 163, 155, 16, 44, 12 }, { 72, 34, 123, 83, 8 }, }, { { 51, 125, 174, 182, 10 }, { 73, 223, 167, 97, 15 }, { 86, 215, 91, 236, 12 }, { 248, 110, 95, 185, 2 }, }, { { 49, 94, 255, 61, 1 }, { 124, 237, 174, 116, 12 }, { 139, 207, 247, 168, 12 }, { 50, 231, 91, 115, 14 }, }, { { 53, 164, 249, 40, 11 }, { 181, 184, 55, 112, 4 }, { 209, 73, 242, 90, 12 }, { 32, 238, 193, 218, 13 }, }, { { 51, 134, 161, 198, 4 }, { 24, 136, 120, 105, 7 }, { 38, 56, 86, 28, 12 }, { 233, 97, 225, 17, 8 }, }, { { 53, 232, 26, 158, 12 }, { 137, 108, 245, 80, 11 }, { 55, 149, 129, 122, 12 }, { 208, 170, 243, 105, 1 }, }, { { 55, 216, 88, 186, 3 }, { 228, 60, 182, 81, 11 }, { 197, 209, 161, 190, 12 }, { 216, 166, 211, 194, 7 }, }, { { 56, 21, 51, 89, 12 }, { 82, 106, 225, 60, 4 }, { 57, 172, 202, 129, 12 }, { 35, 200, 117, 100, 10 }, }, { { 56, 27, 98, 106, 12 }, { 98, 106, 107, 8, 13 }, { 53, 100, 109, 129, 12 }, { 177, 13, 101, 100, 6 }, }, { { 58, 54, 80, 219, 10 }, { 99, 56, 169, 61, 3 }, { 93, 176, 166, 197, 12 }, { 203, 201, 81, 204, 6 }, }, { { 56, 136, 209, 242, 9 }, { 54, 136, 179, 24, 11 }, { 148, 248, 177, 17, 12 }, { 209, 140, 209, 22, 12 }, }, { { 58, 204, 141, 200, 2 }, { 18, 189, 52, 41, 10 }, { 65, 59, 19, 53, 12 }, { 89, 66, 203, 212, 8 }, }, { { 60, 252, 249, 7, 11 }, { 255, 156, 53, 52, 13 }, { 222, 9, 243, 243, 12 }, { 178, 202, 195, 159, 15 }, }, { { 60, 246, 137, 57, 12 }, { 211, 172, 255, 36, 0 }, { 57, 201, 22, 243, 12 }, { 2, 79, 243, 92, 11 }, }, { { 59, 15, 174, 199, 9 }, { 14, 203, 45, 109, 15 }, { 158, 55, 95, 13, 12 }, { 251, 107, 77, 55, 0 }, }, { { 61, 11, 95, 245, 6 }, { 186, 91, 238, 92, 10 }, { 106, 255, 173, 11, 12 }, { 83, 167, 125, 165, 13 }, }, { { 57, 73, 131, 170, 6 }, { 18, 254, 98, 64, 11 }, { 101, 92, 25, 41, 12 }, { 208, 36, 103, 244, 8 }, }, { { 61, 92, 175, 229, 6 }, { 218, 221, 102, 108, 14 }, { 106, 127, 83, 171, 12 }, { 115, 102, 107, 181, 11 }, }, { { 59, 111, 209, 254, 2 }, { 59, 190, 170, 121, 11 }, { 71, 248, 191, 109, 12 }, { 217, 229, 87, 221, 12 }, }, { { 61, 114, 229, 206, 7 }, { 255, 189, 104, 72, 7 }, { 231, 58, 116, 235, 12 }, { 225, 33, 107, 223, 15 }, }, { { 59, 165, 24, 48, 4 }, { 3, 10, 246, 113, 0 }, { 32, 193, 138, 93, 12 }, { 8, 230, 245, 12, 0 }, }, { { 59, 215, 215, 116, 14 }, { 122, 223, 251, 121, 0 }, { 114, 238, 190, 189, 12 }, { 9, 237, 255, 181, 14 }, }, { { 66, 21, 7, 134, 1 }, { 92, 67, 0, 161, 3 }, { 134, 30, 10, 132, 2 }, { 200, 80, 12, 35, 10 }, }, { { 68, 42, 51, 204, 5 }, { 157, 96, 72, 152, 14 }, { 163, 60, 197, 66, 2 }, { 113, 145, 32, 107, 9 }, }, { { 64, 105, 62, 32, 12 }, { 1, 71, 71, 144, 12 }, { 48, 71, 201, 96, 2 }, { 48, 158, 46, 40, 0 }, }, { { 68, 76, 84, 241, 12 }, { 160, 5, 195, 188, 10 }, { 56, 242, 163, 34, 2 }, { 83, 220, 58, 0, 5 }, }, { { 64, 78, 207, 5, 5 }, { 60, 197, 76, 164, 8 }, { 170, 15, 55, 32, 2 }, { 18, 83, 42, 51, 12 }, }, { { 64, 223, 74, 196, 6 }, { 104, 86, 92, 168, 10 }, { 98, 53, 47, 176, 2 }, { 81, 83, 166, 161, 6 }, }, { { 70, 218, 103, 26, 14 }, { 240, 117, 217, 129, 13 }, { 117, 142, 101, 182, 2 }, { 184, 25, 186, 224, 15 }, }, { { 67, 32, 239, 178, 13 }, { 53, 193, 199, 193, 7 }, { 180, 223, 112, 76, 2 }, { 232, 62, 56, 58, 12 }, }, { { 65, 99, 121, 242, 7 }, { 53, 22, 206, 216, 7 }, { 228, 249, 236, 104, 2 }, { 225, 183, 54, 138, 12 }, }, { { 71, 127, 169, 44, 10 }, { 217, 182, 15, 225, 12 }, { 83, 73, 95, 238, 2 }, { 56, 127, 6, 217, 11 }, }, { { 67, 168, 36, 115, 10 }, { 1, 17, 147, 205, 13 }, { 92, 226, 65, 92, 2 }, { 187, 60, 152, 136, 0 }, }, { { 69, 174, 2, 166, 1 }, { 141, 64, 26, 224, 11 }, { 134, 84, 7, 90, 2 }, { 208, 117, 128, 43, 1 }, }, { { 72, 29, 125, 107, 6 }, { 114, 51, 70, 188, 13 }, { 109, 107, 235, 129, 2 }, { 179, 214, 44, 196, 14 }, }, { { 72, 68, 41, 14, 4 }, { 26, 36, 68, 160, 5 }, { 39, 9, 66, 33, 2 }, { 160, 82, 34, 69, 8 }, }, { { 76, 93, 176, 242, 6 }, { 194, 150, 194, 184, 15 }, { 100, 240, 219, 163, 2 }, { 241, 212, 54, 148, 3 }, }, { { 72, 79, 166, 76, 0 }, { 10, 231, 8, 168, 12 }, { 3, 38, 95, 33, 2 }, { 49, 81, 14, 117, 0 }, }, { { 72, 129, 242, 45, 11 }, { 46, 242, 19, 148, 4 }, { 219, 68, 248, 17, 2 }, { 34, 156, 132, 247, 4 }, }, { { 72, 140, 105, 154, 11 }, { 54, 48, 149, 160, 15 }, { 213, 153, 99, 17, 2 }, { 240, 90, 144, 198, 12 }, }, { { 76, 230, 39, 197, 2 }, { 155, 85, 24, 172, 6 }, { 74, 62, 70, 115, 2 }, { 99, 81, 138, 173, 9 }, }, { { 79, 61, 163, 205, 7 }, { 223, 242, 64, 237, 14 }, { 235, 60, 91, 207, 2 }, { 123, 112, 36, 255, 11 }, }, { { 73, 73, 253, 184, 8 }, { 50, 167, 135, 208, 14 }, { 17, 219, 249, 41, 2 }, { 112, 190, 30, 84, 12 }, }, { { 77, 89, 111, 25, 7 }, { 246, 119, 196, 196, 12 }, { 233, 143, 105, 171, 2 }, { 50, 50, 62, 230, 15 }, }, { { 79, 79, 213, 39, 11 }, { 190, 151, 11, 245, 9 }, { 222, 74, 191, 47, 2 }, { 154, 253, 14, 151, 13 }, }, { { 75, 148, 100, 228, 11 }, { 110, 17, 19, 233, 6 }, { 210, 114, 98, 157, 2 }, { 105, 124, 136, 135, 6 }, }, { { 77, 160, 106, 169, 14 }, { 163, 112, 87, 196, 6 }, { 121, 85, 96, 91, 2 }, { 98, 62, 160, 236, 5 }, }, { { 75, 146, 209, 251, 2 }, { 114, 176, 154, 221, 3 }, { 77, 248, 180, 157, 2 }, { 203, 181, 144, 212, 14 }, }, { { 79, 237, 128, 190, 11 }, { 143, 182, 147, 225, 11 }, { 215, 208, 27, 127, 2 }, { 216, 124, 150, 223, 1 }, }, { { 73, 250, 110, 175, 3 }, { 111, 117, 30, 196, 15 }, { 207, 87, 101, 249, 2 }, { 242, 55, 138, 239, 6 }, }, { { 84, 32, 172, 167, 7 }, { 141, 153, 70, 132, 7 }, { 238, 83, 80, 66, 10 }, { 226, 22, 41, 155, 1 }, }, { { 84, 25, 164, 142, 8 }, { 200, 171, 1, 128, 15 }, { 23, 18, 89, 130, 10 }, { 240, 24, 13, 81, 3 }, }, { { 86, 116, 218, 31, 8 }, { 233, 236, 133, 181, 1 }, { 31, 133, 178, 230, 10 }, { 138, 218, 19, 121, 7 }, }, { { 82, 70, 69, 212, 11 }, { 60, 29, 137, 169, 2 }, { 210, 186, 38, 36, 10 }, { 73, 89, 27, 131, 12 }, }, { { 80, 153, 112, 192, 3 }, { 100, 26, 16, 152, 14 }, { 192, 48, 233, 144, 10 }, { 113, 144, 133, 130, 6 }, }, { { 82, 162, 196, 106, 5 }, { 37, 169, 90, 137, 1 }, { 165, 98, 52, 84, 10 }, { 137, 21, 169, 90, 4 }, }, { { 80, 232, 170, 66, 4 }, { 1, 204, 84, 136, 13 }, { 36, 37, 81, 112, 10 }, { 177, 18, 163, 56, 0 }, }, { { 82, 242, 173, 89, 8 }, { 81, 173, 157, 141, 4 }, { 25, 171, 84, 244, 10 }, { 43, 27, 155, 88, 10 }, }, { { 82, 218, 235, 246, 10 }, { 120, 220, 159, 137, 15 }, { 86, 253, 117, 180, 10 }, { 249, 31, 147, 177, 14 }, }, { { 85, 46, 248, 226, 2 }, { 161, 152, 14, 248, 15 }, { 68, 113, 247, 74, 10 }, { 241, 247, 1, 152, 5 }, }, { { 81, 65, 96, 182, 2 }, { 40, 30, 130, 192, 7 }, { 70, 208, 104, 40, 10 }, { 224, 52, 23, 129, 4 }, }, { { 85, 104, 6, 21, 8 }, { 137, 77, 129, 196, 8 }, { 26, 134, 1, 106, 10 }, { 18, 56, 27, 41, 1 }, }, { { 83, 74, 126, 75, 13 }, { 36, 109, 77, 221, 13 }, { 189, 39, 229, 44, 10 }, { 187, 187, 43, 98, 4 }, }, { { 83, 107, 211, 224, 11 }, { 53, 222, 11, 217, 10 }, { 208, 124, 189, 108, 10 }, { 89, 189, 7, 186, 12 }, }, { { 87, 114, 130, 210, 7 }, { 197, 220, 200, 201, 3 }, { 228, 180, 20, 238, 10 }, { 201, 49, 51, 186, 3 }, }, { { 87, 129, 213, 88, 2 }, { 176, 187, 144, 217, 0 }, { 65, 170, 184, 30, 10 }, { 9, 176, 157, 208, 13 }, }, { { 87, 164, 195, 74, 8 }, { 177, 232, 17, 233, 1 }, { 21, 44, 50, 94, 10 }, { 137, 120, 129, 120, 13 }, }, { { 81, 151, 175, 148, 8 }, { 88, 203, 157, 224, 6 }, { 18, 159, 94, 152, 10 }, { 96, 123, 157, 49, 10 }, }, { { 87, 143, 23, 115, 11 }, { 148, 91, 155, 253, 9 }, { 220, 238, 143, 30, 10 }, { 155, 253, 157, 162, 9 }, }, { { 85, 194, 224, 207, 0 }, { 168, 172, 24, 204, 7 }, { 15, 48, 116, 58, 10 }, { 227, 49, 131, 81, 5 }, }, { { 87, 246, 164, 229, 1 }, { 205, 141, 26, 237, 6 }, { 138, 114, 86, 254, 10 }, { 107, 117, 139, 27, 3 }, }, { { 92, 5, 94, 2, 5 }, { 166, 75, 68, 176, 1 }, { 164, 7, 170, 3, 10 }, { 128, 210, 45, 38, 5 }, }, { { 94, 56, 204, 77, 0 }, { 235, 169, 4, 141, 8 }, { 11, 35, 49, 199, 10 }, { 27, 18, 9, 93, 7 }, }, { { 94, 101, 102, 31, 5 }, { 175, 111, 192, 165, 5 }, { 175, 134, 106, 103, 10 }, { 170, 80, 63, 111, 5 }, }, { { 90, 165, 235, 123, 5 }, { 55, 234, 214, 173, 5 }, { 173, 237, 122, 85, 10 }, { 171, 86, 181, 126, 12 }, }, { { 94, 173, 81, 224, 13 }, { 183, 10, 83, 185, 10 }, { 176, 120, 171, 87, 10 }, { 89, 220, 165, 14, 13 }, }, { { 88, 179, 133, 252, 1 }, { 95, 171, 154, 136, 2 }, { 131, 250, 28, 209, 10 }, { 65, 21, 157, 95, 10 }, }, { { 90, 197, 248, 110, 0 }, { 42, 174, 22, 185, 5 }, { 7, 97, 250, 53, 10 }, { 169, 214, 135, 85, 4 }, }, { { 88, 241, 107, 96, 0 }, { 115, 78, 22, 136, 4 }, { 0, 109, 104, 241, 10 }, { 33, 22, 135, 44, 14 }, }, { { 91, 48, 177, 32, 8 }, { 83, 136, 3, 209, 4 }, { 16, 72, 208, 205, 10 }, { 40, 188, 1, 28, 10 }, }, { { 95, 52, 239, 231, 11 }, { 255, 217, 7, 237, 7 }, { 222, 127, 114, 207, 10 }, { 235, 126, 9, 191, 15 }, }, { { 89, 64, 115, 102, 9 }, { 62, 76, 3, 216, 5 }, { 150, 108, 224, 41, 10 }, { 161, 188, 3, 39, 12 }, }, { { 93, 105, 19, 173, 1 }, { 159, 110, 2, 212, 10 }, { 139, 92, 137, 107, 10 }, { 82, 180, 7, 111, 9 }, }, { { 89, 82, 185, 227, 11 }, { 86, 156, 15, 220, 7 }, { 220, 121, 212, 169, 10 }, { 227, 191, 3, 150, 10 }, }, { { 93, 70, 244, 172, 2 }, { 170, 189, 10, 240, 6 }, { 67, 82, 246, 43, 10 }, { 96, 245, 11, 213, 5 }, }, { { 95, 128, 157, 46, 8 }, { 154, 169, 23, 209, 1 }, { 23, 75, 144, 31, 10 }, { 136, 190, 137, 85, 9 }, }, { { 95, 224, 251, 80, 14 }, { 179, 220, 213, 217, 4 }, { 112, 173, 240, 127, 10 }, { 41, 186, 179, 188, 13 }, }, { { 95, 235, 211, 215, 0 }, { 187, 206, 152, 221, 11 }, { 14, 188, 189, 127, 10 }, { 219, 177, 151, 61, 13 }, }, { { 100, 105, 134, 115, 5 }, { 133, 199, 226, 140, 9 }, { 172, 230, 25, 98, 6 }, { 147, 20, 126, 58, 1 }, }, { { 96, 188, 232, 205, 8 }, { 105, 160, 53, 172, 14 }, { 27, 49, 115, 208, 6 }, { 115, 90, 192, 89, 6 }, }, { { 100, 158, 227, 5, 6 }, { 248, 208, 120, 164, 12 }, { 106, 12, 119, 146, 6 }, { 50, 81, 224, 177, 15 }, }, { { 98, 212, 165, 37, 13 }, { 92, 133, 115, 165, 4 }, { 186, 74, 82, 180, 6 }, { 42, 92, 234, 19, 10 }, }, { { 98, 246, 143, 142, 3 }, { 93, 245, 60, 161, 3 }, { 199, 31, 22, 244, 6 }, { 200, 83, 202, 251, 10 }, }, { { 101, 96, 72, 36, 7 }, { 173, 20, 102, 192, 0 }, { 226, 65, 32, 106, 6 }, { 0, 54, 98, 139, 5 }, }, { { 99, 180, 12, 145, 8 }, { 65, 1, 181, 229, 2 }, { 24, 147, 2, 220, 6 }, { 74, 122, 216, 8, 2 }, }, { { 99, 159, 233, 153, 13 }, { 116, 162, 253, 229, 14 }, { 185, 153, 127, 156, 6 }, { 122, 123, 244, 82, 14 }, }, { { 101, 237, 229, 156, 7 }, { 189, 183, 240, 224, 14 }, { 227, 154, 123, 122, 6 }, { 112, 112, 254, 219, 13 }, }, { { 103, 235, 231, 112, 4 }, { 177, 199, 250, 201, 12 }, { 32, 238, 125, 126, 6 }, { 57, 53, 254, 56, 13 }, }, { { 106, 1, 200, 157, 4 }, { 42, 162, 228, 133, 2 }, { 43, 145, 56, 5, 6 }, { 74, 18, 116, 85, 4 }, }, { { 104, 61, 242, 11, 0 }, { 99, 226, 32, 180, 13 }, { 13, 4, 251, 193, 6 }, { 178, 208, 68, 124, 6 }, }, { { 104, 24, 102, 125, 13 }, { 110, 97, 227, 140, 12 }, { 187, 230, 97, 129, 6 }, { 51, 28, 120, 103, 6 }, }, { { 108, 84, 97, 80, 15 }, { 246, 20, 225, 168, 4 }, { 240, 168, 98, 163, 6 }, { 33, 88, 114, 134, 15 }, }, { { 104, 75, 24, 245, 13 }, { 14, 6, 239, 156, 10 }, { 186, 241, 141, 33, 6 }, { 83, 159, 118, 7, 0 }, }, { { 104, 79, 21, 129, 0 }, { 18, 7, 40, 180, 10 }, { 8, 26, 143, 33, 6 }, { 82, 209, 78, 4, 8 }, }, { { 110, 110, 244, 89, 0 }, { 163, 165, 168, 189, 12 }, { 9, 162, 247, 103, 6 }, { 59, 209, 90, 92, 5 }, }, { { 110, 152, 128, 38, 5 }, { 206, 128, 114, 129, 9 }, { 166, 64, 17, 151, 6 }, { 152, 20, 224, 23, 3 }, }, { { 110, 144, 99, 51, 3 }, { 246, 80, 178, 133, 5 }, { 204, 204, 96, 151, 6 }, { 170, 20, 208, 166, 15 }, }, { { 110, 241, 228, 10, 7 }, { 231, 183, 112, 129, 5 }, { 229, 2, 120, 247, 6 }, { 168, 16, 238, 222, 7 }, }, { { 108, 195, 36, 252, 0 }, { 138, 39, 186, 136, 6 }, { 3, 242, 76, 51, 6 }, { 97, 21, 222, 69, 1 }, }, { { 105, 0, 81, 91, 15 }, { 54, 48, 225, 220, 1 }, { 253, 168, 160, 9, 6 }, { 131, 184, 112, 198, 12 }, }, { { 107, 64, 14, 250, 12 }, { 2, 101, 231, 201, 3 }, { 53, 247, 0, 45, 6 }, { 201, 62, 122, 100, 0 }, }, { { 107, 124, 181, 68, 7 }, { 95, 149, 96, 249, 12 }, { 226, 42, 211, 237, 6 }, { 57, 240, 106, 159, 10 }, }, { { 105, 172, 245, 202, 2 }, { 51, 177, 48, 248, 15 }, { 69, 58, 243, 89, 6 }, { 241, 240, 200, 220, 12 }, }, { { 105, 167, 102, 247, 12 }, { 43, 67, 251, 236, 7 }, { 62, 246, 110, 89, 6 }, { 227, 125, 252, 45, 4 }, }, { { 109, 235, 50, 140, 11 }, { 143, 118, 57, 208, 14 }, { 211, 20, 205, 123, 6 }, { 112, 185, 198, 239, 1 }, }, { { 116, 23, 252, 110, 12 }, { 232, 171, 111, 184, 5 }, { 55, 99, 254, 130, 14 }, { 161, 223, 109, 81, 7 }, }, { { 112, 97, 170, 185, 4 }, { 1, 238, 230, 132, 6 }, { 41, 213, 88, 96, 14 }, { 98, 22, 119, 120, 0 }, }, { { 116, 67, 17, 82, 1 }, { 148, 14, 168, 152, 1 }, { 132, 168, 140, 34, 14 }, { 129, 145, 87, 2, 9 }, }, { { 112, 185, 187, 138, 9 }, { 85, 234, 53, 144, 15 }, { 149, 29, 217, 208, 14 }, { 240, 154, 197, 122, 10 }, }, { { 118, 148, 62, 229, 4 }, { 200, 73, 118, 189, 6 }, { 42, 119, 194, 150, 14 }, { 107, 214, 233, 33, 3 }, }, { { 118, 188, 96, 18, 9 }, { 229, 8, 177, 161, 13 }, { 148, 128, 99, 214, 14 }, { 184, 88, 209, 10, 7 }, }, { { 112, 155, 7, 165, 4 }, { 88, 75, 122, 132, 10 }, { 42, 94, 13, 144, 14 }, { 82, 21, 237, 33, 10 }, }, { { 116, 139, 191, 1, 3 }, { 148, 219, 60, 148, 12 }, { 200, 15, 221, 18, 14 }, { 50, 147, 205, 178, 9 }, }, { { 114, 248, 93, 79, 11 }, { 125, 61, 53, 157, 9 }, { 223, 43, 161, 244, 14 }, { 155, 154, 203, 203, 14 }, }, { { 118, 211, 218, 167, 15 }, { 236, 222, 127, 149, 3 }, { 254, 85, 188, 182, 14 }, { 202, 159, 231, 179, 7 }, }, { { 117, 36, 208, 249, 9 }, { 165, 168, 163, 252, 2 }, { 153, 240, 178, 74, 14 }, { 67, 252, 81, 90, 5 }, }, { { 117, 60, 188, 48, 6 }, { 193, 153, 230, 240, 12 }, { 96, 195, 211, 202, 14 }, { 48, 246, 121, 152, 3 }, }, { { 119, 3, 201, 213, 15 }, { 188, 154, 237, 205, 2 }, { 250, 185, 60, 14, 14 }, { 75, 59, 117, 147, 13 }, }, { { 113, 69, 59, 42, 5 }, { 20, 110, 102, 240, 5 }, { 165, 77, 202, 40, 14 }, { 160, 246, 103, 98, 8 }, }, { { 115, 108, 25, 223, 1 }, { 29, 44, 164, 253, 11 }, { 143, 185, 131, 108, 14 }, { 219, 242, 83, 75, 8 }, }, { { 113, 72, 238, 44, 10 }, { 40, 253, 39, 192, 12 }, { 83, 71, 113, 40, 14 }, { 48, 62, 75, 241, 4 }, }, { { 115, 111, 34, 124, 0 }, { 9, 110, 170, 233, 12 }, { 3, 228, 79, 108, 14 }, { 57, 117, 87, 105, 0 }, }, { { 115, 145, 99, 174, 14 }, { 120, 122, 115, 193, 7 }, { 119, 92, 104, 156, 14 }, { 232, 60, 229, 225, 14 }, }, { { 117, 131, 158, 142, 9 }, { 140, 235, 61, 208, 3 }, { 151, 23, 156, 26, 14 }, { 192, 187, 205, 115, 1 }, }, { { 119, 191, 100, 123, 6 }, { 225, 59, 250, 237, 13 }, { 109, 226, 111, 222, 14 }, { 187, 117, 253, 200, 7 }, }, { { 115, 229, 189, 18, 10 }, { 17, 159, 181, 241, 5 }, { 84, 139, 218, 124, 14 }, { 168, 250, 223, 152, 8 }, }, { { 115, 207, 104, 128, 3 }, { 36, 30, 60, 225, 14 }, { 192, 17, 111, 60, 14 }, { 120, 115, 199, 130, 4 }, }, { { 113, 247, 74, 10, 0 }, { 97, 110, 60, 224, 1 }, { 5, 5, 46, 248, 14 }, { 128, 115, 199, 104, 6 }, }, { { 120, 45, 207, 39, 6 }, { 59, 219, 102, 164, 9 }, { 110, 79, 59, 65, 14 }, { 146, 86, 109, 189, 12 }, }, { { 124, 2, 58, 157, 7 }, { 142, 120, 236, 148, 6 }, { 235, 149, 196, 3, 14 }, { 98, 147, 113, 231, 1 }, }, { { 122, 92, 206, 58, 4 }, { 98, 237, 230, 161, 9 }, { 37, 199, 51, 165, 14 }, { 152, 86, 123, 116, 6 }, }, { { 122, 114, 16, 7, 7 }, { 79, 28, 104, 149, 1 }, { 238, 0, 132, 229, 14 }, { 138, 145, 99, 143, 2 }, }, { { 126, 178, 36, 208, 11 }, { 199, 25, 185, 137, 6 }, { 208, 178, 68, 215, 14 }, { 105, 25, 217, 142, 3 }, }, { { 120, 253, 197, 213, 2 }, { 123, 159, 176, 172, 10 }, { 74, 186, 59, 241, 14 }, { 83, 80, 223, 157, 14 }, }, { { 126, 232, 117, 158, 9 }, { 191, 45, 177, 145, 15 }, { 151, 154, 225, 119, 14 }, { 248, 152, 219, 79, 13 }, }, { { 123, 28, 43, 68, 14 }, { 90, 88, 101, 233, 12 }, { 114, 45, 67, 141, 14 }, { 57, 122, 97, 165, 10 }, }, { { 127, 4, 160, 250, 2 }, { 130, 184, 162, 233, 7 }, { 69, 240, 82, 15, 14 }, { 233, 116, 81, 212, 1 }, }, { { 123, 39, 78, 235, 3 }, { 39, 123, 46, 237, 3 }, { 205, 119, 46, 77, 14 }, { 203, 119, 77, 238, 4 }, }, { { 125, 38, 127, 122, 1 }, { 183, 105, 174, 248, 5 }, { 133, 239, 230, 75, 14 }, { 161, 247, 89, 110, 13 }, }, { { 127, 50, 169, 94, 10 }, { 219, 184, 173, 201, 5 }, { 87, 169, 84, 207, 14 }, { 169, 59, 81, 221, 11 }, }, { { 121, 180, 170, 170, 7 }, { 71, 248, 118, 224, 7 }, { 229, 85, 82, 217, 14 }, { 224, 118, 225, 254, 2 }, }, { { 125, 176, 215, 37, 3 }, { 255, 217, 50, 212, 0 }, { 202, 78, 176, 219, 14 }, { 2, 180, 201, 191, 15 }, }, { { 127, 147, 79, 12, 2 }, { 250, 123, 60, 193, 0 }, { 67, 15, 44, 159, 14 }, { 8, 51, 205, 229, 15 }, }, { { 125, 252, 16, 66, 2 }, { 195, 28, 48, 248, 9 }, { 68, 32, 131, 251, 14 }, { 145, 240, 195, 140, 3 }, }, { { 125, 213, 216, 211, 15 }, { 230, 158, 245, 252, 3 }, { 252, 177, 186, 187, 14 }, { 195, 250, 247, 150, 7 }, }, { { 128, 56, 32, 103, 11 }, { 77, 16, 3, 14, 13 }, { 222, 96, 65, 192, 1 }, { 183, 12, 0, 139, 2 }, }, { { 132, 17, 185, 214, 3 }, { 220, 146, 132, 26, 7 }, { 198, 185, 216, 130, 1 }, { 229, 130, 20, 147, 11 }, }, { { 128, 3, 252, 100, 10 }, { 40, 147, 15, 26, 4 }, { 82, 99, 252, 0, 1 }, { 37, 143, 12, 145, 4 }, }, { { 130, 59, 15, 187, 10 }, { 81, 115, 143, 7, 11 }, { 93, 223, 13, 196, 1 }, { 222, 15, 28, 232, 10 }, }, { { 134, 42, 167, 117, 10 }, { 153, 209, 139, 15, 12 }, { 90, 238, 85, 70, 1 }, { 63, 13, 24, 185, 9 }, }, { { 132, 27, 89, 75, 7 }, { 244, 50, 76, 30, 9 }, { 237, 41, 173, 130, 1 }, { 151, 131, 36, 194, 15 }, }, { { 130, 68, 49, 200, 10 }, { 16, 52, 1, 59, 6 }, { 81, 56, 194, 36, 1 }, { 109, 200, 2, 192, 8 }, }, { { 130, 89, 216, 117, 3 }, { 108, 150, 134, 31, 8 }, { 202, 225, 185, 164, 1 }, { 31, 134, 22, 147, 6 }, }, { { 132, 72, 31, 220, 14 }, { 152, 117, 197, 26, 10 }, { 115, 191, 129, 34, 1 }, { 85, 138, 58, 225, 9 }, }, { { 130, 181, 229, 107, 4 }, { 113, 163, 82, 47, 5 }, { 45, 106, 122, 212, 1 }, { 175, 68, 172, 88, 14 }, }, { { 128, 183, 10, 183, 0 }, { 73, 66, 158, 38, 3 }, { 14, 213, 14, 208, 1 }, { 198, 71, 148, 41, 2 }, }, { { 134, 178, 80, 25, 10 }, { 225, 48, 153, 23, 0 }, { 89, 128, 164, 214, 1 }, { 14, 137, 144, 200, 7 }, }, { { 128, 204, 47, 123, 8 }, { 16, 101, 151, 46, 13 }, { 29, 239, 67, 48, 1 }, { 183, 78, 154, 96, 8 }, }, { { 134, 253, 182, 100, 8 }, { 201, 199, 19, 59, 12 }, { 18, 102, 219, 246, 1 }, { 61, 204, 142, 57, 3 }, }, { { 129, 121, 60, 62, 9 }, { 77, 39, 135, 82, 13 }, { 151, 195, 201, 232, 1 }, { 180, 174, 30, 75, 2 }, }, { { 133, 96, 132, 133, 11 }, { 141, 149, 1, 70, 2 }, { 218, 18, 16, 106, 1 }, { 70, 40, 10, 155, 1 }, }, { { 131, 98, 22, 146, 5 }, { 5, 69, 200, 83, 3 }, { 164, 150, 132, 108, 1 }, { 204, 161, 58, 42, 0 }, }, { { 131, 128, 229, 221, 15 }, { 60, 177, 209, 79, 6 }, { 251, 186, 112, 28, 1 }, { 111, 40, 184, 211, 12 }, }, { { 135, 160, 76, 203, 2 }, { 161, 49, 20, 79, 3 }, { 77, 51, 32, 94, 1 }, { 207, 34, 136, 200, 5 }, }, { { 135, 184, 138, 180, 13 }, { 205, 192, 215, 67, 10 }, { 178, 213, 17, 222, 1 }, { 92, 46, 176, 59, 3 }, }, { { 142, 2, 6, 56, 4 }, { 130, 97, 202, 3, 0 }, { 33, 198, 4, 7, 1 }, { 12, 5, 56, 100, 1 }, }, { { 140, 54, 125, 172, 7 }, { 255, 49, 78, 50, 6 }, { 227, 91, 230, 195, 1 }, { 100, 199, 40, 207, 15 }, }, { { 140, 65, 233, 44, 2 }, { 186, 182, 6, 2, 4 }, { 67, 73, 120, 35, 1 }, { 36, 6, 6, 213, 13 }, }, { { 140, 152, 59, 175, 12 }, { 218, 96, 87, 22, 15 }, { 63, 93, 193, 147, 1 }, { 246, 142, 160, 101, 11 }, }, { { 136, 244, 107, 79, 11 }, { 127, 116, 21, 46, 5 }, { 223, 45, 98, 241, 1 }, { 167, 74, 130, 239, 14 }, }, { { 143, 44, 197, 204, 4 }, { 187, 161, 64, 107, 10 }, { 35, 58, 51, 79, 1 }, { 93, 96, 40, 93, 13 }, }, { { 141, 55, 126, 115, 3 }, { 231, 83, 142, 126, 5 }, { 204, 231, 238, 203, 1 }, { 167, 231, 28, 174, 7 }, }, { { 139, 69, 79, 63, 7 }, { 62, 119, 198, 103, 1 }, { 239, 207, 42, 45, 1 }, { 142, 102, 62, 231, 12 }, }, { { 141, 86, 37, 150, 0 }, { 218, 5, 136, 98, 7 }, { 6, 154, 70, 171, 1 }, { 228, 97, 26, 5, 11 }, }, { { 139, 191, 24, 57, 2 }, { 67, 50, 158, 119, 8 }, { 73, 193, 143, 221, 1 }, { 30, 231, 148, 204, 2 }, }, { { 141, 166, 67, 9, 4 }, { 179, 96, 88, 102, 0 }, { 41, 12, 38, 91, 1 }, { 6, 97, 160, 108, 13 }, }, { { 141, 208, 202, 166, 8 }, { 234, 196, 23, 66, 3 }, { 22, 85, 48, 187, 1 }, { 196, 46, 130, 53, 7 }, }, { { 139, 246, 152, 79, 4 }, { 75, 164, 92, 127, 1 }, { 47, 33, 150, 253, 1 }, { 143, 227, 162, 93, 2 }, }, { { 144, 18, 153, 165, 4 }, { 88, 136, 78, 22, 2 }, { 42, 89, 148, 128, 9 }, { 70, 135, 33, 17, 10 }, }, { { 150, 46, 4, 135, 5 }, { 141, 9, 72, 39, 11 }, { 174, 18, 7, 70, 9 }, { 222, 65, 41, 11, 1 }, }, { { 146, 92, 163, 212, 0 }, { 88, 204, 128, 43, 14 }, { 2, 188, 83, 164, 9 }, { 125, 64, 19, 49, 10 }, }, { { 146, 133, 143, 119, 10 }, { 24, 219, 151, 47, 1 }, { 94, 239, 26, 20, 9 }, { 143, 78, 157, 177, 8 }, }, { { 148, 169, 61, 69, 10 }, { 153, 27, 21, 30, 12 }, { 90, 43, 201, 82, 9 }, { 55, 138, 141, 137, 9 }, }, { { 145, 32, 243, 51, 2 }, { 49, 216, 130, 86, 5 }, { 76, 204, 240, 72, 9 }, { 166, 164, 17, 184, 12 }, }, { { 145, 39, 109, 79, 3 }, { 61, 59, 12, 110, 5 }, { 207, 43, 110, 72, 9 }, { 167, 99, 13, 203, 12 }, }, { { 151, 51, 253, 233, 10 }, { 241, 187, 15, 95, 6 }, { 89, 123, 252, 206, 9 }, { 111, 175, 13, 216, 15 }, }, { { 151, 72, 243, 129, 3 }, { 180, 220, 0, 87, 14 }, { 200, 28, 241, 46, 9 }, { 126, 160, 3, 178, 13 }, }, { { 151, 159, 160, 6, 9 }, { 204, 138, 25, 99, 13 }, { 150, 0, 95, 158, 9 }, { 188, 105, 133, 19, 3 }, }, { { 147, 208, 63, 215, 12 }, { 88, 77, 213, 95, 7 }, { 62, 191, 192, 188, 9 }, { 239, 170, 187, 33, 10 }, }, { { 149, 252, 208, 110, 0 }, { 233, 172, 18, 122, 9 }, { 7, 96, 179, 250, 9 }, { 149, 228, 131, 89, 7 }, }, { { 147, 195, 178, 11, 1 }, { 4, 238, 24, 87, 5 }, { 141, 4, 220, 60, 9 }, { 174, 161, 135, 114, 0 }, }, { { 145, 195, 66, 1, 14 }, { 32, 94, 89, 70, 0 }, { 120, 4, 44, 56, 9 }, { 6, 41, 167, 160, 4 }, }, { { 158, 10, 212, 208, 9 }, { 166, 137, 137, 27, 10 }, { 144, 178, 181, 7, 9 }, { 93, 137, 25, 22, 5 }, }, { { 158, 62, 24, 70, 8 }, { 203, 8, 13, 59, 9 }, { 22, 33, 135, 199, 9 }, { 157, 203, 1, 13, 3 }, }, { { 154, 97, 122, 220, 9 }, { 47, 110, 133, 27, 6 }, { 147, 181, 232, 101, 9 }, { 109, 138, 23, 111, 4 }, }, { { 152, 200, 135, 101, 13 }, { 30, 205, 83, 14, 8 }, { 186, 110, 17, 49, 9 }, { 23, 12, 171, 55, 8 }, }, { { 152, 193, 223, 48, 9 }, { 54, 207, 151, 18, 0 }, { 144, 207, 184, 49, 9 }, { 4, 142, 159, 54, 12 }, }, { { 158, 249, 40, 250, 12 }, { 195, 46, 215, 11, 15 }, { 53, 241, 73, 247, 9 }, { 253, 14, 183, 76, 3 }, }, { { 158, 240, 171, 22, 1 }, { 223, 204, 148, 3, 5 }, { 134, 141, 80, 247, 9 }, { 172, 2, 147, 63, 11 }, }, { { 152, 251, 117, 9, 13 }, { 119, 47, 89, 22, 12 }, { 185, 10, 237, 241, 9 }, { 54, 137, 175, 78, 14 }, }, { { 159, 32, 1, 53, 4 }, { 155, 8, 194, 71, 0 }, { 42, 200, 0, 79, 9 }, { 14, 36, 49, 13, 9 }, }, { { 153, 18, 120, 7, 12 }, { 106, 8, 77, 86, 5 }, { 62, 1, 228, 137, 9 }, { 166, 171, 33, 5, 6 }, }, { { 155, 131, 245, 126, 11 }, { 62, 187, 155, 91, 5 }, { 215, 234, 252, 29, 9 }, { 173, 173, 157, 215, 12 }, }, { { 153, 249, 200, 173, 5 }, { 111, 174, 86, 70, 10 }, { 171, 81, 57, 249, 9 }, { 86, 38, 167, 95, 6 }, }, { { 157, 228, 46, 236, 2 }, { 139, 125, 22, 106, 6 }, { 67, 119, 66, 123, 9 }, { 101, 102, 139, 237, 1 }, }, { { 155, 219, 144, 210, 3 }, { 70, 158, 152, 91, 11 }, { 196, 176, 157, 189, 9 }, { 221, 161, 151, 150, 2 }, }, { { 159, 254, 132, 153, 15 }, { 199, 189, 217, 103, 10 }, { 249, 146, 23, 255, 9 }, { 94, 105, 187, 222, 3 }, }, { { 162, 66, 140, 215, 9 }, { 12, 133, 173, 15, 3 }, { 158, 179, 20, 36, 5 }, { 207, 11, 90, 19, 0 }, }, { { 164, 205, 25, 53, 7 }, { 156, 22, 246, 54, 8 }, { 234, 201, 139, 50, 5 }, { 22, 198, 246, 131, 9 }, }, { { 166, 213, 162, 25, 0 }, { 192, 230, 176, 39, 4 }, { 9, 132, 90, 182, 5 }, { 46, 64, 214, 112, 3 }, }, { { 160, 223, 192, 176, 6 }, { 96, 150, 250, 34, 10 }, { 96, 208, 63, 176, 5 }, { 84, 69, 246, 144, 6 }, }, { { 163, 49, 180, 144, 4 }, { 65, 131, 224, 83, 6 }, { 32, 146, 216, 204, 5 }, { 108, 160, 124, 24, 2 }, }, { { 167, 32, 134, 58, 15 }, { 133, 241, 227, 67, 1 }, { 245, 198, 16, 78, 5 }, { 140, 44, 120, 250, 1 }, }, { { 167, 56, 45, 40, 13 }, { 213, 33, 103, 67, 12 }, { 177, 75, 65, 206, 5 }, { 60, 46, 104, 74, 11 }, }, { { 163, 63, 204, 220, 14 }, { 105, 179, 237, 107, 10 }, { 115, 179, 63, 204, 5 }, { 93, 107, 124, 217, 6 }, }, { { 165, 62, 179, 132, 11 }, { 221, 208, 41, 114, 14 }, { 210, 28, 215, 202, 5 }, { 116, 233, 64, 187, 11 }, }, { { 161, 112, 26, 189, 7 }, { 77, 116, 230, 86, 2 }, { 235, 213, 128, 232, 5 }, { 70, 166, 114, 235, 2 }, }, { { 167, 103, 101, 55, 9 }, { 189, 7, 171, 103, 5 }, { 158, 202, 110, 110, 5 }, { 174, 109, 94, 11, 13 }, }, { { 165, 123, 102, 174, 4 }, { 233, 103, 106, 66, 15 }, { 39, 86, 109, 234, 5 }, { 244, 37, 110, 105, 7 }, }, { { 161, 213, 29, 147, 2 }, { 80, 23, 180, 118, 3 }, { 76, 155, 138, 184, 5 }, { 198, 226, 222, 128, 10 }, }, { { 163, 248, 233, 155, 14 }, { 113, 180, 245, 71, 15 }, { 125, 153, 113, 252, 5 }, { 254, 42, 242, 216, 14 }, }, { { 165, 211, 131, 218, 3 }, { 212, 246, 184, 74, 3 }, { 197, 188, 28, 186, 5 }, { 197, 33, 214, 242, 11 }, }, { { 165, 214, 235, 188, 6 }, { 248, 244, 254, 98, 6 }, { 99, 221, 118, 186, 5 }, { 100, 103, 242, 241, 15 }, }, { { 170, 38, 227, 151, 9 }, { 63, 192, 169, 39, 7 }, { 158, 156, 118, 69, 5 }, { 238, 73, 80, 63, 12 }, }, { { 174, 30, 201, 63, 12 }, { 250, 160, 239, 39, 9 }, { 63, 201, 55, 135, 5 }, { 158, 79, 112, 85, 15 }, }, { { 172, 119, 184, 237, 2 }, { 203, 182, 46, 62, 6 }, { 75, 113, 222, 227, 5 }, { 103, 199, 70, 221, 3 }, }, { { 170, 169, 238, 77, 15 }, { 47, 243, 117, 15, 12 }, { 251, 39, 121, 85, 5 }, { 63, 10, 236, 255, 4 }, }, { { 170, 128, 121, 170, 6 }, { 50, 48, 118, 19, 7 }, { 101, 89, 224, 21, 5 }, { 236, 134, 224, 196, 12 }, }, { { 174, 194, 96, 202, 1 }, { 166, 36, 56, 11, 7 }, { 133, 48, 100, 55, 5 }, { 237, 1, 194, 70, 5 }, }, { { 169, 58, 152, 98, 11 }, { 71, 144, 47, 90, 9 }, { 212, 97, 149, 201, 5 }, { 149, 175, 64, 158, 2 }, }, { { 171, 18, 81, 200, 12 }, { 114, 32, 105, 91, 2 }, { 49, 56, 164, 141, 5 }, { 77, 169, 96, 68, 14 }, }, { { 173, 102, 219, 216, 13 }, { 183, 228, 237, 122, 2 }, { 177, 189, 182, 107, 5 }, { 69, 235, 114, 126, 13 }, }, { { 173, 82, 221, 74, 1 }, { 246, 165, 44, 90, 1 }, { 133, 43, 180, 171, 5 }, { 133, 163, 74, 86, 15 }, }, { { 169, 182, 113, 16, 8 }, { 115, 0, 185, 114, 4 }, { 16, 136, 230, 217, 5 }, { 36, 233, 208, 12, 14 }, }, { { 173, 186, 226, 53, 0 }, { 235, 192, 186, 70, 12 }, { 10, 196, 117, 219, 5 }, { 54, 37, 208, 61, 7 }, }, { { 173, 151, 65, 223, 12 }, { 250, 34, 249, 110, 3 }, { 63, 184, 46, 155, 5 }, { 199, 105, 244, 69, 15 }, }, { { 171, 243, 182, 44, 7 }, { 79, 247, 122, 83, 4 }, { 227, 70, 220, 253, 5 }, { 44, 165, 238, 255, 2 }, }, { { 182, 34, 108, 113, 12 }, { 161, 9, 239, 15, 4 }, { 56, 227, 100, 70, 13 }, { 47, 15, 121, 8, 5 }, }, { { 180, 30, 37, 122, 7 }, { 212, 57, 234, 42, 13 }, { 229, 234, 71, 130, 13 }, { 181, 69, 121, 194, 11 }, }, { { 182, 55, 195, 138, 3 }, { 245, 250, 40, 35, 3 }, { 197, 28, 62, 198, 13 }, { 204, 65, 69, 250, 15 }, }, { { 176, 76, 212, 55, 0 }, { 40, 141, 162, 54, 9 }, { 14, 194, 179, 32, 13 }, { 150, 196, 91, 17, 4 }, }, { { 178, 127, 139, 5, 3 }, { 93, 222, 44, 39, 8 }, { 202, 13, 31, 228, 13 }, { 30, 67, 71, 187, 10 }, }, { { 176, 173, 216, 34, 5 }, { 37, 138, 118, 50, 9 }, { 164, 65, 187, 80, 13 }, { 148, 198, 229, 26, 4 }, }, { { 180, 155, 130, 43, 11 }, { 196, 250, 59, 6, 9 }, { 221, 68, 29, 146, 13 }, { 150, 13, 197, 242, 3 }, }, { { 176, 211, 78, 194, 3 }, { 100, 95, 60, 10, 3 }, { 196, 55, 44, 176, 13 }, { 197, 3, 207, 162, 6 }, }, { { 177, 61, 126, 195, 14 }, { 97, 91, 101, 126, 15 }, { 124, 55, 235, 200, 13 }, { 247, 234, 109, 168, 6 }, }, { { 177, 6, 164, 99, 14 }, { 0, 153, 107, 110, 5 }, { 124, 98, 86, 8, 13 }, { 167, 109, 105, 144, 0 }, }, { { 179, 43, 116, 63, 14 }, { 41, 59, 235, 87, 13 }, { 127, 194, 237, 76, 13 }, { 190, 173, 125, 201, 4 }, }, { { 183, 31, 214, 70, 15 }, { 236, 219, 105, 123, 9 }, { 246, 38, 191, 142, 13 }, { 157, 233, 109, 179, 7 }, }, { { 177, 110, 241, 244, 5 }, { 61, 140, 234, 122, 14 }, { 162, 248, 247, 104, 13 }, { 117, 229, 115, 27, 12 }, }, { { 177, 126, 83, 138, 14 }, { 113, 124, 105, 114, 11 }, { 117, 28, 167, 232, 13 }, { 212, 233, 99, 232, 14 }, }, { { 183, 98, 223, 55, 7 }, { 189, 221, 238, 87, 1 }, { 238, 207, 180, 110, 13 }, { 142, 167, 123, 187, 13 }, }, { { 177, 169, 248, 148, 9 }, { 45, 138, 181, 82, 14 }, { 146, 145, 249, 88, 13 }, { 116, 170, 213, 27, 4 }, }, { { 179, 183, 217, 210, 4 }, { 113, 138, 252, 123, 3 }, { 36, 185, 190, 220, 13 }, { 205, 227, 245, 24, 14 }, }, { { 179, 238, 187, 76, 6 }, { 25, 252, 124, 123, 12 }, { 99, 45, 215, 124, 13 }, { 61, 227, 227, 249, 8 }, }, { { 184, 44, 165, 82, 4 }, { 19, 137, 224, 42, 13 }, { 36, 170, 83, 65, 13 }, { 181, 64, 121, 28, 8 }, }, { { 184, 20, 13, 235, 15 }, { 86, 57, 103, 46, 3 }, { 253, 123, 2, 129, 13 }, { 199, 78, 105, 198, 10 }, }, { { 188, 25, 220, 199, 7 }, { 238, 155, 100, 30, 11 }, { 238, 51, 185, 131, 13 }, { 215, 130, 109, 151, 7 }, }, { { 188, 84, 38, 185, 6 }, { 194, 125, 226, 38, 6 }, { 105, 214, 66, 163, 13 }, { 102, 68, 123, 228, 3 }, }, { { 190, 103, 55, 196, 5 }, { 159, 79, 104, 59, 6 }, { 162, 62, 206, 103, 13 }, { 109, 193, 111, 47, 9 }, }, { { 184, 250, 232, 211, 5 }, { 103, 140, 252, 14, 15 }, { 172, 177, 117, 241, 13 }, { 247, 3, 243, 30, 6 }, }, { { 190, 194, 26, 55, 8 }, { 138, 76, 191, 23, 1 }, { 30, 197, 132, 55, 13 }, { 142, 143, 211, 37, 1 }, }, { { 187, 24, 207, 164, 11 }, { 126, 217, 39, 67, 10 }, { 210, 95, 49, 141, 13 }, { 92, 46, 73, 183, 14 }, }, { { 189, 1, 126, 246, 13 }, { 174, 75, 231, 90, 7 }, { 182, 247, 232, 11, 13 }, { 229, 174, 125, 39, 5 }, }, { { 189, 34, 47, 210, 7 }, { 151, 89, 236, 74, 7 }, { 228, 191, 68, 75, 13 }, { 229, 35, 121, 174, 9 }, }, { { 189, 2, 85, 133, 5 }, { 190, 9, 104, 86, 2 }, { 170, 26, 164, 11, 13 }, { 70, 161, 105, 7, 13 }, }, { { 185, 114, 78, 96, 5 }, { 103, 77, 110, 74, 0 }, { 160, 103, 36, 233, 13 }, { 5, 39, 107, 46, 6 }, }, { { 189, 119, 92, 22, 15 }, { 239, 31, 237, 114, 1 }, { 246, 131, 174, 235, 13 }, { 132, 235, 127, 143, 7 }, }, { { 185, 136, 172, 46, 1 }, { 14, 169, 54, 66, 13 }, { 135, 67, 81, 25, 13 }, { 180, 38, 201, 87, 0 }, }, { { 191, 160, 38, 103, 5 }, { 143, 73, 114, 79, 5 }, { 174, 102, 64, 95, 13 }, { 175, 36, 233, 47, 1 }, }, { { 185, 130, 150, 168, 6 }, { 2, 249, 122, 82, 2 }, { 97, 86, 148, 25, 13 }, { 68, 165, 233, 244, 0 }, }, { { 189, 135, 23, 24, 10 }, { 146, 123, 185, 114, 0 }, { 81, 142, 142, 27, 13 }, { 4, 233, 221, 228, 9 }, }, { { 191, 190, 239, 45, 7 }, { 255, 249, 126, 103, 12 }, { 235, 79, 119, 223, 13 }, { 62, 103, 233, 255, 15 }, }, { { 189, 250, 159, 0, 7 }, { 215, 221, 124, 82, 8 }, { 224, 15, 149, 251, 13 }, { 20, 163, 235, 190, 11 }, }, { { 194, 112, 53, 187, 8 }, { 81, 37, 131, 151, 7 }, { 29, 218, 192, 228, 3 }, { 238, 156, 26, 72, 10 }, }, { { 196, 108, 5, 172, 13 }, { 157, 37, 67, 162, 10 }, { 179, 90, 3, 98, 3 }, { 84, 92, 42, 75, 9 }, }, { { 196, 121, 84, 220, 3 }, { 237, 55, 128, 154, 10 }, { 195, 178, 169, 226, 3 }, { 85, 144, 30, 203, 7 }, }, { { 194, 106, 81, 13, 8 }, { 57, 36, 9, 151, 8 }, { 27, 8, 165, 100, 3 }, { 30, 153, 2, 73, 12 }, }, { { 198, 164, 159, 104, 4 }, { 145, 225, 86, 187, 0 }, { 33, 111, 146, 86, 3 }, { 13, 214, 168, 120, 9 }, }, { { 192, 158, 44, 235, 4 }, { 64, 33, 94, 174, 15 }, { 45, 115, 71, 144, 3 }, { 247, 87, 168, 64, 2 }, }, { { 198, 146, 33, 73, 13 }, { 212, 32, 89, 143, 4 }, { 185, 40, 68, 150, 3 }, { 47, 25, 160, 66, 11 }, }, { { 196, 186, 131, 207, 8 }, { 217, 224, 25, 142, 11 }, { 31, 60, 21, 210, 3 }, { 215, 25, 128, 121, 11 }, }, { { 198, 231, 133, 67, 11 }, { 149, 151, 25, 175, 1 }, { 220, 42, 30, 118, 3 }, { 143, 89, 142, 154, 9 }, }, { { 198, 215, 175, 70, 4 }, { 216, 199, 92, 171, 5 }, { 38, 47, 94, 182, 3 }, { 173, 83, 174, 49, 11 }, }, { { 197, 54, 85, 77, 11 }, { 253, 49, 9, 254, 0 }, { 219, 42, 166, 202, 3 }, { 7, 249, 8, 203, 15 }, }, { { 195, 147, 255, 13, 7 }, { 124, 243, 92, 215, 4 }, { 235, 15, 252, 156, 3 }, { 46, 179, 172, 243, 14 }, }, { { 193, 245, 112, 165, 10 }, { 105, 22, 19, 246, 6 }, { 90, 80, 234, 248, 3 }, { 102, 252, 134, 137, 6 }, }, { { 204, 57, 113, 197, 0 }, { 251, 2, 0, 158, 14 }, { 10, 56, 233, 195, 3 }, { 119, 144, 4, 13, 15 }, }, { { 200, 2, 137, 73, 2 }, { 18, 176, 12, 142, 0 }, { 73, 41, 20, 1, 3 }, { 7, 19, 0, 212, 8 }, }, { { 200, 124, 100, 74, 5 }, { 103, 37, 64, 170, 13 }, { 165, 34, 99, 225, 3 }, { 181, 80, 42, 78, 6 }, }, { { 202, 103, 225, 13, 7 }, { 63, 182, 72, 167, 4 }, { 235, 8, 126, 101, 3 }, { 46, 81, 38, 223, 12 }, }, { { 200, 153, 231, 66, 2 }, { 114, 211, 16, 138, 13 }, { 68, 46, 121, 145, 3 }, { 181, 16, 140, 180, 14 }, }, { { 200, 170, 178, 16, 5 }, { 7, 192, 216, 146, 12 }, { 160, 132, 213, 81, 3 }, { 52, 145, 176, 62, 0 }, }, { { 204, 166, 213, 159, 3 }, { 191, 177, 152, 182, 3 }, { 207, 154, 182, 83, 3 }, { 198, 209, 152, 223, 13 }, }, { { 202, 229, 134, 251, 14 }, { 3, 247, 211, 175, 3 }, { 125, 246, 26, 117, 3 }, { 207, 92, 190, 252, 0 }, }, { { 202, 217, 124, 49, 15 }, { 102, 23, 215, 151, 12 }, { 248, 195, 233, 181, 3 }, { 62, 158, 190, 134, 6 }, }, { { 206, 228, 202, 14, 6 }, { 171, 244, 84, 163, 1 }, { 103, 5, 50, 119, 3 }, { 140, 82, 162, 253, 5 }, }, { { 203, 45, 164, 50, 12 }, { 3, 131, 195, 227, 13 }, { 52, 194, 91, 77, 3 }, { 188, 124, 60, 28, 0 }, }, { { 203, 87, 214, 130, 2 }, { 98, 215, 8, 243, 3 }, { 68, 22, 190, 173, 3 }, { 204, 241, 14, 180, 6 }, }, { { 201, 144, 33, 177, 0 }, { 82, 0, 146, 198, 6 }, { 8, 216, 64, 153, 3 }, { 102, 52, 144, 4, 10 }, }, { { 201, 130, 95, 176, 10 }, { 50, 81, 159, 210, 2 }, { 80, 223, 164, 25, 3 }, { 68, 191, 152, 164, 12 }, }, { { 203, 158, 212, 36, 7 }, { 110, 145, 90, 243, 8 }, { 226, 66, 183, 157, 3 }, { 28, 245, 168, 151, 6 }, }, { { 205, 134, 171, 157, 13 }, { 158, 224, 221, 230, 6 }, { 187, 157, 86, 27, 3 }, { 102, 123, 176, 119, 9 }, }, { { 201, 201, 176, 119, 5 }, { 14, 134, 210, 222, 13 }, { 174, 224, 217, 57, 3 }, { 183, 180, 182, 23, 0 }, }, { { 201, 250, 31, 99, 2 }, { 83, 85, 30, 222, 9 }, { 76, 111, 133, 249, 3 }, { 151, 183, 138, 172, 10 }, }, { { 203, 247, 64, 6, 9 }, { 111, 6, 25, 227, 1 }, { 150, 0, 46, 253, 3 }, { 140, 121, 134, 15, 6 }, }, { { 205, 218, 13, 28, 15 }, { 222, 53, 221, 194, 8 }, { 243, 139, 5, 187, 3 }, { 20, 59, 186, 199, 11 }, }, { { 208, 11, 130, 83, 15 }, { 4, 218, 201, 142, 9 }, { 252, 164, 29, 0, 11 }, { 151, 25, 53, 178, 0 }, }, { { 212, 59, 207, 214, 15 }, { 253, 219, 205, 138, 11 }, { 246, 191, 61, 194, 11 }, { 213, 27, 61, 187, 15 }, }, { { 214, 98, 171, 209, 11 }, { 149, 220, 141, 143, 6 }, { 216, 189, 84, 102, 11 }, { 111, 27, 19, 186, 9 }, }, { { 212, 102, 200, 58, 15 }, { 165, 188, 207, 162, 1 }, { 245, 193, 54, 98, 11 }, { 132, 95, 51, 218, 5 }, }, { { 209, 32, 28, 120, 10 }, { 1, 57, 135, 218, 0 }, { 81, 227, 128, 72, 11 }, { 5, 190, 25, 200, 0 }, }, { { 211, 57, 65, 195, 9 }, { 117, 10, 1, 207, 11 }, { 156, 56, 41, 204, 11 }, { 223, 56, 5, 10, 14 }, }, { { 209, 7, 160, 253, 4 }, { 8, 170, 202, 238, 6 }, { 43, 240, 94, 8, 11 }, { 103, 117, 53, 81, 0 }, }, { { 209, 149, 58, 14, 2 }, { 72, 122, 20, 242, 5 }, { 71, 5, 202, 152, 11 }, { 164, 242, 133, 225, 2 }, }, { { 215, 189, 66, 29, 13 }, { 237, 106, 209, 231, 8 }, { 187, 132, 43, 222, 11 }, { 30, 120, 181, 107, 7 }, }, { { 215, 192, 166, 80, 13 }, { 132, 205, 209, 203, 4 }, { 176, 166, 80, 62, 11 }, { 45, 56, 187, 50, 1 }, }, { { 215, 229, 141, 245, 12 }, { 153, 143, 215, 239, 2 }, { 58, 251, 26, 126, 11 }, { 79, 126, 191, 25, 9 }, }, { { 215, 197, 83, 246, 7 }, { 188, 94, 210, 251, 3 }, { 230, 252, 170, 62, 11 }, { 205, 244, 183, 163, 13 }, }, { { 213, 254, 112, 184, 8 }, { 225, 44, 155, 242, 14 }, { 17, 208, 231, 250, 11 }, { 116, 253, 147, 72, 7 }, }, { { 216, 12, 185, 190, 6 }, { 26, 184, 198, 178, 15 }, { 103, 217, 211, 1, 11 }, { 244, 214, 49, 213, 8 }, }, { { 222, 52, 186, 37, 6 }, { 203, 216, 70, 183, 4 }, { 106, 69, 210, 199, 11 }, { 46, 214, 33, 189, 3 }, }, { { 220, 14, 198, 139, 14 }, { 162, 249, 73, 166, 11 }, { 125, 22, 55, 3, 11 }, { 214, 89, 41, 244, 5 }, }, { { 222, 3, 247, 164, 11 }, { 190, 219, 11, 147, 6 }, { 210, 94, 252, 7, 11 }, { 108, 157, 13, 183, 13 }, }, { { 218, 93, 11, 138, 2 }, { 82, 126, 4, 163, 11 }, { 69, 29, 11, 165, 11 }, { 220, 82, 7, 228, 10 }, }, { { 216, 113, 249, 127, 15 }, { 127, 190, 199, 158, 5 }, { 255, 233, 248, 225, 11 }, { 167, 158, 55, 223, 14 }, }, { { 220, 189, 130, 231, 2 }, { 203, 218, 18, 174, 11 }, { 78, 116, 27, 211, 11 }, { 215, 84, 133, 189, 3 }, }, { { 220, 176, 90, 229, 5 }, { 239, 72, 86, 158, 2 }, { 170, 117, 160, 211, 11 }, { 71, 150, 161, 47, 7 }, }, { { 218, 147, 222, 80, 0 }, { 98, 203, 156, 155, 0 }, { 0, 167, 188, 149, 11 }, { 13, 147, 157, 52, 6 }, }, { { 218, 183, 241, 191, 8 }, { 123, 170, 155, 183, 7 }, { 31, 216, 254, 213, 11 }, { 238, 221, 149, 93, 14 }, }, { { 222, 159, 2, 50, 14 }, { 194, 90, 219, 163, 9 }, { 116, 196, 15, 151, 11 }, { 156, 93, 181, 164, 3 }, }, { { 218, 196, 13, 85, 0 }, { 26, 13, 148, 175, 0 }, { 10, 171, 2, 53, 11 }, { 15, 82, 155, 5, 8 }, }, { { 220, 197, 171, 128, 14 }, { 146, 222, 85, 162, 6 }, { 112, 29, 90, 51, 11 }, { 100, 90, 167, 180, 9 }, }, { { 218, 194, 178, 58, 10 }, { 2, 252, 155, 147, 5 }, { 85, 196, 212, 53, 11 }, { 172, 157, 147, 244, 0 }, }, { { 218, 218, 88, 253, 0 }, { 106, 44, 158, 159, 10 }, { 11, 241, 165, 181, 11 }, { 95, 151, 147, 69, 6 }, }, { { 217, 37, 142, 168, 1 }, { 7, 235, 6, 226, 2 }, { 129, 87, 26, 73, 11 }, { 68, 118, 13, 126, 0 }, }, { { 221, 5, 118, 59, 14 }, { 162, 123, 195, 246, 5 }, { 125, 198, 234, 11, 11 }, { 166, 252, 61, 228, 5 }, }, { { 221, 46, 153, 8, 12 }, { 147, 168, 77, 242, 8 }, { 49, 9, 151, 75, 11 }, { 20, 251, 33, 92, 9 }, }, { { 217, 85, 104, 199, 5 }, { 110, 14, 68, 238, 7 }, { 174, 49, 106, 169, 11 }, { 231, 114, 39, 7, 6 }, }, { { 219, 80, 109, 76, 3 }, { 126, 61, 4, 203, 4 }, { 195, 43, 96, 173, 11 }, { 45, 50, 11, 199, 14 }, }, { { 223, 104, 170, 56, 8 }, { 131, 236, 135, 195, 12 }, { 17, 197, 81, 111, 11 }, { 60, 62, 19, 124, 1 }, }, { { 219, 66, 135, 167, 5 }, { 30, 205, 74, 199, 3 }, { 174, 94, 20, 45, 11 }, { 206, 53, 43, 55, 8 }, }, { { 219, 129, 40, 179, 13 }, { 6, 10, 215, 199, 7 }, { 188, 209, 72, 29, 11 }, { 238, 62, 181, 6, 0 }, }, { { 217, 163, 194, 250, 13 }, { 39, 234, 219, 202, 3 }, { 181, 244, 60, 89, 11 }, { 197, 61, 181, 126, 4 }, }, { { 221, 179, 56, 211, 8 }, { 195, 10, 157, 222, 7 }, { 28, 177, 204, 219, 11 }, { 231, 187, 149, 12, 3 }, }, { { 217, 202, 123, 155, 1 }, { 54, 108, 156, 214, 15 }, { 141, 157, 229, 57, 11 }, { 246, 179, 147, 102, 12 }, }, { { 219, 246, 158, 176, 7 }, { 71, 221, 222, 243, 2 }, { 224, 215, 150, 253, 11 }, { 76, 247, 187, 190, 2 }, }, { { 226, 8, 108, 175, 8 }, { 40, 33, 39, 135, 15 }, { 31, 83, 97, 4, 7 }, { 254, 30, 72, 65, 4 }, }, { { 224, 27, 171, 150, 4 }, { 88, 194, 236, 130, 15 }, { 38, 157, 93, 128, 7 }, { 244, 19, 116, 49, 10 }, }, { { 224, 72, 115, 243, 0 }, { 48, 68, 162, 158, 15 }, { 12, 252, 225, 32, 7 }, { 247, 148, 82, 32, 12 }, }, { { 228, 117, 169, 91, 14 }, { 209, 182, 229, 174, 5 }, { 125, 169, 90, 226, 7 }, { 167, 90, 118, 216, 11 }, }, { { 230, 128, 236, 116, 9 }, { 172, 129, 183, 139, 4 }, { 146, 227, 112, 22, 7 }, { 45, 30, 216, 19, 5 }, }, { { 226, 175, 118, 72, 7 }, { 37, 115, 120, 187, 12 }, { 225, 38, 239, 84, 7 }, { 61, 209, 236, 234, 4 }, }, { { 224, 162, 200, 17, 13 }, { 37, 128, 253, 134, 0 }, { 184, 129, 52, 80, 7 }, { 6, 27, 240, 26, 4 }, }, { { 226, 203, 113, 80, 12 }, { 48, 6, 249, 155, 12 }, { 48, 168, 237, 52, 7 }, { 61, 153, 246, 0, 12 }, }, { { 224, 210, 73, 197, 15 }, { 124, 20, 125, 142, 2 }, { 250, 57, 36, 176, 7 }, { 71, 27, 226, 131, 14 }, }, { { 225, 12, 194, 130, 9 }, { 36, 192, 33, 226, 11 }, { 148, 20, 51, 8, 7 }, { 212, 120, 64, 50, 4 }, }, { { 225, 127, 68, 52, 3 }, { 109, 23, 170, 226, 8 }, { 194, 194, 47, 232, 7 }, { 20, 117, 94, 139, 6 }, }, { { 231, 173, 69, 177, 14 }, { 177, 19, 243, 231, 10 }, { 120, 218, 43, 94, 7 }, { 94, 124, 252, 136, 13 }, }, { { 225, 182, 90, 159, 9 }, { 109, 96, 189, 246, 3 }, { 159, 149, 166, 216, 7 }, { 198, 251, 208, 107, 6 }, }, { { 231, 252, 32, 65, 12 }, { 193, 4, 113, 239, 12 }, { 56, 32, 67, 254, 7 }, { 63, 120, 226, 8, 3 }, }, { { 238, 51, 65, 56, 1 }, { 247, 34, 170, 131, 0 }, { 129, 200, 44, 199, 7 }, { 12, 21, 84, 78, 15 }, }, { { 238, 124, 54, 51, 4 }, { 195, 69, 226, 183, 13 }, { 44, 198, 195, 231, 7 }, { 190, 212, 122, 44, 3 }, }, { { 236, 112, 123, 248, 10 }, { 243, 116, 167, 154, 6 }, { 81, 253, 224, 227, 7 }, { 101, 158, 82, 236, 15 }, }, { { 232, 123, 59, 230, 14 }, { 91, 86, 111, 154, 15 }, { 118, 125, 205, 225, 7 }, { 245, 159, 102, 173, 10 }, }, { { 232, 149, 232, 57, 1 }, { 102, 162, 182, 166, 4 }, { 137, 193, 122, 145, 7 }, { 38, 86, 212, 86, 6 }, }, { { 238, 172, 9, 125, 5 }, { 159, 32, 246, 175, 8 }, { 171, 233, 3, 87, 7 }, { 31, 86, 240, 79, 9 }, }, { { 236, 161, 201, 55, 4 }, { 187, 130, 246, 134, 1 }, { 46, 201, 56, 83, 7 }, { 134, 22, 244, 29, 13 }, }, { { 232, 151, 189, 197, 5 }, { 94, 131, 124, 190, 6 }, { 170, 59, 222, 145, 7 }, { 103, 211, 236, 23, 10 }, }, { { 232, 204, 18, 29, 0 }, { 10, 100, 176, 182, 8 }, { 11, 132, 131, 49, 7 }, { 22, 208, 210, 101, 0 }, }, { { 238, 193, 29, 105, 8 }, { 146, 39, 55, 159, 0 }, { 25, 107, 136, 55, 7 }, { 15, 158, 206, 68, 9 }, }, { { 237, 7, 255, 219, 10 }, { 178, 243, 173, 254, 7 }, { 93, 191, 254, 11, 7 }, { 231, 251, 92, 244, 13 }, }, { { 237, 105, 243, 54, 11 }, { 191, 214, 163, 210, 13 }, { 214, 204, 249, 107, 7 }, { 180, 188, 86, 191, 13 }, }, { { 237, 118, 20, 181, 12 }, { 203, 5, 235, 246, 2 }, { 58, 210, 134, 235, 7 }, { 70, 253, 122, 13, 3 }, }, { { 239, 132, 33, 209, 7 }, { 150, 16, 240, 239, 6 }, { 232, 184, 66, 31, 7 }, { 111, 112, 240, 134, 9 }, }, { { 235, 245, 218, 120, 2 }, { 99, 246, 182, 251, 0 }, { 65, 229, 186, 253, 7 }, { 13, 246, 214, 252, 6 }, }, { { 233, 249, 229, 214, 13 }, { 127, 135, 241, 202, 15 }, { 182, 186, 121, 249, 7 }, { 245, 56, 254, 31, 14 }, }, { { 235, 211, 15, 145, 9 }, { 86, 71, 189, 199, 2 }, { 152, 159, 12, 189, 7 }, { 78, 59, 222, 38, 10 }, }, { { 233, 219, 241, 32, 9 }, { 118, 134, 59, 210, 12 }, { 144, 72, 253, 185, 7 }, { 52, 189, 198, 22, 14 }, }, { { 244, 41, 139, 109, 8 }, { 153, 234, 39, 142, 8 }, { 27, 109, 25, 66, 15 }, { 23, 30, 69, 121, 9 }, }, { { 246, 10, 52, 34, 5 }, { 132, 9, 106, 147, 13 }, { 164, 66, 197, 6, 15 }, { 188, 149, 105, 2, 1 }, }, { { 244, 88, 85, 155, 1 }, { 244, 45, 160, 150, 11 }, { 141, 154, 161, 162, 15 }, { 214, 144, 91, 66, 15 }, }, { { 242, 118, 55, 97, 3 }, { 85, 93, 42, 191, 4 }, { 200, 110, 198, 228, 15 }, { 47, 213, 75, 170, 10 }, }, { { 244, 75, 10, 224, 6 }, { 128, 94, 110, 138, 10 }, { 96, 117, 13, 34, 15 }, { 85, 23, 103, 160, 1 }, }, { { 246, 110, 129, 75, 12 }, { 145, 172, 105, 175, 9 }, { 61, 40, 23, 102, 15 }, { 159, 89, 99, 88, 9 }, }, { { 246, 67, 29, 76, 6 }, { 152, 63, 108, 155, 0 }, { 99, 43, 140, 38, 15 }, { 13, 147, 111, 193, 9 }, }, { { 244, 87, 34, 238, 1 }, { 204, 110, 42, 170, 7 }, { 135, 116, 78, 162, 15 }, { 229, 85, 71, 99, 3 }, }, { { 244, 153, 83, 229, 11 }, { 252, 90, 51, 158, 10 }, { 218, 124, 169, 146, 15 }, { 87, 156, 197, 163, 15 }, }, { { 240, 252, 47, 27, 5 }, { 85, 109, 244, 166, 13 }, { 173, 143, 67, 240, 15 }, { 182, 82, 251, 106, 10 }, }, { { 247, 9, 30, 9, 12 }, { 128, 107, 101, 215, 8 }, { 57, 7, 137, 14, 15 }, { 30, 186, 109, 96, 1 }, }, { { 247, 38, 87, 194, 0 }, { 177, 73, 40, 251, 3 }, { 4, 62, 166, 78, 15 }, { 205, 241, 73, 40, 13 }, }, { { 241, 133, 27, 198, 13 }, { 28, 74, 117, 250, 3 }, { 182, 61, 138, 24, 15 }, { 197, 250, 229, 35, 8 }, }, { { 243, 136, 98, 232, 1 }, { 36, 104, 50, 203, 14 }, { 129, 116, 97, 28, 15 }, { 125, 52, 193, 98, 4 }, }, { { 247, 169, 183, 234, 6 }, { 145, 251, 114, 219, 15 }, { 101, 126, 217, 94, 15 }, { 253, 180, 237, 248, 9 }, }, { { 247, 138, 138, 92, 2 }, { 136, 248, 188, 203, 8 }, { 67, 165, 21, 30, 15 }, { 29, 51, 209, 241, 1 }, }, { { 243, 237, 194, 21, 2 }, { 41, 222, 176, 231, 8 }, { 74, 132, 59, 124, 15 }, { 30, 112, 215, 185, 4 }, }, { { 245, 245, 148, 242, 4 }, { 193, 143, 242, 250, 3 }, { 36, 242, 154, 250, 15 }, { 197, 244, 255, 24, 3 }, }, { { 248, 15, 62, 15, 4 }, { 10, 107, 108, 182, 13 }, { 47, 7, 207, 1, 15 }, { 182, 211, 109, 101, 0 }, }, { { 252, 190, 99, 125, 14 }, { 251, 120, 251, 174, 12 }, { 123, 236, 103, 211, 15 }, { 55, 93, 241, 237, 15 }, }, { { 248, 237, 33, 73, 11 }, { 23, 62, 49, 174, 12 }, { 217, 40, 75, 113, 15 }, { 55, 88, 199, 206, 8 }, }, { { 250, 216, 194, 128, 14 }, { 98, 220, 113, 131, 10 }, { 112, 20, 49, 181, 15 }, { 92, 24, 227, 180, 6 }, }, { { 254, 229, 5, 156, 6 }, { 155, 63, 240, 163, 2 }, { 99, 154, 10, 119, 15 }, { 76, 80, 255, 205, 9 }, }, { { 254, 196, 253, 27, 8 }, { 178, 173, 181, 183, 5 }, { 29, 139, 242, 55, 15 }, { 174, 218, 219, 84, 13 }, }, { { 250, 210, 225, 31, 4 }, { 122, 172, 248, 135, 5 }, { 47, 136, 116, 181, 15 }, { 174, 17, 243, 85, 14 }, }, { { 252, 195, 230, 115, 2 }, { 162, 223, 186, 142, 5 }, { 76, 230, 124, 51, 15 }, { 167, 21, 223, 180, 5 }, }, { { 249, 63, 162, 110, 11 }, { 79, 250, 43, 234, 13 }, { 215, 100, 95, 201, 15 }, { 181, 125, 69, 255, 2 }, }, { { 251, 86, 194, 94, 3 }, { 110, 252, 168, 235, 1 }, { 199, 164, 54, 173, 15 }, { 141, 113, 83, 247, 6 }, }, { { 255, 78, 140, 162, 15 }, { 134, 157, 111, 227, 11 }, { 244, 83, 23, 47, 15 }, { 220, 127, 107, 150, 1 }, }, { { 255, 79, 112, 226, 4 }, { 162, 14, 106, 251, 15 }, { 36, 112, 239, 47, 15 }, { 253, 245, 103, 4, 5 }, }, { { 249, 177, 42, 52, 9 }, { 79, 74, 183, 194, 4 }, { 146, 197, 72, 217, 15 }, { 36, 62, 213, 47, 2 }, }, { { 255, 135, 146, 120, 1 }, { 134, 234, 186, 251, 0 }, { 129, 228, 158, 31, 15 }, { 13, 245, 213, 118, 1 }, }, { { 249, 195, 188, 9, 10 }, { 2, 191, 61, 214, 4 }, { 89, 3, 220, 57, 15 }, { 38, 187, 207, 212, 0 }, }, { { 255, 202, 25, 209, 12 }, { 146, 12, 253, 223, 10 }, { 56, 185, 133, 63, 15 }, { 95, 187, 243, 4, 9 }, }, { { 255, 239, 23, 165, 10 }, { 155, 95, 59, 247, 10 }, { 90, 94, 143, 127, 15 }, { 94, 253, 207, 173, 9 }, }, { { 253, 254, 218, 140, 1 }, { 239, 236, 60, 242, 10 }, { 131, 21, 183, 251, 15 }, { 84, 243, 195, 127, 7 }, }, { { 6, 66, 233, 9, 7 }, { 180, 180, 76, 5, 4 }, { 233, 9, 116, 38, 0 }, { 42, 3, 34, 210, 13 }, }, { { 3, 36, 36, 70, 13 }, { 13, 1, 65, 105, 5 }, { 182, 34, 66, 76, 0 }, { 169, 104, 40, 11, 0 }, }, { { 7, 94, 92, 135, 12 }, { 232, 5, 77, 117, 11 }, { 62, 19, 167, 174, 0 }, { 218, 235, 42, 1, 7 }, }, { { 7, 136, 66, 250, 6 }, { 160, 112, 210, 73, 11 }, { 101, 244, 33, 30, 0 }, { 217, 36, 176, 224, 5 }, }, { { 10, 7, 178, 27, 11 }, { 6, 242, 137, 53, 5 }, { 221, 132, 222, 5, 0 }, { 170, 201, 20, 246, 0 }, }, { { 16, 148, 220, 241, 14 }, { 96, 153, 215, 60, 2 }, { 120, 243, 178, 144, 8 }, { 67, 206, 185, 144, 6 }, }, { { 22, 162, 90, 176, 15 }, { 165, 88, 223, 17, 2 }, { 240, 213, 164, 86, 8 }, { 72, 143, 177, 170, 5 }, }, { { 16, 253, 203, 109, 14 }, { 121, 254, 87, 44, 8 }, { 123, 109, 59, 240, 8 }, { 19, 78, 167, 249, 14 }, }, { { 17, 52, 172, 162, 12 }, { 65, 137, 71, 96, 7 }, { 52, 83, 82, 200, 8 }, { 224, 110, 41, 24, 2 }, }, { { 17, 166, 62, 16, 1 }, { 5, 73, 156, 112, 4 }, { 128, 135, 198, 88, 8 }, { 32, 227, 153, 42, 0 }, }, { { 30, 88, 44, 226, 2 }, { 194, 29, 6, 9, 15 }, { 68, 115, 65, 167, 8 }, { 249, 6, 11, 132, 3 }, }, { { 24, 99, 58, 139, 0 }, { 3, 110, 12, 20, 7 }, { 13, 21, 204, 97, 8 }, { 226, 131, 7, 108, 0 }, }, { { 26, 99, 1, 47, 13 }, { 31, 46, 75, 5, 1 }, { 191, 72, 12, 101, 8 }, { 138, 13, 39, 79, 8 }, }, { { 26, 241, 71, 206, 15 }, { 127, 127, 81, 9, 3 }, { 247, 62, 40, 245, 8 }, { 201, 8, 175, 239, 14 }, }, { { 25, 108, 177, 139, 1 }, { 23, 172, 0, 116, 15 }, { 141, 24, 211, 105, 8 }, { 242, 224, 3, 94, 8 }, }, { { 29, 149, 207, 92, 12 }, { 250, 235, 213, 104, 0 }, { 51, 175, 58, 155, 8 }, { 1, 106, 189, 117, 15 }, }, { { 25, 158, 56, 146, 2 }, { 66, 24, 156, 112, 15 }, { 68, 145, 199, 153, 8 }, { 240, 227, 145, 132, 2 }, }, { { 31, 252, 86, 35, 10 }, { 227, 93, 19, 117, 9 }, { 92, 70, 163, 255, 8 }, { 154, 236, 139, 172, 7 }, }, { { 36, 27, 41, 179, 3 }, { 212, 18, 174, 4, 15 }, { 204, 217, 77, 130, 4 }, { 242, 7, 84, 130, 11 }, }, { { 38, 231, 136, 133, 0 }, { 137, 134, 60, 37, 2 }, { 10, 17, 30, 118, 4 }, { 74, 67, 198, 25, 1 }, }, { { 33, 7, 54, 188, 1 }, { 12, 99, 170, 112, 6 }, { 131, 214, 206, 8, 4 }, { 96, 229, 92, 99, 0 }, }, { { 40, 77, 70, 86, 10 }, { 42, 87, 161, 40, 9 }, { 86, 166, 43, 33, 4 }, { 145, 72, 94, 165, 4 }, }, { { 46, 236, 227, 69, 8 }, { 187, 196, 49, 45, 12 }, { 26, 44, 115, 119, 4 }, { 59, 72, 194, 61, 13 }, }, { { 45, 79, 225, 77, 4 }, { 186, 166, 104, 108, 12 }, { 43, 40, 127, 43, 4 }, { 51, 97, 102, 85, 13 }, }, { { 45, 138, 40, 60, 7 }, { 142, 48, 254, 64, 12 }, { 227, 193, 69, 27, 4 }, { 48, 39, 240, 199, 1 }, }, { { 52, 248, 62, 55, 1 }, { 205, 77, 182, 20, 13 }, { 142, 199, 193, 242, 12 }, { 178, 134, 219, 43, 3 }, }, { { 56, 99, 93, 125, 8 }, { 59, 47, 175, 28, 0 }, { 27, 235, 172, 97, 12 }, { 3, 143, 95, 77, 12 }, }, { { 63, 162, 28, 196, 12 }, { 139, 9, 125, 89, 2 }, { 50, 51, 132, 95, 12 }, { 73, 171, 233, 13, 1 }, }, { { 66, 221, 151, 174, 14 }, { 88, 247, 83, 177, 11 }, { 119, 94, 155, 180, 2 }, { 216, 220, 174, 241, 10 }, }, { { 68, 223, 18, 214, 11 }, { 204, 86, 153, 184, 11 }, { 214, 180, 143, 178, 2 }, { 209, 217, 150, 163, 3 }, }, { { 65, 58, 205, 236, 8 }, { 121, 161, 15, 200, 10 }, { 19, 123, 53, 200, 2 }, { 81, 63, 8, 89, 14 }, }, { { 65, 192, 219, 73, 4 }, { 48, 228, 84, 220, 0 }, { 41, 45, 176, 56, 2 }, { 3, 178, 162, 112, 12 }, }, { { 76, 180, 0, 200, 13 }, { 199, 32, 81, 168, 2 }, { 177, 48, 2, 211, 2 }, { 65, 88, 160, 78, 3 }, }, { { 73, 35, 72, 149, 2 }, { 43, 18, 140, 196, 2 }, { 74, 145, 44, 73, 2 }, { 66, 51, 20, 141, 4 }, }, { { 82, 55, 185, 92, 6 }, { 89, 186, 204, 185, 4 }, { 99, 169, 222, 196, 10 }, { 41, 211, 53, 217, 10 }, }, { { 82, 81, 56, 221, 10 }, { 72, 62, 133, 157, 6 }, { 91, 177, 200, 164, 10 }, { 107, 154, 23, 193, 2 }, }, { { 94, 113, 146, 65, 3 }, { 199, 222, 0, 157, 0 }, { 200, 36, 152, 231, 10 }, { 11, 144, 7, 190, 3 }, }, { { 92, 178, 113, 235, 13 }, { 247, 40, 91, 156, 7 }, { 189, 120, 228, 211, 10 }, { 227, 157, 161, 78, 15 }, }, { { 91, 238, 55, 54, 6 }, { 27, 93, 218, 241, 13 }, { 102, 206, 199, 125, 10 }, { 184, 245, 187, 173, 8 }, }, { { 96, 5, 132, 21, 2 }, { 8, 147, 160, 164, 0 }, { 74, 130, 26, 0, 6 }, { 2, 80, 92, 145, 0 }, }, { { 100, 8, 128, 51, 8 }, { 128, 128, 163, 132, 9 }, { 28, 192, 17, 2, 6 }, { 146, 28, 80, 16, 1 }, }, { { 110, 40, 135, 140, 3 }, { 159, 241, 32, 129, 10 }, { 195, 30, 17, 71, 6 }, { 88, 16, 72, 255, 9 }, }, { { 108, 85, 84, 181, 7 }, { 238, 23, 226, 180, 2 }, { 234, 210, 170, 163, 6 }, { 66, 212, 126, 135, 7 }, }, { { 104, 186, 254, 70, 1 }, { 111, 193, 60, 152, 13 }, { 134, 39, 245, 209, 6 }, { 177, 147, 200, 63, 6 }, }, { { 104, 179, 85, 202, 7 }, { 119, 51, 120, 152, 3 }, { 229, 58, 172, 209, 6 }, { 193, 145, 236, 206, 14 }, }, { { 117, 156, 155, 102, 9 }, { 220, 200, 55, 248, 9 }, { 150, 109, 147, 154, 14 }, { 145, 254, 193, 51, 11 }, }, { { 124, 11, 200, 10, 0 }, { 162, 170, 44, 128, 9 }, { 5, 1, 61, 3, 14 }, { 144, 19, 69, 84, 5 }, }, { { 126, 89, 104, 196, 9 }, { 238, 14, 37, 137, 14 }, { 146, 49, 105, 167, 14 }, { 121, 26, 71, 7, 7 }, }, { { 120, 111, 61, 52, 5 }, { 31, 15, 238, 176, 12 }, { 162, 203, 207, 97, 14 }, { 48, 215, 127, 15, 8 }, }, { { 120, 193, 191, 255, 10 }, { 26, 255, 183, 156, 7 }, { 95, 255, 216, 49, 14 }, { 227, 158, 223, 245, 8 }, }, { { 122, 218, 185, 69, 10 }, { 90, 156, 61, 157, 12 }, { 90, 41, 213, 181, 14 }, { 59, 155, 195, 149, 10 }, }, { { 128, 60, 123, 156, 0 }, { 121, 96, 132, 50, 14 }, { 3, 157, 227, 192, 1 }, { 116, 194, 16, 105, 14 }, }, { { 135, 20, 88, 249, 7 }, { 228, 48, 198, 127, 2 }, { 233, 241, 162, 142, 1 }, { 79, 230, 48, 194, 7 }, }, { { 131, 27, 5, 165, 13 }, { 92, 3, 75, 71, 10 }, { 186, 90, 13, 140, 1 }, { 94, 45, 44, 3, 10 }, }, { { 136, 59, 180, 103, 4 }, { 75, 131, 74, 30, 13 }, { 46, 98, 221, 193, 1 }, { 183, 133, 44, 29, 2 }, }, { { 140, 169, 136, 156, 0 }, { 139, 162, 148, 2, 10 }, { 3, 145, 25, 83, 1 }, { 84, 2, 148, 93, 1 }, }, { { 142, 177, 3, 26, 11 }, { 215, 114, 145, 3, 1 }, { 213, 140, 8, 215, 1 }, { 140, 8, 148, 238, 11 }, }, { { 143, 39, 191, 54, 4 }, { 155, 195, 206, 115, 5 }, { 38, 207, 222, 79, 1 }, { 172, 231, 60, 61, 9 }, }, { { 143, 22, 179, 202, 0 }, { 210, 224, 8, 123, 7 }, { 5, 60, 214, 143, 1 }, { 237, 225, 0, 116, 11 }, }, { { 148, 24, 222, 74, 0 }, { 224, 233, 4, 26, 9 }, { 5, 39, 177, 130, 9 }, { 149, 130, 9, 112, 7 }, }, { { 147, 69, 36, 197, 0 }, { 8, 15, 0, 111, 6 }, { 10, 50, 74, 44, 9 }, { 111, 96, 15, 1, 0 }, }, { { 156, 253, 156, 216, 5 }, { 199, 175, 212, 58, 10 }, { 161, 179, 155, 243, 9 }, { 85, 194, 191, 94, 3 }, }, { { 155, 34, 55, 120, 13 }, { 23, 105, 203, 91, 4 }, { 177, 238, 196, 77, 9 }, { 45, 173, 57, 110, 8 }, }, { { 153, 250, 163, 209, 6 }, { 83, 220, 216, 78, 14 }, { 104, 188, 85, 249, 9 }, { 119, 33, 179, 188, 10 }, }, { { 162, 159, 28, 84, 3 }, { 76, 19, 188, 59, 8 }, { 194, 163, 143, 148, 5 }, { 29, 195, 220, 131, 2 }, }, { { 172, 79, 91, 26, 11 }, { 182, 118, 173, 50, 9 }, { 213, 141, 175, 35, 5 }, { 148, 203, 86, 230, 13 }, }, { { 172, 191, 109, 54, 6 }, { 251, 19, 254, 34, 13 }, { 102, 203, 111, 211, 5 }, { 180, 71, 252, 141, 15 }, }, { { 169, 185, 76, 64, 8 }, { 99, 3, 53, 74, 8 }, { 16, 35, 41, 217, 5 }, { 21, 42, 204, 12, 6 }, }, { { 182, 40, 233, 2, 12 }, { 177, 136, 101, 3, 13 }, { 52, 9, 113, 70, 13 }, { 188, 10, 97, 24, 13 }, }, { { 180, 109, 218, 222, 0 }, { 169, 238, 164, 58, 11 }, { 7, 181, 187, 98, 13 }, { 213, 194, 87, 121, 5 }, }, { { 178, 110, 246, 10, 1 }, { 37, 237, 40, 51, 13 }, { 133, 6, 247, 100, 13 }, { 188, 193, 75, 122, 4 }, }, { { 179, 37, 153, 105, 14 }, { 17, 186, 103, 127, 0 }, { 121, 105, 154, 76, 13 }, { 15, 238, 101, 216, 8 }, }, { { 179, 80, 40, 17, 5 }, { 68, 12, 228, 71, 4 }, { 168, 129, 64, 172, 13 }, { 46, 34, 115, 2, 2 }, }, { { 190, 28, 27, 59, 6 }, { 210, 120, 230, 55, 9 }, { 109, 205, 131, 135, 13 }, { 158, 198, 113, 228, 11 }, }, { { 188, 127, 85, 99, 14 }, { 243, 31, 107, 62, 9 }, { 124, 106, 175, 227, 13 }, { 151, 205, 111, 140, 15 }, }, { { 188, 175, 230, 141, 5 }, { 175, 235, 120, 38, 14 }, { 171, 22, 127, 83, 13 }, { 118, 65, 237, 127, 5 }, }, { { 189, 37, 146, 140, 4 }, { 139, 234, 96, 114, 2 }, { 35, 20, 154, 75, 13 }, { 68, 224, 101, 125, 1 }, }, { { 196, 27, 214, 183, 1 }, { 236, 195, 138, 150, 11 }, { 142, 214, 189, 130, 3 }, { 214, 149, 28, 51, 7 }, }, { { 198, 99, 190, 252, 14 }, { 137, 247, 207, 155, 6 }, { 115, 247, 220, 102, 3 }, { 109, 159, 62, 249, 1 }, }, { { 198, 86, 130, 19, 13 }, { 196, 196, 201, 167, 1 }, { 188, 132, 22, 166, 3 }, { 142, 89, 50, 50, 3 }, }, { { 198, 139, 73, 36, 10 }, { 184, 18, 31, 131, 8 }, { 82, 73, 45, 22, 3 }, { 28, 31, 132, 129, 13 }, }, { { 193, 61, 206, 190, 2 }, { 105, 243, 134, 226, 11 }, { 71, 215, 59, 200, 3 }, { 212, 118, 28, 249, 6 }, }, { { 197, 25, 109, 109, 1 }, { 252, 35, 6, 206, 12 }, { 139, 107, 105, 138, 3 }, { 55, 54, 12, 67, 15 }, }, { { 199, 77, 61, 239, 11 }, { 156, 55, 7, 255, 15 }, { 223, 123, 203, 46, 3 }, { 255, 254, 14, 195, 9 }, }, { { 193, 90, 43, 220, 9 }, { 92, 100, 141, 202, 14 }, { 147, 189, 69, 168, 3 }, { 117, 59, 18, 99, 10 }, }, { { 202, 35, 114, 33, 12 }, { 35, 66, 75, 151, 4 }, { 56, 68, 236, 69, 3 }, { 46, 157, 36, 44, 4 }, }, { { 207, 199, 244, 213, 9 }, { 174, 135, 153, 255, 6 }, { 154, 178, 254, 63, 3 }, { 111, 249, 158, 23, 5 }, }, { { 208, 49, 39, 226, 6 }, { 81, 91, 66, 138, 7 }, { 100, 126, 72, 192, 11 }, { 229, 20, 45, 168, 10 }, }, { { 212, 119, 84, 14, 0 }, { 233, 47, 8, 178, 1 }, { 7, 2, 174, 226, 11 }, { 132, 209, 15, 73, 7 }, }, { { 209, 134, 49, 90, 2 }, { 16, 56, 152, 250, 5 }, { 69, 168, 198, 24, 11 }, { 165, 241, 145, 192, 8 }, }, { { 219, 76, 100, 122, 11 }, { 38, 61, 131, 235, 13 }, { 213, 226, 99, 45, 11 }, { 189, 124, 27, 198, 4 }, }, { { 219, 132, 135, 144, 8 }, { 18, 201, 145, 227, 2 }, { 16, 158, 18, 29, 11 }, { 76, 120, 153, 52, 8 }, }, { { 223, 222, 6, 112, 0 }, { 194, 77, 154, 235, 8 }, { 0, 230, 7, 191, 11 }, { 29, 117, 155, 36, 3 }, }, { { 226, 41, 186, 96, 0 }, { 1, 194, 38, 155, 12 }, { 0, 101, 217, 68, 7 }, { 61, 150, 68, 56, 0 }, }, { { 225, 64, 224, 141, 6 }, { 40, 180, 96, 198, 6 }, { 107, 16, 112, 40, 7 }, { 102, 48, 98, 209, 4 }, }, { { 225, 154, 144, 165, 2 }, { 72, 144, 58, 214, 10 }, { 74, 80, 149, 152, 7 }, { 86, 181, 192, 145, 2 }, }, { { 231, 242, 192, 250, 9 }, { 229, 164, 187, 203, 3 }, { 149, 240, 52, 254, 7 }, { 205, 61, 210, 90, 7 }, }, { { 238, 173, 190, 131, 8 }, { 131, 195, 53, 183, 15 }, { 28, 23, 219, 87, 7 }, { 254, 218, 204, 60, 1 }, }, { { 240, 28, 242, 124, 1 }, { 108, 232, 162, 186, 12 }, { 131, 228, 243, 128, 15 }, { 53, 212, 81, 115, 6 }, }, { { 247, 101, 168, 38, 4 }, { 137, 142, 102, 227, 5 }, { 38, 65, 90, 110, 15 }, { 172, 118, 103, 25, 1 }, }, { { 247, 236, 195, 164, 13 }, { 189, 204, 115, 227, 10 }, { 178, 92, 51, 126, 15 }, { 92, 124, 227, 59, 13 }, }, { { 248, 45, 84, 113, 4 }, { 35, 11, 226, 190, 8 }, { 40, 226, 171, 65, 15 }, { 23, 212, 125, 12, 4 }, }, { { 254, 133, 143, 205, 11 }, { 158, 251, 53, 175, 2 }, { 219, 63, 26, 23, 15 }, { 79, 90, 205, 247, 9 }, }, { { 248, 227, 91, 11, 6 }, { 51, 126, 124, 150, 1 }, { 109, 13, 172, 113, 15 }, { 134, 147, 231, 236, 12 }, }, { { 254, 214, 62, 31, 15 }, { 206, 125, 253, 183, 5 }, { 255, 135, 198, 183, 15 }, { 174, 219, 251, 231, 3 }, }, };
		return cv::makePtr<Dictionary>(Dictionary(
			cv::Mat(250, (6 * 6 + 7) / 8, CV_8UC4, (uchar*)DICT_6X6_1000_BYTES), 6, 5));
	}

	void drawMarker(int id, int sidePixels, cv::OutputArray _img, int borderBits) const {

		CV_Assert(sidePixels > markerSize);
		CV_Assert(id < bytesList.rows);
		CV_Assert(borderBits > 0);

		_img.create(sidePixels, sidePixels, CV_8UC1);

		cv::Mat tinyMarker(markerSize + 2 * borderBits, markerSize + 2 * borderBits, CV_8UC1,
			cv::Scalar::all(0));
		cv::Mat innerRegion = tinyMarker.rowRange(borderBits, tinyMarker.rows - borderBits)
			.colRange(borderBits, tinyMarker.cols - borderBits);

		cv::Mat bits = 255 * getBitsFromByteList(bytesList.rowRange(id, id + 1), markerSize);
		CV_Assert(innerRegion.total() == bits.total());
		bits.copyTo(innerRegion);

		cv::resize(tinyMarker, _img.getMat(), _img.getMat().size(), 0, 0, cv::INTER_NEAREST);
	}

	bool identify(
		const cv::Mat &onlyBits,
		int &idx,
		int &rotation,
		double maxCorrectionRate) const {

		CV_Assert(onlyBits.rows == markerSize && onlyBits.cols == markerSize);

		int maxCorrectionRecalculed = int(double(maxCorrectionBits) * maxCorrectionRate);

		cv::Mat candidateBytes = getByteListFromBits(onlyBits);

		idx = -1;

		for (int m = 0; m < bytesList.rows; m++) {
			int currentMinDistance = markerSize * markerSize + 1;
			int currentRotation = -1;
			for (unsigned int r = 0; r < 4; r++) {
				int currentHamming = cv::hal::normHamming(
					bytesList.ptr(m) + r*candidateBytes.cols,
					candidateBytes.ptr(),
					candidateBytes.cols);

				if (currentHamming < currentMinDistance) {
					currentMinDistance = currentHamming;
					currentRotation = r;
				}
			}

			if (currentMinDistance <= maxCorrectionRecalculed) {
				idx = m;
				rotation = currentRotation;
				break;
			}
		}

		return idx != -1;
	}

	int getDistanceToId(cv::InputArray bits, int id, bool allRotations) const {

		CV_Assert(id >= 0 && id < bytesList.rows);

		unsigned int nRotations = 4;
		if (!allRotations) nRotations = 1;

		cv::Mat candidateBytes = getByteListFromBits(bits.getMat());
		int currentMinDistance = int(bits.total() * bits.total());
		for (unsigned int r = 0; r < nRotations; r++) {
			int currentHamming = cv::hal::normHamming(
				bytesList.ptr(id) + r*candidateBytes.cols,
				candidateBytes.ptr(),
				candidateBytes.cols);

			if (currentHamming < currentMinDistance) {
				currentMinDistance = currentHamming;
			}
		}
		return currentMinDistance;
	}

private:
	static cv::Mat getBitsFromByteList(const cv::Mat &byteList, int markerSize) {
		CV_Assert(byteList.total() > 0 &&
			byteList.total() >= (unsigned int)markerSize * markerSize / 8 &&
			byteList.total() <= (unsigned int)markerSize * markerSize / 8 + 1);
		cv::Mat bits(markerSize, markerSize, CV_8UC1, cv::Scalar::all(0));

		unsigned char base2List[] = { 128, 64, 32, 16, 8, 4, 2, 1 };
		int currentByteIdx = 0;

		unsigned char currentByte = byteList.ptr()[0];
		int currentBit = 0;
		for (int row = 0; row < bits.rows; row++) {
			for (int col = 0; col < bits.cols; col++) {
				if (currentByte >= base2List[currentBit]) {
					bits.at< unsigned char >(row, col) = 1;
					currentByte -= base2List[currentBit];
				}
				currentBit++;
				if (currentBit == 8) {
					currentByteIdx++;
					currentByte = byteList.ptr()[currentByteIdx];

					if (8 * (currentByteIdx + 1) > (int)bits.total())
						currentBit = 8 * (currentByteIdx + 1) - (int)bits.total();
					else
						currentBit = 0;
				}
			}
		}
		return bits;
	}

	static cv::Mat Dictionary::getByteListFromBits(const cv::Mat &bits) {

		int nbytes = (bits.cols * bits.rows + 8 - 1) / 8;

		cv::Mat candidateByteList(1, nbytes, CV_8UC4, cv::Scalar::all(0));
		unsigned char currentBit = 0;
		int currentByte = 0;

		uchar* rot0 = candidateByteList.ptr();
		uchar* rot1 = candidateByteList.ptr() + 1 * nbytes;
		uchar* rot2 = candidateByteList.ptr() + 2 * nbytes;
		uchar* rot3 = candidateByteList.ptr() + 3 * nbytes;

		for (int row = 0; row < bits.rows; row++) {
			for (int col = 0; col < bits.cols; col++) {

				rot0[currentByte] <<= 1;
				rot1[currentByte] <<= 1;
				rot2[currentByte] <<= 1;
				rot3[currentByte] <<= 1;

				rot0[currentByte] |= bits.at<uchar>(row, col);
				rot1[currentByte] |= bits.at<uchar>(col, bits.cols - 1 - row);
				rot2[currentByte] |= bits.at<uchar>(bits.rows - 1 - row, bits.cols - 1 - col);
				rot3[currentByte] |= bits.at<uchar>(bits.rows - 1 - col, row);
				currentBit++;
				if (currentBit == 8) {

					currentBit = 0;
					currentByte++;
				}
			}
		}
		return candidateByteList;
	}

};

class Board {

public:
	std::vector< std::vector< cv::Point3f > > objPoints;
	cv::Ptr<Dictionary> dictionary;
	std::vector< int > ids;
	static cv::Ptr<Board> create(
		cv::InputArrayOfArrays objPoints,
		cv::Ptr<Dictionary> &dictionary,
		cv::InputArray ids)
	{
		CV_Assert(objPoints.total() == ids.total());
		CV_Assert(objPoints.type() == CV_32FC3);

		std::vector< std::vector< cv::Point3f > > obj_points_vector;
		for (unsigned int i = 0; i < objPoints.total(); i++) {
			std::vector<cv::Point3f> corners;
			cv::Mat corners_mat = objPoints.getMat(i);
			for (int j = 0; j < 4; j++) {
				corners.push_back(corners_mat.at<cv::Point3f>(j));
			}
			obj_points_vector.push_back(corners);
		}

		cv::Ptr<Board> res = cv::makePtr<Board>();
		ids.copyTo(res->ids);
		res->objPoints = obj_points_vector;
		res->dictionary = dictionary;
		return res;
	}
};

class ChBoard : public Board {

public:
	std::vector< cv::Point3f > chessboardCorners;
	std::vector< std::vector< int > > nearestMarkerIdx;
	std::vector< std::vector< int > > nearestMarkerCorners;

	static cv::Ptr<ChBoard> create(
		int squaresX, int squaresY,
		float squareLength,
		float markerLength,
		cv::Ptr<Dictionary> &dictionary)
	{
		CV_Assert(squaresX > 1 && squaresY > 1 && markerLength > 0 && squareLength > markerLength);
		cv::Ptr<ChBoard> res = cv::makePtr<ChBoard>();

		res->_squaresX = squaresX;
		res->_squaresY = squaresY;
		res->_squareLength = squareLength;
		res->_markerLength = markerLength;
		res->dictionary = dictionary;

		float diffSquareMarkerLength = (squareLength - markerLength) / 2;
		for (int y = squaresY - 1; y >= 0; y--) {
			for (int x = 0; x < squaresX; x++) {
				if (y % 2 == x % 2) continue;
				std::vector< cv::Point3f > corners;
				corners.resize(4);
				corners[0] = cv::Point3f(x * squareLength + diffSquareMarkerLength,
					y * squareLength + diffSquareMarkerLength + markerLength, 0);
				corners[1] = corners[0] + cv::Point3f(markerLength, 0, 0);
				corners[2] = corners[0] + cv::Point3f(markerLength, -markerLength, 0);
				corners[3] = corners[0] + cv::Point3f(0, -markerLength, 0);
				res->objPoints.push_back(corners);
				int nextId = (int)res->ids.size();
				res->ids.push_back(nextId);
			}
		}

		for (int y = 0; y < squaresY - 1; y++) {
			for (int x = 0; x < squaresX - 1; x++) {
				cv::Point3f corner;
				corner.x = (x + 1) * squareLength;
				corner.y = (y + 1) * squareLength;
				corner.z = 0;
				res->chessboardCorners.push_back(corner);
			}
		}

		res->_getNearestMarkerCorners();
		return res;
	}

	void draw(cv::Size outSize, cv::OutputArray _img, int marginSize = 0, int borderBits = 1) {

		CV_Assert(outSize.area() > 0);
		CV_Assert(marginSize >= 0);

		_img.create(outSize, CV_8UC1);
		_img.setTo(255);
		cv::Mat out = _img.getMat();
		cv::Mat noMarginsImg =
			out.colRange(marginSize, out.cols - marginSize).rowRange(marginSize, out.rows - marginSize);

		double totalLengthX, totalLengthY;
		totalLengthX = _squareLength * _squaresX;
		totalLengthY = _squareLength * _squaresY;

		double xReduction = totalLengthX / double(noMarginsImg.cols);
		double yReduction = totalLengthY / double(noMarginsImg.rows);

		cv::Mat chessboardZoneImg;
		if (xReduction > yReduction) {
			int nRows = int(totalLengthY / xReduction);
			int rowsMargins = (noMarginsImg.rows - nRows) / 2;
			chessboardZoneImg = noMarginsImg.rowRange(rowsMargins, noMarginsImg.rows - rowsMargins);
		}
		else {
			int nCols = int(totalLengthX / yReduction);
			int colsMargins = (noMarginsImg.cols - nCols) / 2;
			chessboardZoneImg = noMarginsImg.colRange(colsMargins, noMarginsImg.cols - colsMargins);
		}

		double squareSizePixels = std::min(double(chessboardZoneImg.cols) / double(_squaresX),
			double(chessboardZoneImg.rows) / double(_squaresY));

		double diffSquareMarkerLength = (_squareLength - _markerLength) / 2;
		int diffSquareMarkerLengthPixels =
			int(diffSquareMarkerLength * squareSizePixels / _squareLength);

		cv::Mat markersImg;
		_drawPlanarBoardImpl(this, chessboardZoneImg.size(), markersImg,
			diffSquareMarkerLengthPixels, borderBits);

		markersImg.copyTo(chessboardZoneImg);

		for (int y = 0; y < _squaresY; y++) {
			for (int x = 0; x < _squaresX; x++) {

				if (y % 2 != x % 2) continue;

				double startX, startY;
				startX = squareSizePixels * double(x);
				startY = double(chessboardZoneImg.rows) - squareSizePixels * double(y + 1);

				cv::Mat squareZone = chessboardZoneImg.rowRange(int(startY), int(startY + squareSizePixels))
					.colRange(int(startX), int(startX + squareSizePixels));

				squareZone.setTo(0);
			}
		}
	}

private:
	int _squaresX, _squaresY;
	float _squareLength;
	float _markerLength;

	void _getNearestMarkerCorners() {
		nearestMarkerIdx.resize(chessboardCorners.size());
		nearestMarkerCorners.resize(chessboardCorners.size());

		unsigned int nMarkers = (unsigned int)ids.size();
		unsigned int nChCorners = (unsigned int)chessboardCorners.size();
		for (unsigned int i = 0; i < nChCorners; i++) {
			double minDist = -1;
			cv::Point3f chCorner = chessboardCorners[i];
			for (unsigned int j = 0; j < nMarkers; j++) {
				cv::Point3f center = cv::Point3f(0, 0, 0);
				for (unsigned int k = 0; k < 4; k++)
					center += objPoints[j][k];
				center /= 4.;
				double sqDistance;
				cv::Point3f distVector = chCorner - center;
				sqDistance = distVector.x * distVector.x + distVector.y * distVector.y;
				if (j == 0 || fabs(sqDistance - minDist) < 0.0001) {
					nearestMarkerIdx[i].push_back(j);
					minDist = sqDistance;
				}
				else if (sqDistance < minDist) {
					nearestMarkerIdx[i].clear();
					nearestMarkerIdx[i].push_back(j);
					minDist = sqDistance;
				}
			}
			for (unsigned int j = 0; j < nearestMarkerIdx[i].size(); j++) {
				nearestMarkerCorners[i].resize(nearestMarkerIdx[i].size());
				double minDistCorner = -1;
				for (unsigned int k = 0; k < 4; k++) {
					double sqDistance;
					cv::Point3f distVector = chCorner - objPoints[nearestMarkerIdx[i][j]][k];
					sqDistance = distVector.x * distVector.x + distVector.y * distVector.y;
					if (k == 0 || sqDistance < minDistCorner) {
						minDistCorner = sqDistance;
						nearestMarkerCorners[i][j] = k;
					}
				}
			}
		}
	}

	void _drawPlanarBoardImpl(Board *_board, cv::Size outSize, cv::OutputArray _img, int marginSize,
		int borderBits) {

		CV_Assert(outSize.area() > 0);
		CV_Assert(marginSize >= 0);

		_img.create(outSize, CV_8UC1);
		cv::Mat out = _img.getMat();
		out.setTo(cv::Scalar::all(255));
		cv::Mat outNoMargins =
			out.colRange(marginSize, out.cols - marginSize).rowRange(marginSize, out.rows - marginSize);

		CV_Assert(_board->objPoints.size() > 0);
		float minX, maxX, minY, maxY;
		minX = maxX = _board->objPoints[0][0].x;
		minY = maxY = _board->objPoints[0][0].y;

		for (unsigned int i = 0; i < _board->objPoints.size(); i++) {
			for (int j = 0; j < 4; j++) {
				minX = std::min(minX, _board->objPoints[i][j].x);
				maxX = std::max(maxX, _board->objPoints[i][j].x);
				minY = std::min(minY, _board->objPoints[i][j].y);
				maxY = std::max(maxY, _board->objPoints[i][j].y);
			}
		}

		float sizeX, sizeY;
		sizeX = maxX - minX;
		sizeY = maxY - minY;

		float xReduction = sizeX / float(outNoMargins.cols);
		float yReduction = sizeY / float(outNoMargins.rows);

		cv::Mat markerZone;
		if (xReduction > yReduction) {
			int nRows = int(sizeY / xReduction);
			int rowsMargins = (outNoMargins.rows - nRows) / 2;
			markerZone = outNoMargins.rowRange(rowsMargins, outNoMargins.rows - rowsMargins);
		}
		else {
			int nCols = int(sizeX / yReduction);
			int colsMargins = (outNoMargins.cols - nCols) / 2;
			markerZone = outNoMargins.colRange(colsMargins, outNoMargins.cols - colsMargins);
		}

		Dictionary &dictionary = *(_board->dictionary);
		for (unsigned int m = 0; m < _board->objPoints.size(); m++) {

			std::vector< cv::Point2f > outCorners;
			outCorners.resize(4);
			for (int j = 0; j < 4; j++) {
				cv::Point2f p0, p1, pf;
				p0 = cv::Point2f(_board->objPoints[m][j].x, _board->objPoints[m][j].y);

				p1.x = p0.x - minX;
				p1.y = p0.y - minY;
				pf.x = p1.x * float(markerZone.cols - 1) / sizeX;
				pf.y = float(markerZone.rows - 1) - p1.y * float(markerZone.rows - 1) / sizeY;
				outCorners[j] = pf;
			}

			int tinyMarkerSize = 10 * dictionary.markerSize + 2;
			cv::Mat tinyMarker;
			dictionary.drawMarker(_board->ids[m], tinyMarkerSize, tinyMarker, borderBits);

			cv::Mat inCorners(4, 1, CV_32FC2);
			inCorners.ptr< cv::Point2f >(0)[0] = cv::Point2f(0, 0);
			inCorners.ptr< cv::Point2f >(0)[1] = cv::Point2f((float)tinyMarker.cols, 0);
			inCorners.ptr< cv::Point2f >(0)[2] = cv::Point2f((float)tinyMarker.cols, (float)tinyMarker.rows);
			inCorners.ptr< cv::Point2f >(0)[3] = cv::Point2f(0, (float)tinyMarker.rows);

			cv::Mat transformation = getPerspectiveTransform(inCorners, outCorners);
			cv::Mat aux;
			const char borderValue = 127;
			cv::warpPerspective(tinyMarker, aux, transformation, markerZone.size(), cv::INTER_NEAREST,
				cv::BORDER_CONSTANT, cv::Scalar::all(borderValue));

			for (int y = 0; y < aux.rows; y++) {
				for (int x = 0; x < aux.cols; x++) {
					if (aux.at< unsigned char >(y, x) == borderValue) continue;
					markerZone.at< unsigned char >(y, x) = aux.at< unsigned char >(y, x);
				}
			}
		}
	}

};

struct DetectorParameters {

	DetectorParameters()
	: adaptiveThreshWinSizeMin(3),
	adaptiveThreshWinSizeMax(23),
	adaptiveThreshWinSizeStep(10),
	adaptiveThreshConstant(7),
	minMarkerPerimeterRate(0.03),
	maxMarkerPerimeterRate(4.),
	polygonalApproxAccuracyRate(0.03),
	minCornerDistanceRate(0.05),
	minDistanceToBorder(3),
	minMarkerDistanceRate(0.05),
	doCornerRefinement(false),
	cornerRefinementWinSize(5),
	cornerRefinementMaxIterations(30),
	cornerRefinementMinAccuracy(0.1),
	markerBorderBits(1),
	perspectiveRemovePixelPerCell(4),
	perspectiveRemoveIgnoredMarginPerCell(0.13),
	maxErroneousBitsInBorderRate(0.35),
	minOtsuStdDev(5.0),
	errorCorrectionRate(0.6) {}

	static cv::Ptr<DetectorParameters> DetectorParameters::create() {
		return cv::makePtr<DetectorParameters>();
	}

	int adaptiveThreshWinSizeMin;
	int adaptiveThreshWinSizeMax;
	int adaptiveThreshWinSizeStep;
	double adaptiveThreshConstant;
	double minMarkerPerimeterRate;
	double maxMarkerPerimeterRate;
	double polygonalApproxAccuracyRate;
	double minCornerDistanceRate;
	int minDistanceToBorder;
	double minMarkerDistanceRate;
	bool doCornerRefinement;
	int cornerRefinementWinSize;
	int cornerRefinementMaxIterations;
	double cornerRefinementMinAccuracy;
	int markerBorderBits;
	int perspectiveRemovePixelPerCell;
	double perspectiveRemoveIgnoredMarginPerCell;
	double maxErroneousBitsInBorderRate;
	double minOtsuStdDev;
	double errorCorrectionRate;
};

class DetectInitialCandidatesParallel : public cv::ParallelLoopBody {
public:
	DetectInitialCandidatesParallel(const cv::Mat *_grey,
		std::vector< std::vector< std::vector< cv::Point2f > > > *_candidatesArrays,
		std::vector< std::vector< std::vector< cv::Point > > > *_contoursArrays,
		const cv::Ptr<DetectorParameters> &_params)
		: grey(_grey), candidatesArrays(_candidatesArrays), contoursArrays(_contoursArrays),
		params(_params) {}

	void operator()(const cv::Range &range) const {
		const int begin = range.start;
		const int end = range.end;

		for (int i = begin; i < end; i++) {
			int currScale =
				params->adaptiveThreshWinSizeMin + i * params->adaptiveThreshWinSizeStep;

			cv::Mat thresh;
			_threshold(*grey, thresh, currScale, params->adaptiveThreshConstant);

			_findMarkerContours(thresh, (*candidatesArrays)[i], (*contoursArrays)[i],
				params->minMarkerPerimeterRate, params->maxMarkerPerimeterRate,
				params->polygonalApproxAccuracyRate, params->minCornerDistanceRate,
				params->minDistanceToBorder);
		}
	}

private:
	DetectInitialCandidatesParallel &operator=(const DetectInitialCandidatesParallel &);

	static void _threshold(cv::InputArray _in, cv::OutputArray _out, int winSize, double constant) {
		CV_Assert(winSize >= 3);
		if (winSize % 2 == 0) winSize++;
		adaptiveThreshold(_in, _out, 255, cv::ADAPTIVE_THRESH_MEAN_C, cv::THRESH_BINARY_INV, winSize, constant);
	}

	static void _findMarkerContours(
		cv::InputArray _in,
		std::vector< std::vector< cv::Point2f > > &candidates,
		std::vector< std::vector< cv::Point > > &contoursOut, double minPerimeterRate,
		double maxPerimeterRate, double accuracyRate,
		double minCornerDistanceRate, int minDistanceToBorder) {

		CV_Assert(minPerimeterRate > 0 && maxPerimeterRate > 0 && accuracyRate > 0 &&
			minCornerDistanceRate >= 0 && minDistanceToBorder >= 0);

		unsigned int minPerimeterPixels =
			(unsigned int)(minPerimeterRate * std::max(_in.getMat().cols, _in.getMat().rows));
		unsigned int maxPerimeterPixels =
			(unsigned int)(maxPerimeterRate * std::max(_in.getMat().cols, _in.getMat().rows));

		cv::Mat contoursImg;
		_in.getMat().copyTo(contoursImg);
		std::vector< std::vector< cv::Point > > contours;
		cv::findContours(contoursImg, contours, cv::RETR_LIST, cv::CHAIN_APPROX_NONE);

		for (unsigned int i = 0; i < contours.size(); i++) {

			if (contours[i].size() < minPerimeterPixels || contours[i].size() > maxPerimeterPixels)
				continue;

			std::vector< cv::Point > approxCurve;
			cv::approxPolyDP(contours[i], approxCurve, double(contours[i].size()) * accuracyRate, true);
			if (approxCurve.size() != 4 || !cv::isContourConvex(approxCurve)) continue;

			double minDistSq =
				std::max(contoursImg.cols, contoursImg.rows)
				* std::max(contoursImg.cols, contoursImg.rows);
			for (int j = 0; j < 4; j++) {
				double d = (double)(approxCurve[j].x - approxCurve[(j + 1) % 4].x) *
					(double)(approxCurve[j].x - approxCurve[(j + 1) % 4].x) +
					(double)(approxCurve[j].y - approxCurve[(j + 1) % 4].y) *
					(double)(approxCurve[j].y - approxCurve[(j + 1) % 4].y);
				minDistSq = std::min(minDistSq, d);
			}
			double minCornerDistancePixels = double(contours[i].size()) * minCornerDistanceRate;
			if (minDistSq < minCornerDistancePixels * minCornerDistancePixels) continue;

			bool tooNearBorder = false;
			for (int j = 0; j < 4; j++) {
				if (approxCurve[j].x < minDistanceToBorder || approxCurve[j].y < minDistanceToBorder ||
					approxCurve[j].x > contoursImg.cols - 1 - minDistanceToBorder ||
					approxCurve[j].y > contoursImg.rows - 1 - minDistanceToBorder)
					tooNearBorder = true;
			}
			if (tooNearBorder) continue;

			std::vector< cv::Point2f > currentCandidate;
			currentCandidate.resize(4);
			for (int j = 0; j < 4; j++) {
				currentCandidate[j] = cv::Point2f((float)approxCurve[j].x, (float)approxCurve[j].y);
			}
			candidates.push_back(currentCandidate);
			contoursOut.push_back(contours[i]);
		}
	}

	const cv::Mat *grey;
	std::vector< std::vector< std::vector< cv::Point2f > > > *candidatesArrays;
	std::vector< std::vector< std::vector< cv::Point > > > *contoursArrays;
	const cv::Ptr<DetectorParameters> &params;
};

class IdentifyCandidatesParallel : public cv::ParallelLoopBody {
public:
	IdentifyCandidatesParallel(
		const cv::Mat *_grey,
		cv::InputArrayOfArrays _candidates,
		cv::InputArrayOfArrays _contours,
		cv::Ptr<Dictionary> &_dictionary,
		std::vector< int > *_idsTmp,
		std::vector< char > *_validCandidates,
		const cv::Ptr<DetectorParameters> &_params)
		: grey(_grey), candidates(_candidates), contours(_contours), dictionary(_dictionary),
		idsTmp(_idsTmp), validCandidates(_validCandidates), params(_params) {}

	void operator()(const cv::Range &range) const {
		const int begin = range.start;
		const int end = range.end;

		for (int i = begin; i < end; i++) {
			int currId;
			cv::Mat currentCandidate = candidates.getMat(i);
			if (_identifyOneCandidate(dictionary, *grey, currentCandidate, currId, params)) {
				(*validCandidates)[i] = 1;
				(*idsTmp)[i] = currId;
			}
		}
	}

private:
	IdentifyCandidatesParallel &operator=(const IdentifyCandidatesParallel &);

	static bool _identifyOneCandidate(
		cv::Ptr<Dictionary> &dictionary,
		cv::InputArray _image,
		cv::InputOutputArray _corners,
		int &idx,
		const cv::Ptr<DetectorParameters> &params) {

		CV_Assert(_corners.total() == 4);
		CV_Assert(_image.getMat().total() != 0);
		CV_Assert(params->markerBorderBits > 0);

		cv::Mat candidateBits =
			_extractBits(_image, _corners, dictionary->markerSize, params->markerBorderBits,
			params->perspectiveRemovePixelPerCell,
			params->perspectiveRemoveIgnoredMarginPerCell, params->minOtsuStdDev);

		int maximumErrorsInBorder =
			int(dictionary->markerSize * dictionary->markerSize * params->maxErroneousBitsInBorderRate);
		int borderErrors =
			_getBorderErrors(candidateBits, dictionary->markerSize, params->markerBorderBits);
		if (borderErrors > maximumErrorsInBorder) return false;

		cv::Mat onlyBits =
			candidateBits.rowRange(params->markerBorderBits,
			candidateBits.rows - params->markerBorderBits)
			.colRange(params->markerBorderBits, candidateBits.rows - params->markerBorderBits);

		int rotation;
		if (!dictionary->identify(onlyBits, idx, rotation, params->errorCorrectionRate))
			return false;
		else {

			if (rotation != 0) {
				cv::Mat copyPoints = _corners.getMat().clone();
				for (int j = 0; j < 4; j++)
					_corners.getMat().ptr< cv::Point2f >(0)[j] =
					copyPoints.ptr< cv::Point2f >(0)[(j + 4 - rotation) % 4];
			}
			return true;
		}
	}

	static int _getBorderErrors(const cv::Mat &bits, int markerSize, int borderSize) {

		int sizeWithBorders = markerSize + 2 * borderSize;

		CV_Assert(markerSize > 0 && bits.cols == sizeWithBorders && bits.rows == sizeWithBorders);

		int totalErrors = 0;
		for (int y = 0; y < sizeWithBorders; y++) {
			for (int k = 0; k < borderSize; k++) {
				if (bits.ptr< unsigned char >(y)[k] != 0) totalErrors++;
				if (bits.ptr< unsigned char >(y)[sizeWithBorders - 1 - k] != 0) totalErrors++;
			}
		}
		for (int x = borderSize; x < sizeWithBorders - borderSize; x++) {
			for (int k = 0; k < borderSize; k++) {
				if (bits.ptr< unsigned char >(k)[x] != 0) totalErrors++;
				if (bits.ptr< unsigned char >(sizeWithBorders - 1 - k)[x] != 0) totalErrors++;
			}
		}
		return totalErrors;
	}

	const cv::Mat *grey;
	cv::InputArrayOfArrays candidates, contours;
	cv::Ptr<Dictionary> &dictionary;
	std::vector< int > *idsTmp;
	std::vector< char > *validCandidates;
	const cv::Ptr<DetectorParameters> &params;
};

class MarkerSubpixelParallel : public cv::ParallelLoopBody {
public:
	MarkerSubpixelParallel(
		const cv::Mat *_grey,
		cv::OutputArrayOfArrays _corners,
		const cv::Ptr<DetectorParameters> &_params)
		: grey(_grey), corners(_corners), params(_params) {}

	void operator()(const cv::Range &range) const {
		const int begin = range.start;
		const int end = range.end;

		for (int i = begin; i < end; i++) {
			cv::cornerSubPix(
				*grey,
				corners.getMat(i),
				cv::Size(params->cornerRefinementWinSize,
				params->cornerRefinementWinSize),
				cv::Size(-1, -1),
				cv::TermCriteria(cv::TermCriteria::MAX_ITER | cv::TermCriteria::EPS,
				params->cornerRefinementMaxIterations,
				params->cornerRefinementMinAccuracy));
		}
	}

private:
	MarkerSubpixelParallel &operator=(const MarkerSubpixelParallel &);

	const cv::Mat *grey;
	cv::OutputArrayOfArrays corners;
	const cv::Ptr<DetectorParameters> &params;
};

class ChSubpixelParallel : public cv::ParallelLoopBody {
public:
	ChSubpixelParallel(
		const cv::Mat *_grey,
		std::vector< cv::Point2f > *_filteredChessboardImgPoints,
		std::vector< cv::Size > *_filteredWinSizes,
		const cv::Ptr<DetectorParameters> &_params)
		: grey(_grey), filteredChessboardImgPoints(_filteredChessboardImgPoints),
		filteredWinSizes(_filteredWinSizes), params(_params) {}

	void operator()(const cv::Range &range) const {
		const int begin = range.start;
		const int end = range.end;

		for (int i = begin; i < end; i++) {
			std::vector< cv::Point2f > in;
			in.push_back((*filteredChessboardImgPoints)[i]);
			cv::Size winSize = (*filteredWinSizes)[i];
			if (winSize.height == -1 || winSize.width == -1)
				winSize = cv::Size(params->cornerRefinementWinSize, params->cornerRefinementWinSize);

			cornerSubPix(*grey, in, winSize, cv::Size(),
				cv::TermCriteria(cv::TermCriteria::MAX_ITER | cv::TermCriteria::EPS,
				params->cornerRefinementMaxIterations,
				params->cornerRefinementMinAccuracy));

			(*filteredChessboardImgPoints)[i] = in[0];
		}
	}

private:
	ChSubpixelParallel &operator=(const ChSubpixelParallel &);

	const cv::Mat *grey;
	std::vector< cv::Point2f > *filteredChessboardImgPoints;
	std::vector< cv::Size > *filteredWinSizes;
	const cv::Ptr<DetectorParameters> &params;
};

static void _convertToGrey(cv::InputArray _in, cv::OutputArray _out) {
	CV_Assert(_in.getMat().channels() == 1 || _in.getMat().channels() == 3);
	_out.create(_in.getMat().size(), CV_8UC1);
	if (_in.getMat().type() == CV_8UC3)
		cvtColor(_in.getMat(), _out.getMat(), cv::COLOR_BGR2GRAY);
	else
		_in.getMat().copyTo(_out);
}

static void _detectInitialCandidates(
	const cv::Mat &grey,
	std::vector< std::vector< cv::Point2f > > &candidates,
	std::vector< std::vector< cv::Point > > &contours,
	const cv::Ptr<DetectorParameters> &params) {

	CV_Assert(params->adaptiveThreshWinSizeMin >= 3 && params->adaptiveThreshWinSizeMax >= 3);
	CV_Assert(params->adaptiveThreshWinSizeMax >= params->adaptiveThreshWinSizeMin);
	CV_Assert(params->adaptiveThreshWinSizeStep > 0);

	int nScales = (params->adaptiveThreshWinSizeMax - params->adaptiveThreshWinSizeMin) /
		params->adaptiveThreshWinSizeStep + 1;

	std::vector< std::vector< std::vector< cv::Point2f > > > candidatesArrays((size_t)nScales);
	std::vector< std::vector< std::vector< cv::Point > > > contoursArrays((size_t)nScales);

	cv::parallel_for_(cv::Range(0, nScales), DetectInitialCandidatesParallel(&grey, &candidatesArrays,
		&contoursArrays, params));

	for (int i = 0; i < nScales; i++) {
		for (unsigned int j = 0; j < candidatesArrays[i].size(); j++) {
			candidates.push_back(candidatesArrays[i][j]);
			contours.push_back(contoursArrays[i][j]);
		}
	}
}

static void _reorderCandidatesCorners(std::vector< std::vector< cv::Point2f > > &candidates) {

	for (unsigned int i = 0; i < candidates.size(); i++) {
		double dx1 = candidates[i][1].x - candidates[i][0].x;
		double dy1 = candidates[i][1].y - candidates[i][0].y;
		double dx2 = candidates[i][2].x - candidates[i][0].x;
		double dy2 = candidates[i][2].y - candidates[i][0].y;
		double crossProduct = (dx1 * dy2) - (dy1 * dx2);

		if (crossProduct < 0.0) {
			std::swap(candidates[i][1], candidates[i][3]);
		}
	}
}

static void _filterTooCloseCandidates(
	const std::vector< std::vector< cv::Point2f > > &candidatesIn,
	std::vector< std::vector< cv::Point2f > > &candidatesOut,
	const std::vector< std::vector< cv::Point > > &contoursIn,
	std::vector< std::vector< cv::Point > > &contoursOut,
	double minMarkerDistanceRate) {

	CV_Assert(minMarkerDistanceRate >= 0);

	std::vector< std::pair< int, int > > nearCandidates;
	for (unsigned int i = 0; i < candidatesIn.size(); i++) {
		for (unsigned int j = i + 1; j < candidatesIn.size(); j++) {

			int minimumPerimeter = std::min((int)contoursIn[i].size(), (int)contoursIn[j].size());

			for (int fc = 0; fc < 4; fc++) {
				double distSq = 0;
				for (int c = 0; c < 4; c++) {

					int modC = (c + fc) % 4;
					distSq += (candidatesIn[i][modC].x - candidatesIn[j][c].x) *
						(candidatesIn[i][modC].x - candidatesIn[j][c].x) +
						(candidatesIn[i][modC].y - candidatesIn[j][c].y) *
						(candidatesIn[i][modC].y - candidatesIn[j][c].y);
				}
				distSq /= 4.;

				double minMarkerDistancePixels = double(minimumPerimeter) * minMarkerDistanceRate;
				if (distSq < minMarkerDistancePixels * minMarkerDistancePixels) {
					nearCandidates.push_back(std::pair< int, int >(i, j));
					break;
				}
			}
		}
	}

	std::vector< bool > toRemove(candidatesIn.size(), false);
	for (unsigned int i = 0; i < nearCandidates.size(); i++) {

		if (toRemove[nearCandidates[i].first] || toRemove[nearCandidates[i].second]) continue;
		size_t perimeter1 = contoursIn[nearCandidates[i].first].size();
		size_t perimeter2 = contoursIn[nearCandidates[i].second].size();
		if (perimeter1 > perimeter2)
			toRemove[nearCandidates[i].second] = true;
		else
			toRemove[nearCandidates[i].first] = true;
	}

	candidatesOut.clear();
	unsigned long totalRemaining = 0;
	for (unsigned int i = 0; i < toRemove.size(); i++)
	if (!toRemove[i]) totalRemaining++;
	candidatesOut.resize(totalRemaining);
	contoursOut.resize(totalRemaining);
	for (unsigned int i = 0, currIdx = 0; i < candidatesIn.size(); i++) {
		if (toRemove[i]) continue;
		candidatesOut[currIdx] = candidatesIn[i];
		contoursOut[currIdx] = contoursIn[i];
		currIdx++;
	}
}

static void _detectCandidates(cv::InputArray _image, cv::OutputArrayOfArrays _candidates,
	cv::OutputArrayOfArrays _contours, const cv::Ptr<DetectorParameters> &_params) {

	cv::Mat image = _image.getMat();
	CV_Assert(image.total() != 0);

	cv::Mat grey;
	_convertToGrey(image, grey);

	std::vector< std::vector< cv::Point2f > > candidates;
	std::vector< std::vector< cv::Point > > contours;

	_detectInitialCandidates(grey, candidates, contours, _params);

	_reorderCandidatesCorners(candidates);

	std::vector< std::vector< cv::Point2f > > candidatesOut;
	std::vector< std::vector< cv::Point > > contoursOut;
	_filterTooCloseCandidates(candidates, candidatesOut, contours, contoursOut,
		_params->minMarkerDistanceRate);

	_candidates.create((int)candidatesOut.size(), 1, CV_32FC2);
	_contours.create((int)contoursOut.size(), 1, CV_32SC2);
	for (int i = 0; i < (int)candidatesOut.size(); i++) {
		_candidates.create(4, 1, CV_32FC2, i, true);
		cv::Mat m = _candidates.getMat(i);
		for (int j = 0; j < 4; j++)
			m.ptr< cv::Vec2f >(0)[j] = candidatesOut[i][j];

		_contours.create((int)contoursOut[i].size(), 1, CV_32SC2, i, true);
		cv::Mat c = _contours.getMat(i);
		for (unsigned int j = 0; j < contoursOut[i].size(); j++)
			c.ptr< cv::Point2i >()[j] = contoursOut[i][j];
	}
}

void _copyVector2Output(std::vector< cv::Mat > &vec, cv::OutputArrayOfArrays out) {

	out.release();
	out.create((int)vec.size(), 1, CV_32FC2);

	if (out.isMatVector()) {
		for (unsigned int i = 0; i < vec.size(); i++) {
			out.create(4, 1, CV_32FC2, i, true);
			cv::Mat &m = out.getMatRef(i);
			vec[i].copyTo(m);
		}
	}
	else if (out.isUMatVector()) {
		for (unsigned int i = 0; i < vec.size(); i++) {
			out.create(4, 1, CV_32FC2, i, true);
			cv::UMat &m = out.getUMatRef(i);
			vec[i].copyTo(m);
		}
	}
	else if (out.kind() == cv::_OutputArray::STD_VECTOR_VECTOR){
		for (unsigned int i = 0; i < vec.size(); i++) {
			out.create(4, 1, CV_32FC2, i, true);
			cv::Mat m = out.getMat(i);
			vec[i].copyTo(m);
		}
	}
	else {
		CV_Error(cv::Error::StsNotImplemented,
			"Only Mat vector, UMat vector, and vector<vector> OutputArrays are currently supported.");
	}
}

static void _identifyCandidates(
	cv::InputArray _image,
	cv::InputArrayOfArrays _candidates,
	cv::InputArrayOfArrays _contours,
	cv::Ptr<Dictionary> &_dictionary,
	cv::OutputArrayOfArrays _accepted,
	cv::OutputArray _ids,
	const cv::Ptr<DetectorParameters> &params,
	cv::OutputArrayOfArrays _rejected = cv::noArray()) {

	int ncandidates = (int)_candidates.total();

	std::vector< cv::Mat > accepted;
	std::vector< cv::Mat > rejected;
	std::vector< int > ids;

	CV_Assert(_image.getMat().total() != 0);

	cv::Mat grey;
	_convertToGrey(_image.getMat(), grey);

	std::vector< int > idsTmp(ncandidates, -1);
	std::vector< char > validCandidates(ncandidates, 0);

	cv::parallel_for_(cv::Range(0, ncandidates),
		IdentifyCandidatesParallel(&grey, _candidates, _contours, _dictionary, &idsTmp,
		&validCandidates, params));

	for (int i = 0; i < ncandidates; i++) {
		if (validCandidates[i] == 1) {
			accepted.push_back(_candidates.getMat(i));
			ids.push_back(idsTmp[i]);
		}
		else {
			rejected.push_back(_candidates.getMat(i));
		}
	}

	_copyVector2Output(accepted, _accepted);

	_ids.create((int)ids.size(), 1, CV_32SC1);
	for (unsigned int i = 0; i < ids.size(); i++)
		_ids.getMat().ptr< int >(0)[i] = ids[i];

	if (_rejected.needed()) {
		_copyVector2Output(rejected, _rejected);
	}
}

static void _filterDetectedMarkers(
	cv::InputArrayOfArrays _inCorners,
	cv::InputArray _inIds,
	cv::OutputArrayOfArrays _outCorners,
	cv::OutputArray _outIds) {

	CV_Assert(_inCorners.total() == _inIds.total());
	if (_inCorners.total() == 0) return;

	std::vector< bool > toRemove(_inCorners.total(), false);
	bool atLeastOneRemove = false;

	for (unsigned int i = 0; i < _inCorners.total() - 1; i++) {
		for (unsigned int j = i + 1; j < _inCorners.total(); j++) {
			if (_inIds.getMat().ptr< int >(0)[i] != _inIds.getMat().ptr< int >(0)[j]) continue;

			bool inside = true;
			for (unsigned int p = 0; p < 4; p++) {
				cv::Point2f point = _inCorners.getMat(j).ptr< cv::Point2f >(0)[p];
				if (cv::pointPolygonTest(_inCorners.getMat(i), point, false) < 0) {
					inside = false;
					break;
				}
			}
			if (inside) {
				toRemove[j] = true;
				atLeastOneRemove = true;
				continue;
			}

			inside = true;
			for (unsigned int p = 0; p < 4; p++) {
				cv::Point2f point = _inCorners.getMat(i).ptr< cv::Point2f >(0)[p];
				if (pointPolygonTest(_inCorners.getMat(j), point, false) < 0) {
					inside = false;
					break;
				}
			}
			if (inside) {
				toRemove[i] = true;
				atLeastOneRemove = true;
				continue;
			}
		}
	}

	if (atLeastOneRemove) {
		std::vector< cv::Mat > filteredCorners;
		std::vector< int > filteredIds;

		for (unsigned int i = 0; i < toRemove.size(); i++) {
			if (!toRemove[i]) {
				filteredCorners.push_back(_inCorners.getMat(i).clone());
				filteredIds.push_back(_inIds.getMat().ptr< int >(0)[i]);
			}
		}

		_outIds.create((int)filteredIds.size(), 1, CV_32SC1);
		for (unsigned int i = 0; i < filteredIds.size(); i++)
			_outIds.getMat().ptr< int >(0)[i] = filteredIds[i];

		_outCorners.create((int)filteredCorners.size(), 1, CV_32FC2);
		for (unsigned int i = 0; i < filteredCorners.size(); i++) {
			_outCorners.create(4, 1, CV_32FC2, i, true);
			filteredCorners[i].copyTo(_outCorners.getMat(i));
		}
	}
}

void detectMarkers(
	cv::InputArray _image,
	cv::Ptr<Dictionary> &_dictionary,
	cv::OutputArrayOfArrays _corners,
	cv::OutputArray _ids,
	const cv::Ptr<DetectorParameters> &_params,
	cv::OutputArrayOfArrays _rejectedImgPoints) {

	CV_Assert(_image.getMat().total() != 0);

	cv::Mat grey;
	_convertToGrey(_image.getMat(), grey);

	std::vector< std::vector< cv::Point2f > > candidates;
	std::vector< std::vector< cv::Point > > contours;
	_detectCandidates(grey, candidates, contours, _params);

	_identifyCandidates(grey, candidates, contours, _dictionary, _corners, _ids, _params,
		_rejectedImgPoints);

	_filterDetectedMarkers(_corners, _ids, _corners, _ids);

	if (_params->doCornerRefinement) {
		CV_Assert(_params->cornerRefinementWinSize > 0 && _params->cornerRefinementMaxIterations > 0 &&
			_params->cornerRefinementMinAccuracy > 0);

		cv::parallel_for_(cv::Range(0, (int)_corners.total()),
			MarkerSubpixelParallel(&grey, _corners, _params));
	}
}

static void _getBoardObjectAndImagePoints(
	cv::Ptr<Board> &_board,
	cv::InputArray _detectedIds,
	cv::InputArrayOfArrays _detectedCorners,
	cv::OutputArray _imgPoints,
	cv::OutputArray _objPoints) {

	CV_Assert(_board->ids.size() == _board->objPoints.size());
	CV_Assert(_detectedIds.total() == _detectedCorners.total());

	size_t nDetectedMarkers = _detectedIds.total();

	std::vector< cv::Point3f > objPnts;
	objPnts.reserve(nDetectedMarkers);

	std::vector< cv::Point2f > imgPnts;
	imgPnts.reserve(nDetectedMarkers);

	for (unsigned int i = 0; i < nDetectedMarkers; i++) {
		int currentId = _detectedIds.getMat().ptr< int >(0)[i];
		for (unsigned int j = 0; j < _board->ids.size(); j++) {
			if (currentId == _board->ids[j]) {
				for (int p = 0; p < 4; p++) {
					objPnts.push_back(_board->objPoints[j][p]);
					imgPnts.push_back(_detectedCorners.getMat(i).ptr< cv::Point2f >(0)[p]);
				}
			}
		}
	}

	_objPoints.create((int)objPnts.size(), 1, CV_32FC3);
	for (unsigned int i = 0; i < objPnts.size(); i++)
		_objPoints.getMat().ptr< cv::Point3f >(0)[i] = objPnts[i];

	_imgPoints.create((int)objPnts.size(), 1, CV_32FC2);
	for (unsigned int i = 0; i < imgPnts.size(); i++)
		_imgPoints.getMat().ptr< cv::Point2f >(0)[i] = imgPnts[i];
}

int estimatePoseBoard(
	cv::InputArrayOfArrays _corners,
	cv::InputArray _ids,
	cv::Ptr<Board> &board,
	cv::InputArray _cameraMatrix,
	cv::InputArray _distCoeffs,
	cv::OutputArray _rvec,
	cv::OutputArray _tvec) {

	CV_Assert(_corners.total() == _ids.total());

	cv::Mat objPoints, imgPoints;
	_getBoardObjectAndImagePoints(board, _ids, _corners, imgPoints, objPoints);

	CV_Assert(imgPoints.total() == objPoints.total());

	if (objPoints.total() == 0)
		return 0;

	bool useExtrinsicGuess = true;
	if (_rvec.empty() || _tvec.empty())
	{
		_rvec.create(3, 1, CV_64FC1);
		_tvec.create(3, 1, CV_64FC1);
		useExtrinsicGuess = false;
	}
	cv::solvePnP(objPoints, imgPoints, _cameraMatrix, _distCoeffs, _rvec, _tvec, useExtrinsicGuess);

	return (int)objPoints.total() / 4;
}

static void _projectUndetectedMarkers(
	cv::Ptr<Board> &_board,
	cv::InputOutputArrayOfArrays _detectedCorners,
	cv::InputOutputArray _detectedIds,
	cv::InputArray _cameraMatrix,
	cv::InputArray _distCoeffs,
	cv::OutputArrayOfArrays _undetectedMarkersProjectedCorners,
	cv::OutputArray _undetectedMarkersIds) {

	cv::Mat rvec, tvec;
	int boardDetectedMarkers;
	boardDetectedMarkers = estimatePoseBoard(
		_detectedCorners, _detectedIds, _board,
		_cameraMatrix, _distCoeffs, rvec, tvec);

	if (boardDetectedMarkers == 0) return;

	std::vector< std::vector< cv::Point2f > > undetectedCorners;
	std::vector< int > undetectedIds;
	for (unsigned int i = 0; i < _board->ids.size(); i++) {
		int foundIdx = -1;
		for (unsigned int j = 0; j < _detectedIds.total(); j++) {
			if (_board->ids[i] == _detectedIds.getMat().ptr< int >()[j]) {
				foundIdx = j;
				break;
			}
		}

		if (foundIdx == -1) {
			undetectedCorners.push_back(std::vector< cv::Point2f >());
			undetectedIds.push_back(_board->ids[i]);
			projectPoints(_board->objPoints[i], rvec, tvec, _cameraMatrix, _distCoeffs,
				undetectedCorners.back());
		}
	}

	_undetectedMarkersIds.create((int)undetectedIds.size(), 1, CV_32SC1);
	for (unsigned int i = 0; i < undetectedIds.size(); i++)
		_undetectedMarkersIds.getMat().ptr< int >(0)[i] = undetectedIds[i];

	_undetectedMarkersProjectedCorners.create((int)undetectedCorners.size(), 1, CV_32FC2);
	for (unsigned int i = 0; i < undetectedCorners.size(); i++) {
		_undetectedMarkersProjectedCorners.create(4, 1, CV_32FC2, i, true);
		for (int j = 0; j < 4; j++) {
			_undetectedMarkersProjectedCorners.getMat(i).ptr< cv::Point2f >()[j] =
				undetectedCorners[i][j];
		}
	}
}

static void _projectUndetectedMarkers(
	cv::Ptr<Board> &_board,
	cv::InputOutputArrayOfArrays _detectedCorners,
	cv::InputOutputArray _detectedIds,
	cv::OutputArrayOfArrays _undetectedMarkersProjectedCorners,
	cv::OutputArray _undetectedMarkersIds) {

	CV_Assert(_board->objPoints.size() > 0);
	CV_Assert(_board->objPoints[0].size() > 0);
	float boardZ = _board->objPoints[0][0].z;
	for (unsigned int i = 0; i < _board->objPoints.size(); i++) {
		for (unsigned int j = 0; j < _board->objPoints[i].size(); j++) {
			CV_Assert(boardZ == _board->objPoints[i][j].z);
		}
	}

	std::vector< cv::Point2f > detectedMarkersObj2DAll;

	std::vector< cv::Point2f > imageCornersAll;
	std::vector< std::vector< cv::Point2f > > undetectedMarkersObj2D;

	std::vector< int > undetectedMarkersIds;

	for (unsigned int j = 0; j < _board->ids.size(); j++) {
		bool found = false;
		for (unsigned int i = 0; i < _detectedIds.total(); i++) {
			if (_detectedIds.getMat().ptr< int >()[i] == _board->ids[j]) {
				for (int c = 0; c < 4; c++) {
					imageCornersAll.push_back(_detectedCorners.getMat(i).ptr< cv::Point2f >()[c]);
					detectedMarkersObj2DAll.push_back(
						cv::Point2f(_board->objPoints[j][c].x, _board->objPoints[j][c].y));
				}
				found = true;
				break;
			}
		}
		if (!found) {
			undetectedMarkersObj2D.push_back(std::vector< cv::Point2f >());
			for (int c = 0; c < 4; c++) {
				undetectedMarkersObj2D.back().push_back(
					cv::Point2f(_board->objPoints[j][c].x, _board->objPoints[j][c].y));
			}
			undetectedMarkersIds.push_back(_board->ids[j]);
		}
	}
	if (imageCornersAll.size() == 0) return;

	cv::Mat transformation = cv::findHomography(detectedMarkersObj2DAll, imageCornersAll);

	_undetectedMarkersProjectedCorners.create((int)undetectedMarkersIds.size(), 1, CV_32FC2);

	for (unsigned int i = 0; i < undetectedMarkersObj2D.size(); i++) {
		cv::Mat projectedMarker;
		cv::perspectiveTransform(undetectedMarkersObj2D[i], projectedMarker, transformation);

		_undetectedMarkersProjectedCorners.create(4, 1, CV_32FC2, i, true);
		projectedMarker.copyTo(_undetectedMarkersProjectedCorners.getMat(i));
	}

	_undetectedMarkersIds.create((int)undetectedMarkersIds.size(), 1, CV_32SC1);
	for (unsigned int i = 0; i < undetectedMarkersIds.size(); i++)
		_undetectedMarkersIds.getMat().ptr< int >(0)[i] = undetectedMarkersIds[i];
}

void refineDetectedMarkers(
	cv::InputArray _image,
	cv::Ptr<Board> &_board,
	cv::InputOutputArrayOfArrays _detectedCorners,
	cv::InputOutputArray _detectedIds,
	cv::InputOutputArrayOfArrays _rejectedCorners,
	cv::InputArray _cameraMatrix = cv::noArray(),
	cv::InputArray _distCoeffs = cv::noArray(),
	float minRepDistance = 10.f,
	float errorCorrectionRate = 3.f,
	bool checkAllOrders = true,
	cv::OutputArray _recoveredIdxs = cv::noArray(),
	const cv::Ptr<DetectorParameters> &_params = DetectorParameters::create()) {

	CV_Assert(minRepDistance > 0);

	if (_detectedIds.total() == 0 || _rejectedCorners.total() == 0) return;

	DetectorParameters &params = *_params;

	std::vector< std::vector< cv::Point2f > > undetectedMarkersCorners;
	std::vector< int > undetectedMarkersIds;
	if (_cameraMatrix.total() != 0) {

		_projectUndetectedMarkers(
			_board, _detectedCorners, _detectedIds, _cameraMatrix, _distCoeffs,
			undetectedMarkersCorners, undetectedMarkersIds);

	}
	else {

		_projectUndetectedMarkers(
			_board, _detectedCorners, _detectedIds, undetectedMarkersCorners,
			undetectedMarkersIds);
	}

	std::vector< bool > alreadyIdentified(_rejectedCorners.total(), false);

	Dictionary &dictionary = *(_board->dictionary);
	int maxCorrectionRecalculated =
		int(double(dictionary.maxCorrectionBits) * errorCorrectionRate);

	cv::Mat grey;
	_convertToGrey(_image, grey);

	std::vector< cv::Mat > finalAcceptedCorners;
	std::vector< int > finalAcceptedIds;

	finalAcceptedCorners.resize(_detectedCorners.total());
	finalAcceptedIds.resize(_detectedIds.total());
	for (unsigned int i = 0; i < _detectedIds.total(); i++) {
		finalAcceptedCorners[i] = _detectedCorners.getMat(i).clone();
		finalAcceptedIds[i] = _detectedIds.getMat().ptr< int >()[i];
	}
	std::vector< int > recoveredIdxs;

	for (unsigned int i = 0; i < undetectedMarkersIds.size(); i++) {

		int closestCandidateIdx = -1;
		double closestCandidateDistance = minRepDistance * minRepDistance + 1;
		cv::Mat closestRotatedMarker;

		for (unsigned int j = 0; j < _rejectedCorners.total(); j++) {
			if (alreadyIdentified[j]) continue;

			double minDistance = closestCandidateDistance + 1;
			bool valid = false;
			int validRot = 0;
			for (int c = 0; c < 4; c++) {
				double currentMaxDistance = 0;
				for (int k = 0; k < 4; k++) {
					cv::Point2f rejCorner = _rejectedCorners.getMat(j).ptr< cv::Point2f >()[(c + k) % 4];
					cv::Point2f distVector = undetectedMarkersCorners[i][k] - rejCorner;
					double cornerDist = distVector.x * distVector.x + distVector.y * distVector.y;
					currentMaxDistance = std::max(currentMaxDistance, cornerDist);
				}

				if (currentMaxDistance < closestCandidateDistance) {
					valid = true;
					validRot = c;
					minDistance = currentMaxDistance;
				}
				if (!checkAllOrders) break;
			}

			if (!valid) continue;

			cv::Mat rotatedMarker;
			if (checkAllOrders) {
				rotatedMarker = cv::Mat(4, 1, CV_32FC2);
				for (int c = 0; c < 4; c++)
					rotatedMarker.ptr< cv::Point2f >()[c] =
					_rejectedCorners.getMat(j).ptr< cv::Point2f >()[(c + 4 + validRot) % 4];
			}
			else rotatedMarker = _rejectedCorners.getMat(j);

			int codeDistance = 0;

			if (errorCorrectionRate >= 0) {

				cv::Mat bits = _extractBits(
					grey, rotatedMarker, dictionary.markerSize, params.markerBorderBits,
					params.perspectiveRemovePixelPerCell,
					params.perspectiveRemoveIgnoredMarginPerCell, params.minOtsuStdDev);

				cv::Mat onlyBits =
					bits.rowRange(params.markerBorderBits, bits.rows - params.markerBorderBits)
					.colRange(params.markerBorderBits, bits.rows - params.markerBorderBits);

				codeDistance =
					dictionary.getDistanceToId(onlyBits, undetectedMarkersIds[i], false);
			}

			if (errorCorrectionRate < 0 || codeDistance < maxCorrectionRecalculated) {
				closestCandidateIdx = j;
				closestCandidateDistance = minDistance;
				closestRotatedMarker = rotatedMarker;
			}
		}

		if (closestCandidateIdx >= 0) {

			if (params.doCornerRefinement) {
				CV_Assert(params.cornerRefinementWinSize > 0 &&
					params.cornerRefinementMaxIterations > 0 &&
					params.cornerRefinementMinAccuracy > 0);
				cornerSubPix(grey, closestRotatedMarker,
					cv::Size(params.cornerRefinementWinSize,
					params.cornerRefinementWinSize),
					cv::Size(-1, -1),
					cv::TermCriteria(cv::TermCriteria::MAX_ITER | cv::TermCriteria::EPS,
					params.cornerRefinementMaxIterations,
					params.cornerRefinementMinAccuracy));
			}

			alreadyIdentified[closestCandidateIdx] = true;

			finalAcceptedCorners.push_back(closestRotatedMarker);
			finalAcceptedIds.push_back(undetectedMarkersIds[i]);

			recoveredIdxs.push_back(closestCandidateIdx);
		}
	}

	if (finalAcceptedIds.size() != _detectedIds.total()) {
		_detectedCorners.clear();
		_detectedIds.clear();

		_detectedIds.create((int)finalAcceptedIds.size(), 1, CV_32SC1);
		for (unsigned int i = 0; i < finalAcceptedIds.size(); i++)
			_detectedIds.getMat().ptr< int >(0)[i] = finalAcceptedIds[i];

		_detectedCorners.create((int)finalAcceptedCorners.size(), 1, CV_32FC2);
		for (unsigned int i = 0; i < finalAcceptedCorners.size(); i++) {
			_detectedCorners.create(4, 1, CV_32FC2, i, true);
			for (int j = 0; j < 4; j++) {
				_detectedCorners.getMat(i).ptr< cv::Point2f >()[j] =
					finalAcceptedCorners[i].ptr< cv::Point2f >()[j];
			}
		}

		std::vector< cv::Mat > finalRejected;
		for (unsigned int i = 0; i < alreadyIdentified.size(); i++) {
			if (!alreadyIdentified[i]) {
				finalRejected.push_back(_rejectedCorners.getMat(i).clone());
			}
		}

		_rejectedCorners.clear();
		_rejectedCorners.create((int)finalRejected.size(), 1, CV_32FC2);
		for (unsigned int i = 0; i < finalRejected.size(); i++) {
			_rejectedCorners.create(4, 1, CV_32FC2, i, true);
			for (int j = 0; j < 4; j++) {
				_rejectedCorners.getMat(i).ptr< cv::Point2f >()[j] =
					finalRejected[i].ptr< cv::Point2f >()[j];
			}
		}

		if (_recoveredIdxs.needed()) {
			_recoveredIdxs.create((int)recoveredIdxs.size(), 1, CV_32SC1);
			for (unsigned int i = 0; i < recoveredIdxs.size(); i++) {
				_recoveredIdxs.getMat().ptr< int >()[i] = recoveredIdxs[i];
			}
		}
	}
}

void drawDetectedMarkers(
	cv::InputOutputArray _image,
	cv::InputArrayOfArrays _corners,
	cv::InputArray _ids,
	cv::Scalar borderColor) {

	CV_Assert(_image.getMat().total() != 0 &&
		(_image.getMat().channels() == 1 || _image.getMat().channels() == 3));
	CV_Assert((_corners.total() == _ids.total()) || _ids.total() == 0);

	cv::Scalar textColor, cornerColor;
	textColor = cornerColor = borderColor;
	std::swap(textColor.val[0], textColor.val[1]);
	std::swap(cornerColor.val[1], cornerColor.val[2]);

	int nMarkers = (int)_corners.total();
	for (int i = 0; i < nMarkers; i++) {
		cv::Mat currentMarker = _corners.getMat(i);
		CV_Assert(currentMarker.total() == 4 && currentMarker.type() == CV_32FC2);

		for (int j = 0; j < 4; j++) {
			cv::Point2f p0, p1;
			p0 = currentMarker.ptr< cv::Point2f >(0)[j];
			p1 = currentMarker.ptr< cv::Point2f >(0)[(j + 1) % 4];
			cv::line(_image, p0, p1, borderColor, 1);
		}

		cv::rectangle(_image, currentMarker.ptr< cv::Point2f >(0)[0] - cv::Point2f(3, 3),
			currentMarker.ptr< cv::Point2f >(0)[0] + cv::Point2f(3, 3), cornerColor, 1, cv::LINE_AA);

		if (_ids.total() != 0) {
			cv::Point2f cent(0, 0);
			for (int p = 0; p < 4; p++)
				cent += currentMarker.ptr< cv::Point2f >(0)[p];
			cent = cent / 4.;
			std::stringstream s;
			s << "id=" << _ids.getMat().ptr< int >(0)[i];
			cv::putText(_image, s.str(), cent, cv::FONT_HERSHEY_SIMPLEX, 0.5, textColor, 1, cv::LINE_AA);
		}
	}
}

void drawAxis(
	cv::InputOutputArray _image,
	cv::InputArray _cameraMatrix,
	cv::InputArray _distCoeffs,
	cv::InputArray _rvec,
	cv::InputArray _tvec,
	float length) {

	CV_Assert(_image.getMat().total() != 0 &&
		(_image.getMat().channels() == 1 || _image.getMat().channels() == 3));
	CV_Assert(length > 0);

	std::vector< cv::Point3f > axisPoints;
	axisPoints.push_back(cv::Point3f(0, 0, 0));
	axisPoints.push_back(cv::Point3f(length, 0, 0));
	axisPoints.push_back(cv::Point3f(0, length, 0));
	axisPoints.push_back(cv::Point3f(0, 0, length));
	std::vector< cv::Point2f > imagePoints;
	cv::projectPoints(axisPoints, _rvec, _tvec, _cameraMatrix, _distCoeffs, imagePoints);

	cv::line(_image, imagePoints[0], imagePoints[1], cv::Scalar(0, 0, 255), 3);
	cv::line(_image, imagePoints[0], imagePoints[2], cv::Scalar(0, 255, 0), 3);
	cv::line(_image, imagePoints[0], imagePoints[3], cv::Scalar(255, 0, 0), 3);
}

double calibrateCameraAruco(
	cv::InputArrayOfArrays _corners,
	cv::InputArray _ids,
	cv::InputArray _counter,
	cv::Ptr<Board> &board,
	cv::Size imageSize,
	cv::InputOutputArray _cameraMatrix,
	cv::InputOutputArray _distCoeffs,
	cv::OutputArrayOfArrays _rvecs = cv::noArray(),
	cv::OutputArrayOfArrays _tvecs = cv::noArray(),
	int flags = 0,
	cv::TermCriteria criteria = cv::TermCriteria(cv::TermCriteria::COUNT + cv::TermCriteria::EPS, 30, DBL_EPSILON)) {

	std::vector< cv::Mat > processedObjectPoints, processedImagePoints;
	size_t nFrames = _counter.total();
	int markerCounter = 0;
	for (size_t frame = 0; frame < nFrames; frame++) {
		int nMarkersInThisFrame = _counter.getMat().ptr< int >()[frame];
		std::vector< cv::Mat > thisFrameCorners;
		std::vector< int > thisFrameIds;

		CV_Assert(nMarkersInThisFrame > 0);

		thisFrameCorners.reserve((size_t)nMarkersInThisFrame);
		thisFrameIds.reserve((size_t)nMarkersInThisFrame);
		for (int j = markerCounter; j < markerCounter + nMarkersInThisFrame; j++) {
			thisFrameCorners.push_back(_corners.getMat(j));
			thisFrameIds.push_back(_ids.getMat().ptr< int >()[j]);
		}
		markerCounter += nMarkersInThisFrame;
		cv::Mat currentImgPoints, currentObjPoints;
		_getBoardObjectAndImagePoints(board, thisFrameIds, thisFrameCorners, currentImgPoints,
			currentObjPoints);
		if (currentImgPoints.total() > 0 && currentObjPoints.total() > 0) {
			processedImagePoints.push_back(currentImgPoints);
			processedObjectPoints.push_back(currentObjPoints);
		}
	}

	return cv::calibrateCamera(processedObjectPoints, processedImagePoints, imageSize, _cameraMatrix,
		_distCoeffs, _rvecs, _tvecs, cv::noArray(), cv::noArray(), cv::noArray(), flags, criteria);
}

static void _getMaximumSubPixWindowSizes(
	cv::InputArrayOfArrays markerCorners,
	cv::InputArray markerIds,
	cv::InputArray chCorners,
	cv::Ptr<ChBoard> &board,
	std::vector< cv::Size > &sizes) {

	unsigned int nChCorners = (unsigned int)chCorners.getMat().total();
	sizes.resize(nChCorners, cv::Size(-1, -1));

	for (unsigned int i = 0; i < nChCorners; i++) {
		if (chCorners.getMat().at< cv::Point2f >(i) == cv::Point2f(-1, -1)) continue;
		if (board->nearestMarkerIdx[i].size() == 0) continue;

		double minDist = -1;
		int counter = 0;

		for (unsigned int j = 0; j < board->nearestMarkerIdx[i].size(); j++) {

			int markerId = board->ids[board->nearestMarkerIdx[i][j]];
			int markerIdx = -1;
			for (unsigned int k = 0; k < markerIds.getMat().total(); k++) {
				if (markerIds.getMat().at< int >(k) == markerId) {
					markerIdx = k;
					break;
				}
			}
			if (markerIdx == -1) continue;
			cv::Point2f markerCorner =
				markerCorners.getMat(markerIdx).at< cv::Point2f >(board->nearestMarkerCorners[i][j]);
			cv::Point2f chCorner = chCorners.getMat().at< cv::Point2f >(i);
			double dist = norm(markerCorner - chCorner);
			if (minDist == -1) minDist = dist;
			minDist = std::min(dist, minDist);
			counter++;
		}

		if (counter == 0)
			continue;
		else {

			int winSizeInt = int(minDist - 2);
			if (winSizeInt < 1) winSizeInt = 1;
			if (winSizeInt > 10) winSizeInt = 10;
			sizes[i] = cv::Size(winSizeInt, winSizeInt);
		}
	}
}

static unsigned int _filterCornersWithoutMinMarkers(
	cv::Ptr<ChBoard> &_board,
	cv::InputArray _allChCorners,
	cv::InputArray _allChIds,
	cv::InputArray _allArucoIds, int minMarkers,
	cv::OutputArray _filteredChCorners,
	cv::OutputArray _filteredChIds) {

	CV_Assert(minMarkers >= 0 && minMarkers <= 2);

	std::vector< cv::Point2f > filteredChCorners;
	std::vector< int > filteredChIds;

	for (unsigned int i = 0; i < _allChIds.getMat().total(); i++) {
		int currentChId = _allChIds.getMat().at< int >(i);
		int totalMarkers = 0;

		for (unsigned int m = 0; m < _board->nearestMarkerIdx[currentChId].size(); m++) {
			int markerId = _board->ids[_board->nearestMarkerIdx[currentChId][m]];
			bool found = false;
			for (unsigned int k = 0; k < _allArucoIds.getMat().total(); k++) {
				if (_allArucoIds.getMat().at< int >(k) == markerId) {
					found = true;
					break;
				}
			}
			if (found) totalMarkers++;
		}

		if (totalMarkers >= minMarkers) {
			filteredChIds.push_back(currentChId);
			filteredChCorners.push_back(_allChCorners.getMat().at< cv::Point2f >(i));
		}
	}

	_filteredChCorners.create((int)filteredChCorners.size(), 1, CV_32FC2);
	for (unsigned int i = 0; i < filteredChCorners.size(); i++) {
		_filteredChCorners.getMat().at< cv::Point2f >(i) = filteredChCorners[i];
	}

	_filteredChIds.create((int)filteredChIds.size(), 1, CV_32SC1);
	for (unsigned int i = 0; i < filteredChIds.size(); i++) {
		_filteredChIds.getMat().at< int >(i) = filteredChIds[i];
	}

	return (unsigned int)filteredChCorners.size();
}

static unsigned int _selectAndRefineChessboardCorners(
	cv::InputArray _allCorners,
	cv::InputArray _image,
	cv::OutputArray _selectedCorners,
	cv::OutputArray _selectedIds,
	const std::vector< cv::Size > &winSizes) {

	const int minDistToBorder = 2;

	std::vector< cv::Point2f > filteredChessboardImgPoints;
	std::vector< cv::Size > filteredWinSizes;
	std::vector< int > filteredIds;

	cv::Rect innerRect(minDistToBorder, minDistToBorder, _image.getMat().cols - 2 * minDistToBorder,
		_image.getMat().rows - 2 * minDistToBorder);
	for (unsigned int i = 0; i < _allCorners.getMat().total(); i++) {
		if (innerRect.contains(_allCorners.getMat().at< cv::Point2f >(i))) {
			filteredChessboardImgPoints.push_back(_allCorners.getMat().at< cv::Point2f >(i));
			filteredIds.push_back(i);
			filteredWinSizes.push_back(winSizes[i]);
		}
	}

	if (filteredChessboardImgPoints.size() == 0) return 0;

	cv::Mat grey;
	if (_image.getMat().type() == CV_8UC3)
		cvtColor(_image.getMat(), grey, cv::COLOR_BGR2GRAY);
	else
		_image.getMat().copyTo(grey);

	const cv::Ptr<DetectorParameters> params = DetectorParameters::create();

	cv::parallel_for_(
		cv::Range(0, (int)filteredChessboardImgPoints.size()),
		ChSubpixelParallel(&grey, &filteredChessboardImgPoints, &filteredWinSizes, params));

	_selectedCorners.create((int)filteredChessboardImgPoints.size(), 1, CV_32FC2);
	for (unsigned int i = 0; i < filteredChessboardImgPoints.size(); i++) {
		_selectedCorners.getMat().at< cv::Point2f >(i) = filteredChessboardImgPoints[i];
	}

	_selectedIds.create((int)filteredIds.size(), 1, CV_32SC1);
	for (unsigned int i = 0; i < filteredIds.size(); i++) {
		_selectedIds.getMat().at< int >(i) = filteredIds[i];
	}

	return (unsigned int)filteredChessboardImgPoints.size();
}

static int _interpolateCornersChApproxCalib(
	cv::InputArrayOfArrays _markerCorners,
	cv::InputArray _markerIds,
	cv::InputArray _image,
	cv::Ptr<ChBoard> &_board,
	cv::InputArray _cameraMatrix,
	cv::InputArray _distCoeffs,
	cv::OutputArray _chCorners,
	cv::OutputArray _chIds) {

	CV_Assert(_image.getMat().channels() == 1 || _image.getMat().channels() == 3);
	CV_Assert(_markerCorners.total() == _markerIds.getMat().total() &&
		_markerIds.getMat().total() > 0);

	cv::Mat approximatedRvec, approximatedTvec;
	int detectedBoardMarkers;
	cv::Ptr<Board> _b = _board.staticCast<Board>();
	detectedBoardMarkers =
		estimatePoseBoard(_markerCorners, _markerIds, _b,
		_cameraMatrix, _distCoeffs, approximatedRvec, approximatedTvec);

	if (detectedBoardMarkers == 0) return 0;

	std::vector< cv::Point2f > allChessboardImgPoints;

	projectPoints(_board->chessboardCorners, approximatedRvec, approximatedTvec, _cameraMatrix,
		_distCoeffs, allChessboardImgPoints);

	std::vector< cv::Size > subPixWinSizes;
	_getMaximumSubPixWindowSizes(_markerCorners, _markerIds, allChessboardImgPoints, _board,
		subPixWinSizes);

	unsigned int nRefinedCorners;
	nRefinedCorners = _selectAndRefineChessboardCorners(
		allChessboardImgPoints, _image, _chCorners, _chIds, subPixWinSizes);

	nRefinedCorners = _filterCornersWithoutMinMarkers(_board, _chCorners, _chIds,
		_markerIds, 2, _chCorners, _chIds);

	return nRefinedCorners;
}

static int _interpolateCornersChLocalHom(
	cv::InputArrayOfArrays _markerCorners,
	cv::InputArray _markerIds,
	cv::InputArray _image,
	cv::Ptr<ChBoard> &_board,
	cv::OutputArray _chCorners,
	cv::OutputArray _chIds) {

	CV_Assert(_image.getMat().channels() == 1 || _image.getMat().channels() == 3);
	CV_Assert(_markerCorners.total() == _markerIds.getMat().total() &&
		_markerIds.getMat().total() > 0);

	unsigned int nMarkers = (unsigned int)_markerIds.getMat().total();

	std::vector< cv::Mat > transformations;
	transformations.resize(nMarkers);
	for (unsigned int i = 0; i < nMarkers; i++) {
		std::vector< cv::Point2f > markerObjPoints2D;
		int markerId = _markerIds.getMat().at< int >(i);
		std::vector< int >::const_iterator it = find(_board->ids.begin(), _board->ids.end(), markerId);
		if (it == _board->ids.end()) continue;
		int boardIdx = (int)std::distance<std::vector<int>::const_iterator>(_board->ids.begin(), it);
		markerObjPoints2D.resize(4);
		for (unsigned int j = 0; j < 4; j++)
			markerObjPoints2D[j] =
			cv::Point2f(_board->objPoints[boardIdx][j].x, _board->objPoints[boardIdx][j].y);

		transformations[i] = getPerspectiveTransform(markerObjPoints2D, _markerCorners.getMat(i));
	}

	unsigned int nChCorners = (unsigned int)_board->chessboardCorners.size();
	std::vector< cv::Point2f > allChessboardImgPoints(nChCorners, cv::Point2f(-1, -1));

	for (unsigned int i = 0; i < nChCorners; i++) {
		cv::Point2f objPoint2D = cv::Point2f(_board->chessboardCorners[i].x, _board->chessboardCorners[i].y);

		std::vector< cv::Point2f > interpolatedPositions;
		for (unsigned int j = 0; j < _board->nearestMarkerIdx[i].size(); j++) {
			int markerId = _board->ids[_board->nearestMarkerIdx[i][j]];
			int markerIdx = -1;
			for (unsigned int k = 0; k < _markerIds.getMat().total(); k++) {
				if (_markerIds.getMat().at< int >(k) == markerId) {
					markerIdx = k;
					break;
				}
			}
			if (markerIdx != -1) {
				std::vector< cv::Point2f > in, out;
				in.push_back(objPoint2D);
				perspectiveTransform(in, out, transformations[markerIdx]);
				interpolatedPositions.push_back(out[0]);
			}
		}

		if (interpolatedPositions.size() == 0) continue;

		if (interpolatedPositions.size() > 1) {
			allChessboardImgPoints[i] = (interpolatedPositions[0] + interpolatedPositions[1]) / 2.;
		}

		else allChessboardImgPoints[i] = interpolatedPositions[0];
	}

	std::vector< cv::Size > subPixWinSizes;
	_getMaximumSubPixWindowSizes(_markerCorners, _markerIds, allChessboardImgPoints, _board,
		subPixWinSizes);

	unsigned int nRefinedCorners;
	nRefinedCorners = _selectAndRefineChessboardCorners(
		allChessboardImgPoints, _image, _chCorners, _chIds, subPixWinSizes);

	nRefinedCorners = _filterCornersWithoutMinMarkers(_board, _chCorners, _chIds,
		_markerIds, 2, _chCorners, _chIds);

	return nRefinedCorners;
}

int interpolateCornersCh(
	cv::InputArrayOfArrays _markerCorners,
	cv::InputArray _markerIds,
	cv::InputArray _image,
	cv::Ptr<ChBoard> &_board,
	cv::OutputArray _chCorners,
	cv::OutputArray _chIds,
	cv::InputArray _cameraMatrix,
	cv::InputArray _distCoeffs) {

	if (_cameraMatrix.total() != 0) {
		return _interpolateCornersChApproxCalib(_markerCorners, _markerIds, _image, _board,
			_cameraMatrix, _distCoeffs, _chCorners,
			_chIds);
	}

	else {
		return _interpolateCornersChLocalHom(_markerCorners, _markerIds, _image, _board,
			_chCorners, _chIds);
	}
}

void drawDetectedCornersCh(
	cv::InputOutputArray _image,
	cv::InputArray _chCorners,
	cv::InputArray _chIds,
	cv::Scalar cornerColor) {

	CV_Assert(_image.getMat().total() != 0 &&
		(_image.getMat().channels() == 1 || _image.getMat().channels() == 3));
	CV_Assert((_chCorners.getMat().total() == _chIds.getMat().total()) ||
		_chIds.getMat().total() == 0);

	unsigned int nCorners = (unsigned int)_chCorners.getMat().total();
	for (unsigned int i = 0; i < nCorners; i++) {
		cv::Point2f corner = _chCorners.getMat().at< cv::Point2f >(i);

		cv::rectangle(_image, corner - cv::Point2f(3, 3), corner + cv::Point2f(3, 3), cornerColor, 1, cv::LINE_AA);

		if (_chIds.total() != 0) {
			int id = _chIds.getMat().at< int >(i);
			std::stringstream s;
			s << "id=" << id;
			cv::putText(_image, s.str(), corner + cv::Point2f(5, -5), cv::FONT_HERSHEY_SIMPLEX, 0.5,
				cornerColor, 1, cv::LINE_AA);
		}
	}
}

double calibrateCameraCh(
	cv::InputArrayOfArrays _chCorners,
	cv::InputArrayOfArrays _chIds,
	cv::Ptr<ChBoard> &_board,
	cv::Size imageSize,
	cv::InputOutputArray _cameraMatrix,
	cv::InputOutputArray _distCoeffs,
	cv::OutputArrayOfArrays _rvecs = cv::noArray(),
	cv::OutputArrayOfArrays _tvecs = cv::noArray(),
	int flags = 0,
	cv::TermCriteria criteria = cv::TermCriteria(cv::TermCriteria::COUNT + cv::TermCriteria::EPS, 30, DBL_EPSILON)) {

	CV_Assert(_chIds.total() > 0 && (_chIds.total() == _chCorners.total()));

	std::vector< std::vector< cv::Point3f > > allObjPoints;
	allObjPoints.resize(_chIds.total());
	for (unsigned int i = 0; i < _chIds.total(); i++) {
		unsigned int nCorners = (unsigned int)_chIds.getMat(i).total();
		CV_Assert(nCorners > 0 && nCorners == _chCorners.getMat(i).total());
		allObjPoints[i].reserve(nCorners);

		for (unsigned int j = 0; j < nCorners; j++) {
			int pointId = _chIds.getMat(i).at< int >(j);
			CV_Assert(pointId >= 0 && pointId < (int)_board->chessboardCorners.size());
			allObjPoints[i].push_back(_board->chessboardCorners[pointId]);
		}
	}

	return calibrateCamera(allObjPoints, _chCorners, imageSize, _cameraMatrix, _distCoeffs,
		_rvecs, _tvecs, cv::noArray(), cv::noArray(), cv::noArray(), flags, criteria);
}

static bool _arePointsEnoughForPoseEstimation(const std::vector< cv::Point3f > &points) {

	if (points.size() < 4) return false;

	std::vector< double > sameXValue;
	std::vector< int > sameXCounter;
	for (unsigned int i = 0; i < points.size(); i++) {
		bool found = false;
		for (unsigned int j = 0; j < sameXValue.size(); j++) {
			if (sameXValue[j] == points[i].x) {
				found = true;
				sameXCounter[j]++;
			}
		}
		if (!found) {
			sameXValue.push_back(points[i].x);
			sameXCounter.push_back(1);
		}
	}

	int moreThan2 = 0;
	for (unsigned int i = 0; i < sameXCounter.size(); i++) {
		if (sameXCounter[i] >= 2) moreThan2++;
	}

	if (moreThan2 > 1)
		return true;
	else
		return false;
}

bool estimatePoseChBoard(
	cv::InputArray _chCorners,
	cv::InputArray _chIds,
	cv::Ptr<ChBoard> &_board,
	cv::InputArray _cameraMatrix,
	cv::InputArray _distCoeffs,
	cv::OutputArray _rvec,
	cv::OutputArray _tvec) {

	CV_Assert((_chCorners.getMat().total() == _chIds.getMat().total()));

	if (_chIds.getMat().total() < 4) return false;

	std::vector< cv::Point3f > objPoints;
	objPoints.reserve(_chIds.getMat().total());
	for (unsigned int i = 0; i < _chIds.getMat().total(); i++) {
		int currId = _chIds.getMat().at< int >(i);
		CV_Assert(currId >= 0 && currId < (int)_board->chessboardCorners.size());
		objPoints.push_back(_board->chessboardCorners[currId]);
	}

	if (!_arePointsEnoughForPoseEstimation(objPoints)) return false;

	cv::solvePnP(objPoints, _chCorners, _cameraMatrix, _distCoeffs, _rvec, _tvec);

	return true;
}

bool calibrate(
	const std::string filename,
	const cv::Size frameSize = cv::Size(1280, 720),
	const int frameMargin = 10,
	const int boardPad = 10,
	const int squaresX = 5,
	const int squaresY = 8,
	const float squareLength = 0.04f,
	const float markerLength = 0.02f)
{
	// ------------------------------------------------------------------------
	// make board

	cv::Ptr<Dictionary> dictionary = Dictionary::create();
	cv::Ptr<ChBoard> chBoard = ChBoard::create(
		squaresX, squaresY, squareLength, markerLength, dictionary);
	cv::Ptr<Board> board = chBoard.staticCast<Board>();

	// ------------------------------------------------------------------------
	// make board image for print

	cv::Mat boardImg;
	chBoard->draw(cv::Size(2480, 3508), boardImg, boardPad);
	cv::imwrite("board.png", boardImg);

	// ------------------------------------------------------------------------
	// setup camera

	cv::VideoCapture cap(1);
	cap.set(CV_CAP_PROP_FRAME_WIDTH, frameSize.width);
	cap.set(CV_CAP_PROP_FRAME_HEIGHT, frameSize.height);
	if (!cap.isOpened())
		return false;

	// ------------------------------------------------------------------------
	// main loop

	std::vector< std::vector< std::vector<cv::Point2f> > > allCorners;
	std::vector< std::vector<int> > allIds;
	std::vector< cv::Mat > allImgs;
	cv::Mat frame;

	for (int i = 0, prev_i = -frameMargin;; ++i) {
		cap >> frame;

		std::vector< int > ids;
		std::vector< std::vector< cv::Point2f > > corners, rejected;
		detectMarkers(frame, dictionary, corners, ids,
			DetectorParameters::create(), rejected);
		refineDetectedMarkers(frame, board, corners, ids, rejected);

		cv::Mat vis;
		frame.copyTo(vis);
		if (ids.size() > 0) {
			drawDetectedMarkers(
				vis, corners, ids, cv::Scalar(0, 255, 255));
		}
		cv::putText(vis,
			"Press 'ESC' to finish and calibrate",
			cv::Point(10, 20), cv::FONT_HERSHEY_SIMPLEX, 0.4,
			cv::Scalar(255, 255, 0), 1, cv::LINE_AA);
		cv::imshow("vis", vis);

		const char key = cv::waitKey(30);
		if (key == 27) {
			break;
		}
		else if (ids.size() > 0 && i - prev_i >= frameMargin) {
			allCorners.push_back(corners);
			allIds.push_back(ids);
			allImgs.push_back(frame);
			prev_i = i;
			std::cout << "Frame captured #" << allImgs.size() << std::endl;
		}
	}

	// ------------------------------------------------------------------------
	// camera calibration

	if (allIds.size() < 1) {
		std::cerr << "Not enough captures for calibration" << std::endl;
		return false;
	}
	cv::Mat cameraMatrix, distCoeffs;
	std::vector< cv::Mat > rvecs, tvecs;

	// prepare data for calibration
	std::vector< std::vector< cv::Point2f > > allCornersConcatenated;
	std::vector< int > allIdsConcatenated;
	std::vector< int > markerCounterPerFrame;
	markerCounterPerFrame.reserve(allCorners.size());
	for (unsigned int i = 0; i < allCorners.size(); i++) {
		markerCounterPerFrame.push_back((int)allCorners[i].size());
		for (unsigned int j = 0; j < allCorners[i].size(); j++) {
			allCornersConcatenated.push_back(allCorners[i][j]);
			allIdsConcatenated.push_back(allIds[i][j]);
		}
	}

	double arucoRepErr = calibrateCameraAruco(
		allCornersConcatenated, allIdsConcatenated,
		markerCounterPerFrame, board, frameSize,
		cameraMatrix, distCoeffs);

	int nFrames = (int)allCorners.size();
	std::vector< cv::Mat > allChCorners;
	std::vector< cv::Mat > allChIds;
	allChCorners.reserve(nFrames);
	allChIds.reserve(nFrames);

	for (int i = 0; i < nFrames; i++) {
		// interpolate using camera parameters
		cv::Mat currentChCorners, currentChIds;
		interpolateCornersCh(
			allCorners[i], allIds[i], allImgs[i], chBoard,
			currentChCorners, currentChIds,
			cameraMatrix, distCoeffs);

		const int num = currentChCorners.size().height;
		if (num > 4) {
			allChCorners.push_back(currentChCorners);
			allChIds.push_back(currentChIds);
		}
	}

	if (allChCorners.size() < 4) {
		std::cerr << "Not enough corners for calibration" << std::endl;
		return false;
	}

	double repError = calibrateCameraCh(
		allChCorners, allChIds, chBoard, frameSize,
		cameraMatrix, distCoeffs, rvecs, tvecs, 0);

	// ------------------------------------------------------------------------
	// save camera parameters

	cv::FileStorage fs(filename, cv::FileStorage::WRITE);
	if (!fs.isOpened()) {
		std::cerr << "Cannot save output file" << std::endl;
		return false;
	}
	fs << "imageWidth" << frameSize.width;
	fs << "imageHeight" << frameSize.height;
	fs << "cameraMatrix" << cameraMatrix;
	fs << "distCoeffs" << distCoeffs;
	fs << "avgReprojError" << repError;
	fs.release();
	return true;
}

bool estimate(
	const cv::Mat & cameraMatrix, 
	const cv::Mat & distCoeffs,
	const cv::Size frameSize = cv::Size(1280, 720),
	const int boardPad = 10,
	const int squaresX = 5,
	const int squaresY = 8,
	const float squareLength = 0.04f,
	const float markerLength = 0.02f)
{
	float axisLength = 0.5f * (std::min(squaresX, squaresY) * (squareLength));

	// ------------------------------------------------------------------------
	// make board

	cv::Ptr<Dictionary> dictionary = Dictionary::create();
	cv::Ptr<ChBoard> chBoard = ChBoard::create(
		squaresX, squaresY, squareLength, markerLength, dictionary);
	cv::Ptr<Board> board = chBoard.staticCast<Board>();

	// ------------------------------------------------------------------------
	// setup camera

	cv::VideoCapture cap(1);
	cap.set(CV_CAP_PROP_FRAME_WIDTH, frameSize.width);
	cap.set(CV_CAP_PROP_FRAME_HEIGHT, frameSize.height);
	if (!cap.isOpened())
		return false;

	// ------------------------------------------------------------------------
	// main loop

	cv::Mat frame;

	for (int i = 0;; ++i) {
		 cap >> frame;

		std::vector< int > ids, chIds;
		std::vector< std::vector< cv::Point2f > > corners, rejected;
		std::vector< cv::Point2f > chCorners;
		detectMarkers(frame, dictionary, corners, ids,
			DetectorParameters::create(), rejected);
		refineDetectedMarkers(frame, board, corners, ids, rejected);

		int numCorners = 0;
		if (ids.size() > 0)
			numCorners = interpolateCornersCh(
			corners, ids, frame, chBoard, chCorners,
			chIds, cameraMatrix, distCoeffs);

		cv::Vec3d rvec, tvec;
		bool validPose = false;
		if (cameraMatrix.total() != 0) {
			validPose = estimatePoseChBoard(
				chCorners, chIds, chBoard,
				cameraMatrix, distCoeffs, rvec, tvec);
		}

		cv::Mat vis;
		frame.copyTo(vis);
		if (numCorners > 0)
			drawDetectedCornersCh(
				vis, chCorners, chIds, cv::Scalar(0, 255, 255));
		if (validPose)
			drawAxis(
			vis, cameraMatrix, distCoeffs, rvec, tvec, axisLength);
		cv::imshow("vis", vis);

		const char key = cv::waitKey(30);
		if (key == 27) {
			break;
		}
	}

	return true;
}

int main()
{
	std::string filename = "camera.yml";
	if (!std::ifstream(filename.c_str()).good()) {
		if (!calibrate(filename)) {
			std::cerr << "Cannot calibrate the camera" << std::endl;
			return -1;
		}
	}

	cv::FileStorage fs(filename, cv::FileStorage::READ);
	if (!fs.isOpened()) {
		std::cerr << "Cannot open calibration file" << std::endl;
		return -1;
	}
	cv::Size frameSize;
	cv::Mat cameraMatrix, distCoeffs;
	fs["cameraMatrix"] >> cameraMatrix;
	fs["distCoeffs"] >> distCoeffs;
	fs.release();

	std::cout << "cameraMatrix: " << cameraMatrix << std::endl;
	std::cout << "distCoeffs: " << distCoeffs << std::endl;

	estimate(cameraMatrix, distCoeffs);

	return 0;
}